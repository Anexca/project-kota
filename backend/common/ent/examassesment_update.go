// Code generated by ent, DO NOT EDIT.

package ent

import (
	"common/ent/examassesment"
	"common/ent/examattempt"
	"common/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamAssesmentUpdate is the builder for updating ExamAssesment entities.
type ExamAssesmentUpdate struct {
	config
	hooks    []Hook
	mutation *ExamAssesmentMutation
}

// Where appends a list predicates to the ExamAssesmentUpdate builder.
func (eau *ExamAssesmentUpdate) Where(ps ...predicate.ExamAssesment) *ExamAssesmentUpdate {
	eau.mutation.Where(ps...)
	return eau
}

// SetCompletedSeconds sets the "completed_seconds" field.
func (eau *ExamAssesmentUpdate) SetCompletedSeconds(i int) *ExamAssesmentUpdate {
	eau.mutation.ResetCompletedSeconds()
	eau.mutation.SetCompletedSeconds(i)
	return eau
}

// SetNillableCompletedSeconds sets the "completed_seconds" field if the given value is not nil.
func (eau *ExamAssesmentUpdate) SetNillableCompletedSeconds(i *int) *ExamAssesmentUpdate {
	if i != nil {
		eau.SetCompletedSeconds(*i)
	}
	return eau
}

// AddCompletedSeconds adds i to the "completed_seconds" field.
func (eau *ExamAssesmentUpdate) AddCompletedSeconds(i int) *ExamAssesmentUpdate {
	eau.mutation.AddCompletedSeconds(i)
	return eau
}

// SetRawAssesmentData sets the "raw_assesment_data" field.
func (eau *ExamAssesmentUpdate) SetRawAssesmentData(m map[string]interface{}) *ExamAssesmentUpdate {
	eau.mutation.SetRawAssesmentData(m)
	return eau
}

// ClearRawAssesmentData clears the value of the "raw_assesment_data" field.
func (eau *ExamAssesmentUpdate) ClearRawAssesmentData() *ExamAssesmentUpdate {
	eau.mutation.ClearRawAssesmentData()
	return eau
}

// SetRawUserSubmission sets the "raw_user_submission" field.
func (eau *ExamAssesmentUpdate) SetRawUserSubmission(m map[string]interface{}) *ExamAssesmentUpdate {
	eau.mutation.SetRawUserSubmission(m)
	return eau
}

// SetStatus sets the "status" field.
func (eau *ExamAssesmentUpdate) SetStatus(e examassesment.Status) *ExamAssesmentUpdate {
	eau.mutation.SetStatus(e)
	return eau
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (eau *ExamAssesmentUpdate) SetNillableStatus(e *examassesment.Status) *ExamAssesmentUpdate {
	if e != nil {
		eau.SetStatus(*e)
	}
	return eau
}

// SetRemarks sets the "remarks" field.
func (eau *ExamAssesmentUpdate) SetRemarks(s string) *ExamAssesmentUpdate {
	eau.mutation.SetRemarks(s)
	return eau
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (eau *ExamAssesmentUpdate) SetNillableRemarks(s *string) *ExamAssesmentUpdate {
	if s != nil {
		eau.SetRemarks(*s)
	}
	return eau
}

// ClearRemarks clears the value of the "remarks" field.
func (eau *ExamAssesmentUpdate) ClearRemarks() *ExamAssesmentUpdate {
	eau.mutation.ClearRemarks()
	return eau
}

// SetUpdatedAt sets the "updated_at" field.
func (eau *ExamAssesmentUpdate) SetUpdatedAt(t time.Time) *ExamAssesmentUpdate {
	eau.mutation.SetUpdatedAt(t)
	return eau
}

// SetAttemptID sets the "attempt" edge to the ExamAttempt entity by ID.
func (eau *ExamAssesmentUpdate) SetAttemptID(id int) *ExamAssesmentUpdate {
	eau.mutation.SetAttemptID(id)
	return eau
}

// SetNillableAttemptID sets the "attempt" edge to the ExamAttempt entity by ID if the given value is not nil.
func (eau *ExamAssesmentUpdate) SetNillableAttemptID(id *int) *ExamAssesmentUpdate {
	if id != nil {
		eau = eau.SetAttemptID(*id)
	}
	return eau
}

// SetAttempt sets the "attempt" edge to the ExamAttempt entity.
func (eau *ExamAssesmentUpdate) SetAttempt(e *ExamAttempt) *ExamAssesmentUpdate {
	return eau.SetAttemptID(e.ID)
}

// Mutation returns the ExamAssesmentMutation object of the builder.
func (eau *ExamAssesmentUpdate) Mutation() *ExamAssesmentMutation {
	return eau.mutation
}

// ClearAttempt clears the "attempt" edge to the ExamAttempt entity.
func (eau *ExamAssesmentUpdate) ClearAttempt() *ExamAssesmentUpdate {
	eau.mutation.ClearAttempt()
	return eau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eau *ExamAssesmentUpdate) Save(ctx context.Context) (int, error) {
	eau.defaults()
	return withHooks(ctx, eau.sqlSave, eau.mutation, eau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eau *ExamAssesmentUpdate) SaveX(ctx context.Context) int {
	affected, err := eau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eau *ExamAssesmentUpdate) Exec(ctx context.Context) error {
	_, err := eau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eau *ExamAssesmentUpdate) ExecX(ctx context.Context) {
	if err := eau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eau *ExamAssesmentUpdate) defaults() {
	if _, ok := eau.mutation.UpdatedAt(); !ok {
		v := examassesment.UpdateDefaultUpdatedAt()
		eau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eau *ExamAssesmentUpdate) check() error {
	if v, ok := eau.mutation.Status(); ok {
		if err := examassesment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ExamAssesment.status": %w`, err)}
		}
	}
	return nil
}

func (eau *ExamAssesmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(examassesment.Table, examassesment.Columns, sqlgraph.NewFieldSpec(examassesment.FieldID, field.TypeInt))
	if ps := eau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eau.mutation.CompletedSeconds(); ok {
		_spec.SetField(examassesment.FieldCompletedSeconds, field.TypeInt, value)
	}
	if value, ok := eau.mutation.AddedCompletedSeconds(); ok {
		_spec.AddField(examassesment.FieldCompletedSeconds, field.TypeInt, value)
	}
	if value, ok := eau.mutation.RawAssesmentData(); ok {
		_spec.SetField(examassesment.FieldRawAssesmentData, field.TypeJSON, value)
	}
	if eau.mutation.RawAssesmentDataCleared() {
		_spec.ClearField(examassesment.FieldRawAssesmentData, field.TypeJSON)
	}
	if value, ok := eau.mutation.RawUserSubmission(); ok {
		_spec.SetField(examassesment.FieldRawUserSubmission, field.TypeJSON, value)
	}
	if value, ok := eau.mutation.Status(); ok {
		_spec.SetField(examassesment.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := eau.mutation.Remarks(); ok {
		_spec.SetField(examassesment.FieldRemarks, field.TypeString, value)
	}
	if eau.mutation.RemarksCleared() {
		_spec.ClearField(examassesment.FieldRemarks, field.TypeString)
	}
	if value, ok := eau.mutation.UpdatedAt(); ok {
		_spec.SetField(examassesment.FieldUpdatedAt, field.TypeTime, value)
	}
	if eau.mutation.AttemptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   examassesment.AttemptTable,
			Columns: []string{examassesment.AttemptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examattempt.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eau.mutation.AttemptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   examassesment.AttemptTable,
			Columns: []string{examassesment.AttemptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{examassesment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eau.mutation.done = true
	return n, nil
}

// ExamAssesmentUpdateOne is the builder for updating a single ExamAssesment entity.
type ExamAssesmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExamAssesmentMutation
}

// SetCompletedSeconds sets the "completed_seconds" field.
func (eauo *ExamAssesmentUpdateOne) SetCompletedSeconds(i int) *ExamAssesmentUpdateOne {
	eauo.mutation.ResetCompletedSeconds()
	eauo.mutation.SetCompletedSeconds(i)
	return eauo
}

// SetNillableCompletedSeconds sets the "completed_seconds" field if the given value is not nil.
func (eauo *ExamAssesmentUpdateOne) SetNillableCompletedSeconds(i *int) *ExamAssesmentUpdateOne {
	if i != nil {
		eauo.SetCompletedSeconds(*i)
	}
	return eauo
}

// AddCompletedSeconds adds i to the "completed_seconds" field.
func (eauo *ExamAssesmentUpdateOne) AddCompletedSeconds(i int) *ExamAssesmentUpdateOne {
	eauo.mutation.AddCompletedSeconds(i)
	return eauo
}

// SetRawAssesmentData sets the "raw_assesment_data" field.
func (eauo *ExamAssesmentUpdateOne) SetRawAssesmentData(m map[string]interface{}) *ExamAssesmentUpdateOne {
	eauo.mutation.SetRawAssesmentData(m)
	return eauo
}

// ClearRawAssesmentData clears the value of the "raw_assesment_data" field.
func (eauo *ExamAssesmentUpdateOne) ClearRawAssesmentData() *ExamAssesmentUpdateOne {
	eauo.mutation.ClearRawAssesmentData()
	return eauo
}

// SetRawUserSubmission sets the "raw_user_submission" field.
func (eauo *ExamAssesmentUpdateOne) SetRawUserSubmission(m map[string]interface{}) *ExamAssesmentUpdateOne {
	eauo.mutation.SetRawUserSubmission(m)
	return eauo
}

// SetStatus sets the "status" field.
func (eauo *ExamAssesmentUpdateOne) SetStatus(e examassesment.Status) *ExamAssesmentUpdateOne {
	eauo.mutation.SetStatus(e)
	return eauo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (eauo *ExamAssesmentUpdateOne) SetNillableStatus(e *examassesment.Status) *ExamAssesmentUpdateOne {
	if e != nil {
		eauo.SetStatus(*e)
	}
	return eauo
}

// SetRemarks sets the "remarks" field.
func (eauo *ExamAssesmentUpdateOne) SetRemarks(s string) *ExamAssesmentUpdateOne {
	eauo.mutation.SetRemarks(s)
	return eauo
}

// SetNillableRemarks sets the "remarks" field if the given value is not nil.
func (eauo *ExamAssesmentUpdateOne) SetNillableRemarks(s *string) *ExamAssesmentUpdateOne {
	if s != nil {
		eauo.SetRemarks(*s)
	}
	return eauo
}

// ClearRemarks clears the value of the "remarks" field.
func (eauo *ExamAssesmentUpdateOne) ClearRemarks() *ExamAssesmentUpdateOne {
	eauo.mutation.ClearRemarks()
	return eauo
}

// SetUpdatedAt sets the "updated_at" field.
func (eauo *ExamAssesmentUpdateOne) SetUpdatedAt(t time.Time) *ExamAssesmentUpdateOne {
	eauo.mutation.SetUpdatedAt(t)
	return eauo
}

// SetAttemptID sets the "attempt" edge to the ExamAttempt entity by ID.
func (eauo *ExamAssesmentUpdateOne) SetAttemptID(id int) *ExamAssesmentUpdateOne {
	eauo.mutation.SetAttemptID(id)
	return eauo
}

// SetNillableAttemptID sets the "attempt" edge to the ExamAttempt entity by ID if the given value is not nil.
func (eauo *ExamAssesmentUpdateOne) SetNillableAttemptID(id *int) *ExamAssesmentUpdateOne {
	if id != nil {
		eauo = eauo.SetAttemptID(*id)
	}
	return eauo
}

// SetAttempt sets the "attempt" edge to the ExamAttempt entity.
func (eauo *ExamAssesmentUpdateOne) SetAttempt(e *ExamAttempt) *ExamAssesmentUpdateOne {
	return eauo.SetAttemptID(e.ID)
}

// Mutation returns the ExamAssesmentMutation object of the builder.
func (eauo *ExamAssesmentUpdateOne) Mutation() *ExamAssesmentMutation {
	return eauo.mutation
}

// ClearAttempt clears the "attempt" edge to the ExamAttempt entity.
func (eauo *ExamAssesmentUpdateOne) ClearAttempt() *ExamAssesmentUpdateOne {
	eauo.mutation.ClearAttempt()
	return eauo
}

// Where appends a list predicates to the ExamAssesmentUpdate builder.
func (eauo *ExamAssesmentUpdateOne) Where(ps ...predicate.ExamAssesment) *ExamAssesmentUpdateOne {
	eauo.mutation.Where(ps...)
	return eauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eauo *ExamAssesmentUpdateOne) Select(field string, fields ...string) *ExamAssesmentUpdateOne {
	eauo.fields = append([]string{field}, fields...)
	return eauo
}

// Save executes the query and returns the updated ExamAssesment entity.
func (eauo *ExamAssesmentUpdateOne) Save(ctx context.Context) (*ExamAssesment, error) {
	eauo.defaults()
	return withHooks(ctx, eauo.sqlSave, eauo.mutation, eauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eauo *ExamAssesmentUpdateOne) SaveX(ctx context.Context) *ExamAssesment {
	node, err := eauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eauo *ExamAssesmentUpdateOne) Exec(ctx context.Context) error {
	_, err := eauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eauo *ExamAssesmentUpdateOne) ExecX(ctx context.Context) {
	if err := eauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eauo *ExamAssesmentUpdateOne) defaults() {
	if _, ok := eauo.mutation.UpdatedAt(); !ok {
		v := examassesment.UpdateDefaultUpdatedAt()
		eauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eauo *ExamAssesmentUpdateOne) check() error {
	if v, ok := eauo.mutation.Status(); ok {
		if err := examassesment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ExamAssesment.status": %w`, err)}
		}
	}
	return nil
}

func (eauo *ExamAssesmentUpdateOne) sqlSave(ctx context.Context) (_node *ExamAssesment, err error) {
	if err := eauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(examassesment.Table, examassesment.Columns, sqlgraph.NewFieldSpec(examassesment.FieldID, field.TypeInt))
	id, ok := eauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ExamAssesment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, examassesment.FieldID)
		for _, f := range fields {
			if !examassesment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != examassesment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eauo.mutation.CompletedSeconds(); ok {
		_spec.SetField(examassesment.FieldCompletedSeconds, field.TypeInt, value)
	}
	if value, ok := eauo.mutation.AddedCompletedSeconds(); ok {
		_spec.AddField(examassesment.FieldCompletedSeconds, field.TypeInt, value)
	}
	if value, ok := eauo.mutation.RawAssesmentData(); ok {
		_spec.SetField(examassesment.FieldRawAssesmentData, field.TypeJSON, value)
	}
	if eauo.mutation.RawAssesmentDataCleared() {
		_spec.ClearField(examassesment.FieldRawAssesmentData, field.TypeJSON)
	}
	if value, ok := eauo.mutation.RawUserSubmission(); ok {
		_spec.SetField(examassesment.FieldRawUserSubmission, field.TypeJSON, value)
	}
	if value, ok := eauo.mutation.Status(); ok {
		_spec.SetField(examassesment.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := eauo.mutation.Remarks(); ok {
		_spec.SetField(examassesment.FieldRemarks, field.TypeString, value)
	}
	if eauo.mutation.RemarksCleared() {
		_spec.ClearField(examassesment.FieldRemarks, field.TypeString)
	}
	if value, ok := eauo.mutation.UpdatedAt(); ok {
		_spec.SetField(examassesment.FieldUpdatedAt, field.TypeTime, value)
	}
	if eauo.mutation.AttemptCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   examassesment.AttemptTable,
			Columns: []string{examassesment.AttemptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examattempt.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eauo.mutation.AttemptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   examassesment.AttemptTable,
			Columns: []string{examassesment.AttemptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ExamAssesment{config: eauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{examassesment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eauo.mutation.done = true
	return _node, nil
}
