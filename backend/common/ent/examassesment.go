// Code generated by ent, DO NOT EDIT.

package ent

import (
	"common/ent/examassesment"
	"common/ent/examattempt"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ExamAssesment is the model entity for the ExamAssesment schema.
type ExamAssesment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CompletedSeconds holds the value of the "completed_seconds" field.
	CompletedSeconds int `json:"completed_seconds,omitempty"`
	// RawAssesmentData holds the value of the "raw_assesment_data" field.
	RawAssesmentData map[string]interface{} `json:"raw_assesment_data,omitempty"`
	// RawUserSubmission holds the value of the "raw_user_submission" field.
	RawUserSubmission map[string]interface{} `json:"raw_user_submission,omitempty"`
	// Status holds the value of the "status" field.
	Status examassesment.Status `json:"status,omitempty"`
	// AssessmentRating holds the value of the "assessment_rating" field.
	AssessmentRating float64 `json:"assessment_rating,omitempty"`
	// Remarks holds the value of the "remarks" field.
	Remarks string `json:"remarks,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExamAssesmentQuery when eager-loading is set.
	Edges                  ExamAssesmentEdges `json:"edges"`
	exam_attempt_assesment *int
	selectValues           sql.SelectValues
}

// ExamAssesmentEdges holds the relations/edges for other nodes in the graph.
type ExamAssesmentEdges struct {
	// Attempt holds the value of the attempt edge.
	Attempt *ExamAttempt `json:"attempt,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AttemptOrErr returns the Attempt value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExamAssesmentEdges) AttemptOrErr() (*ExamAttempt, error) {
	if e.Attempt != nil {
		return e.Attempt, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: examattempt.Label}
	}
	return nil, &NotLoadedError{edge: "attempt"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ExamAssesment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case examassesment.FieldRawAssesmentData, examassesment.FieldRawUserSubmission:
			values[i] = new([]byte)
		case examassesment.FieldAssessmentRating:
			values[i] = new(sql.NullFloat64)
		case examassesment.FieldID, examassesment.FieldCompletedSeconds:
			values[i] = new(sql.NullInt64)
		case examassesment.FieldStatus, examassesment.FieldRemarks:
			values[i] = new(sql.NullString)
		case examassesment.FieldCreatedAt, examassesment.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case examassesment.ForeignKeys[0]: // exam_attempt_assesment
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ExamAssesment fields.
func (ea *ExamAssesment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case examassesment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ea.ID = int(value.Int64)
		case examassesment.FieldCompletedSeconds:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field completed_seconds", values[i])
			} else if value.Valid {
				ea.CompletedSeconds = int(value.Int64)
			}
		case examassesment.FieldRawAssesmentData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field raw_assesment_data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ea.RawAssesmentData); err != nil {
					return fmt.Errorf("unmarshal field raw_assesment_data: %w", err)
				}
			}
		case examassesment.FieldRawUserSubmission:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field raw_user_submission", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ea.RawUserSubmission); err != nil {
					return fmt.Errorf("unmarshal field raw_user_submission: %w", err)
				}
			}
		case examassesment.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ea.Status = examassesment.Status(value.String)
			}
		case examassesment.FieldAssessmentRating:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field assessment_rating", values[i])
			} else if value.Valid {
				ea.AssessmentRating = value.Float64
			}
		case examassesment.FieldRemarks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remarks", values[i])
			} else if value.Valid {
				ea.Remarks = value.String
			}
		case examassesment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ea.CreatedAt = value.Time
			}
		case examassesment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ea.UpdatedAt = value.Time
			}
		case examassesment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field exam_attempt_assesment", value)
			} else if value.Valid {
				ea.exam_attempt_assesment = new(int)
				*ea.exam_attempt_assesment = int(value.Int64)
			}
		default:
			ea.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ExamAssesment.
// This includes values selected through modifiers, order, etc.
func (ea *ExamAssesment) Value(name string) (ent.Value, error) {
	return ea.selectValues.Get(name)
}

// QueryAttempt queries the "attempt" edge of the ExamAssesment entity.
func (ea *ExamAssesment) QueryAttempt() *ExamAttemptQuery {
	return NewExamAssesmentClient(ea.config).QueryAttempt(ea)
}

// Update returns a builder for updating this ExamAssesment.
// Note that you need to call ExamAssesment.Unwrap() before calling this method if this ExamAssesment
// was returned from a transaction, and the transaction was committed or rolled back.
func (ea *ExamAssesment) Update() *ExamAssesmentUpdateOne {
	return NewExamAssesmentClient(ea.config).UpdateOne(ea)
}

// Unwrap unwraps the ExamAssesment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ea *ExamAssesment) Unwrap() *ExamAssesment {
	_tx, ok := ea.config.driver.(*txDriver)
	if !ok {
		panic("ent: ExamAssesment is not a transactional entity")
	}
	ea.config.driver = _tx.drv
	return ea
}

// String implements the fmt.Stringer.
func (ea *ExamAssesment) String() string {
	var builder strings.Builder
	builder.WriteString("ExamAssesment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ea.ID))
	builder.WriteString("completed_seconds=")
	builder.WriteString(fmt.Sprintf("%v", ea.CompletedSeconds))
	builder.WriteString(", ")
	builder.WriteString("raw_assesment_data=")
	builder.WriteString(fmt.Sprintf("%v", ea.RawAssesmentData))
	builder.WriteString(", ")
	builder.WriteString("raw_user_submission=")
	builder.WriteString(fmt.Sprintf("%v", ea.RawUserSubmission))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ea.Status))
	builder.WriteString(", ")
	builder.WriteString("assessment_rating=")
	builder.WriteString(fmt.Sprintf("%v", ea.AssessmentRating))
	builder.WriteString(", ")
	builder.WriteString("remarks=")
	builder.WriteString(ea.Remarks)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ea.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ea.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ExamAssesments is a parsable slice of ExamAssesment.
type ExamAssesments []*ExamAssesment
