// Code generated by ent, DO NOT EDIT.

package ent

import (
	"common/ent/examresult"
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamResultCreate is the builder for creating a ExamResult entity.
type ExamResultCreate struct {
	config
	mutation *ExamResultMutation
	hooks    []Hook
}

// Mutation returns the ExamResultMutation object of the builder.
func (erc *ExamResultCreate) Mutation() *ExamResultMutation {
	return erc.mutation
}

// Save creates the ExamResult in the database.
func (erc *ExamResultCreate) Save(ctx context.Context) (*ExamResult, error) {
	return withHooks(ctx, erc.sqlSave, erc.mutation, erc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (erc *ExamResultCreate) SaveX(ctx context.Context) *ExamResult {
	v, err := erc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (erc *ExamResultCreate) Exec(ctx context.Context) error {
	_, err := erc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (erc *ExamResultCreate) ExecX(ctx context.Context) {
	if err := erc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (erc *ExamResultCreate) check() error {
	return nil
}

func (erc *ExamResultCreate) sqlSave(ctx context.Context) (*ExamResult, error) {
	if err := erc.check(); err != nil {
		return nil, err
	}
	_node, _spec := erc.createSpec()
	if err := sqlgraph.CreateNode(ctx, erc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	erc.mutation.id = &_node.ID
	erc.mutation.done = true
	return _node, nil
}

func (erc *ExamResultCreate) createSpec() (*ExamResult, *sqlgraph.CreateSpec) {
	var (
		_node = &ExamResult{config: erc.config}
		_spec = sqlgraph.NewCreateSpec(examresult.Table, sqlgraph.NewFieldSpec(examresult.FieldID, field.TypeInt))
	)
	return _node, _spec
}

// ExamResultCreateBulk is the builder for creating many ExamResult entities in bulk.
type ExamResultCreateBulk struct {
	config
	err      error
	builders []*ExamResultCreate
}

// Save creates the ExamResult entities in the database.
func (ercb *ExamResultCreateBulk) Save(ctx context.Context) ([]*ExamResult, error) {
	if ercb.err != nil {
		return nil, ercb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ercb.builders))
	nodes := make([]*ExamResult, len(ercb.builders))
	mutators := make([]Mutator, len(ercb.builders))
	for i := range ercb.builders {
		func(i int, root context.Context) {
			builder := ercb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExamResultMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ercb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ercb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ercb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ercb *ExamResultCreateBulk) SaveX(ctx context.Context) []*ExamResult {
	v, err := ercb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ercb *ExamResultCreateBulk) Exec(ctx context.Context) error {
	_, err := ercb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ercb *ExamResultCreateBulk) ExecX(ctx context.Context) {
	if err := ercb.Exec(ctx); err != nil {
		panic(err)
	}
}
