// Code generated by ent, DO NOT EDIT.

package examsetting

import (
	"common/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ExamSetting {
	return predicate.ExamSetting(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ExamSetting {
	return predicate.ExamSetting(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ExamSetting {
	return predicate.ExamSetting(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ExamSetting {
	return predicate.ExamSetting(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ExamSetting {
	return predicate.ExamSetting(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ExamSetting {
	return predicate.ExamSetting(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ExamSetting {
	return predicate.ExamSetting(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ExamSetting {
	return predicate.ExamSetting(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ExamSetting {
	return predicate.ExamSetting(sql.FieldLTE(FieldID, id))
}

// NumberOfQuestions applies equality check predicate on the "number_of_questions" field. It's identical to NumberOfQuestionsEQ.
func NumberOfQuestions(v int) predicate.ExamSetting {
	return predicate.ExamSetting(sql.FieldEQ(FieldNumberOfQuestions, v))
}

// DurationMinutes applies equality check predicate on the "duration_minutes" field. It's identical to DurationMinutesEQ.
func DurationMinutes(v time.Time) predicate.ExamSetting {
	return predicate.ExamSetting(sql.FieldEQ(FieldDurationMinutes, v))
}

// NegativeMarking applies equality check predicate on the "negative_marking" field. It's identical to NegativeMarkingEQ.
func NegativeMarking(v float64) predicate.ExamSetting {
	return predicate.ExamSetting(sql.FieldEQ(FieldNegativeMarking, v))
}

// NumberOfQuestionsEQ applies the EQ predicate on the "number_of_questions" field.
func NumberOfQuestionsEQ(v int) predicate.ExamSetting {
	return predicate.ExamSetting(sql.FieldEQ(FieldNumberOfQuestions, v))
}

// NumberOfQuestionsNEQ applies the NEQ predicate on the "number_of_questions" field.
func NumberOfQuestionsNEQ(v int) predicate.ExamSetting {
	return predicate.ExamSetting(sql.FieldNEQ(FieldNumberOfQuestions, v))
}

// NumberOfQuestionsIn applies the In predicate on the "number_of_questions" field.
func NumberOfQuestionsIn(vs ...int) predicate.ExamSetting {
	return predicate.ExamSetting(sql.FieldIn(FieldNumberOfQuestions, vs...))
}

// NumberOfQuestionsNotIn applies the NotIn predicate on the "number_of_questions" field.
func NumberOfQuestionsNotIn(vs ...int) predicate.ExamSetting {
	return predicate.ExamSetting(sql.FieldNotIn(FieldNumberOfQuestions, vs...))
}

// NumberOfQuestionsGT applies the GT predicate on the "number_of_questions" field.
func NumberOfQuestionsGT(v int) predicate.ExamSetting {
	return predicate.ExamSetting(sql.FieldGT(FieldNumberOfQuestions, v))
}

// NumberOfQuestionsGTE applies the GTE predicate on the "number_of_questions" field.
func NumberOfQuestionsGTE(v int) predicate.ExamSetting {
	return predicate.ExamSetting(sql.FieldGTE(FieldNumberOfQuestions, v))
}

// NumberOfQuestionsLT applies the LT predicate on the "number_of_questions" field.
func NumberOfQuestionsLT(v int) predicate.ExamSetting {
	return predicate.ExamSetting(sql.FieldLT(FieldNumberOfQuestions, v))
}

// NumberOfQuestionsLTE applies the LTE predicate on the "number_of_questions" field.
func NumberOfQuestionsLTE(v int) predicate.ExamSetting {
	return predicate.ExamSetting(sql.FieldLTE(FieldNumberOfQuestions, v))
}

// DurationMinutesEQ applies the EQ predicate on the "duration_minutes" field.
func DurationMinutesEQ(v time.Time) predicate.ExamSetting {
	return predicate.ExamSetting(sql.FieldEQ(FieldDurationMinutes, v))
}

// DurationMinutesNEQ applies the NEQ predicate on the "duration_minutes" field.
func DurationMinutesNEQ(v time.Time) predicate.ExamSetting {
	return predicate.ExamSetting(sql.FieldNEQ(FieldDurationMinutes, v))
}

// DurationMinutesIn applies the In predicate on the "duration_minutes" field.
func DurationMinutesIn(vs ...time.Time) predicate.ExamSetting {
	return predicate.ExamSetting(sql.FieldIn(FieldDurationMinutes, vs...))
}

// DurationMinutesNotIn applies the NotIn predicate on the "duration_minutes" field.
func DurationMinutesNotIn(vs ...time.Time) predicate.ExamSetting {
	return predicate.ExamSetting(sql.FieldNotIn(FieldDurationMinutes, vs...))
}

// DurationMinutesGT applies the GT predicate on the "duration_minutes" field.
func DurationMinutesGT(v time.Time) predicate.ExamSetting {
	return predicate.ExamSetting(sql.FieldGT(FieldDurationMinutes, v))
}

// DurationMinutesGTE applies the GTE predicate on the "duration_minutes" field.
func DurationMinutesGTE(v time.Time) predicate.ExamSetting {
	return predicate.ExamSetting(sql.FieldGTE(FieldDurationMinutes, v))
}

// DurationMinutesLT applies the LT predicate on the "duration_minutes" field.
func DurationMinutesLT(v time.Time) predicate.ExamSetting {
	return predicate.ExamSetting(sql.FieldLT(FieldDurationMinutes, v))
}

// DurationMinutesLTE applies the LTE predicate on the "duration_minutes" field.
func DurationMinutesLTE(v time.Time) predicate.ExamSetting {
	return predicate.ExamSetting(sql.FieldLTE(FieldDurationMinutes, v))
}

// NegativeMarkingEQ applies the EQ predicate on the "negative_marking" field.
func NegativeMarkingEQ(v float64) predicate.ExamSetting {
	return predicate.ExamSetting(sql.FieldEQ(FieldNegativeMarking, v))
}

// NegativeMarkingNEQ applies the NEQ predicate on the "negative_marking" field.
func NegativeMarkingNEQ(v float64) predicate.ExamSetting {
	return predicate.ExamSetting(sql.FieldNEQ(FieldNegativeMarking, v))
}

// NegativeMarkingIn applies the In predicate on the "negative_marking" field.
func NegativeMarkingIn(vs ...float64) predicate.ExamSetting {
	return predicate.ExamSetting(sql.FieldIn(FieldNegativeMarking, vs...))
}

// NegativeMarkingNotIn applies the NotIn predicate on the "negative_marking" field.
func NegativeMarkingNotIn(vs ...float64) predicate.ExamSetting {
	return predicate.ExamSetting(sql.FieldNotIn(FieldNegativeMarking, vs...))
}

// NegativeMarkingGT applies the GT predicate on the "negative_marking" field.
func NegativeMarkingGT(v float64) predicate.ExamSetting {
	return predicate.ExamSetting(sql.FieldGT(FieldNegativeMarking, v))
}

// NegativeMarkingGTE applies the GTE predicate on the "negative_marking" field.
func NegativeMarkingGTE(v float64) predicate.ExamSetting {
	return predicate.ExamSetting(sql.FieldGTE(FieldNegativeMarking, v))
}

// NegativeMarkingLT applies the LT predicate on the "negative_marking" field.
func NegativeMarkingLT(v float64) predicate.ExamSetting {
	return predicate.ExamSetting(sql.FieldLT(FieldNegativeMarking, v))
}

// NegativeMarkingLTE applies the LTE predicate on the "negative_marking" field.
func NegativeMarkingLTE(v float64) predicate.ExamSetting {
	return predicate.ExamSetting(sql.FieldLTE(FieldNegativeMarking, v))
}

// HasExam applies the HasEdge predicate on the "exam" edge.
func HasExam() predicate.ExamSetting {
	return predicate.ExamSetting(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ExamTable, ExamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamWith applies the HasEdge predicate on the "exam" edge with a given conditions (other predicates).
func HasExamWith(preds ...predicate.Exam) predicate.ExamSetting {
	return predicate.ExamSetting(func(s *sql.Selector) {
		step := newExamStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ExamSetting) predicate.ExamSetting {
	return predicate.ExamSetting(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ExamSetting) predicate.ExamSetting {
	return predicate.ExamSetting(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ExamSetting) predicate.ExamSetting {
	return predicate.ExamSetting(sql.NotPredicates(p))
}
