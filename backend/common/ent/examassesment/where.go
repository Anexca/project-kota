// Code generated by ent, DO NOT EDIT.

package examassesment

import (
	"common/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldLTE(FieldID, id))
}

// CompletedMinutes applies equality check predicate on the "completed_minutes" field. It's identical to CompletedMinutesEQ.
func CompletedMinutes(v int) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldEQ(FieldCompletedMinutes, v))
}

// IsReady applies equality check predicate on the "is_ready" field. It's identical to IsReadyEQ.
func IsReady(v bool) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldEQ(FieldIsReady, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldEQ(FieldUpdatedAt, v))
}

// CompletedMinutesEQ applies the EQ predicate on the "completed_minutes" field.
func CompletedMinutesEQ(v int) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldEQ(FieldCompletedMinutes, v))
}

// CompletedMinutesNEQ applies the NEQ predicate on the "completed_minutes" field.
func CompletedMinutesNEQ(v int) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldNEQ(FieldCompletedMinutes, v))
}

// CompletedMinutesIn applies the In predicate on the "completed_minutes" field.
func CompletedMinutesIn(vs ...int) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldIn(FieldCompletedMinutes, vs...))
}

// CompletedMinutesNotIn applies the NotIn predicate on the "completed_minutes" field.
func CompletedMinutesNotIn(vs ...int) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldNotIn(FieldCompletedMinutes, vs...))
}

// CompletedMinutesGT applies the GT predicate on the "completed_minutes" field.
func CompletedMinutesGT(v int) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldGT(FieldCompletedMinutes, v))
}

// CompletedMinutesGTE applies the GTE predicate on the "completed_minutes" field.
func CompletedMinutesGTE(v int) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldGTE(FieldCompletedMinutes, v))
}

// CompletedMinutesLT applies the LT predicate on the "completed_minutes" field.
func CompletedMinutesLT(v int) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldLT(FieldCompletedMinutes, v))
}

// CompletedMinutesLTE applies the LTE predicate on the "completed_minutes" field.
func CompletedMinutesLTE(v int) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldLTE(FieldCompletedMinutes, v))
}

// RawAssesmentDataIsNil applies the IsNil predicate on the "raw_assesment_data" field.
func RawAssesmentDataIsNil() predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldIsNull(FieldRawAssesmentData))
}

// RawAssesmentDataNotNil applies the NotNil predicate on the "raw_assesment_data" field.
func RawAssesmentDataNotNil() predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldNotNull(FieldRawAssesmentData))
}

// IsReadyEQ applies the EQ predicate on the "is_ready" field.
func IsReadyEQ(v bool) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldEQ(FieldIsReady, v))
}

// IsReadyNEQ applies the NEQ predicate on the "is_ready" field.
func IsReadyNEQ(v bool) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldNEQ(FieldIsReady, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasAttempt applies the HasEdge predicate on the "attempt" edge.
func HasAttempt() predicate.ExamAssesment {
	return predicate.ExamAssesment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, AttemptTable, AttemptColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAttemptWith applies the HasEdge predicate on the "attempt" edge with a given conditions (other predicates).
func HasAttemptWith(preds ...predicate.ExamAttempt) predicate.ExamAssesment {
	return predicate.ExamAssesment(func(s *sql.Selector) {
		step := newAttemptStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ExamAssesment) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ExamAssesment) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ExamAssesment) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.NotPredicates(p))
}
