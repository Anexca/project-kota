// Code generated by ent, DO NOT EDIT.

package examassesment

import (
	"common/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldLTE(FieldID, id))
}

// CompletedSeconds applies equality check predicate on the "completed_seconds" field. It's identical to CompletedSecondsEQ.
func CompletedSeconds(v int) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldEQ(FieldCompletedSeconds, v))
}

// ObtainedMarks applies equality check predicate on the "obtained_marks" field. It's identical to ObtainedMarksEQ.
func ObtainedMarks(v float64) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldEQ(FieldObtainedMarks, v))
}

// Remarks applies equality check predicate on the "remarks" field. It's identical to RemarksEQ.
func Remarks(v string) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldEQ(FieldRemarks, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldEQ(FieldUpdatedAt, v))
}

// CompletedSecondsEQ applies the EQ predicate on the "completed_seconds" field.
func CompletedSecondsEQ(v int) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldEQ(FieldCompletedSeconds, v))
}

// CompletedSecondsNEQ applies the NEQ predicate on the "completed_seconds" field.
func CompletedSecondsNEQ(v int) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldNEQ(FieldCompletedSeconds, v))
}

// CompletedSecondsIn applies the In predicate on the "completed_seconds" field.
func CompletedSecondsIn(vs ...int) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldIn(FieldCompletedSeconds, vs...))
}

// CompletedSecondsNotIn applies the NotIn predicate on the "completed_seconds" field.
func CompletedSecondsNotIn(vs ...int) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldNotIn(FieldCompletedSeconds, vs...))
}

// CompletedSecondsGT applies the GT predicate on the "completed_seconds" field.
func CompletedSecondsGT(v int) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldGT(FieldCompletedSeconds, v))
}

// CompletedSecondsGTE applies the GTE predicate on the "completed_seconds" field.
func CompletedSecondsGTE(v int) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldGTE(FieldCompletedSeconds, v))
}

// CompletedSecondsLT applies the LT predicate on the "completed_seconds" field.
func CompletedSecondsLT(v int) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldLT(FieldCompletedSeconds, v))
}

// CompletedSecondsLTE applies the LTE predicate on the "completed_seconds" field.
func CompletedSecondsLTE(v int) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldLTE(FieldCompletedSeconds, v))
}

// RawAssesmentDataIsNil applies the IsNil predicate on the "raw_assesment_data" field.
func RawAssesmentDataIsNil() predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldIsNull(FieldRawAssesmentData))
}

// RawAssesmentDataNotNil applies the NotNil predicate on the "raw_assesment_data" field.
func RawAssesmentDataNotNil() predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldNotNull(FieldRawAssesmentData))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldNotIn(FieldStatus, vs...))
}

// ObtainedMarksEQ applies the EQ predicate on the "obtained_marks" field.
func ObtainedMarksEQ(v float64) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldEQ(FieldObtainedMarks, v))
}

// ObtainedMarksNEQ applies the NEQ predicate on the "obtained_marks" field.
func ObtainedMarksNEQ(v float64) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldNEQ(FieldObtainedMarks, v))
}

// ObtainedMarksIn applies the In predicate on the "obtained_marks" field.
func ObtainedMarksIn(vs ...float64) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldIn(FieldObtainedMarks, vs...))
}

// ObtainedMarksNotIn applies the NotIn predicate on the "obtained_marks" field.
func ObtainedMarksNotIn(vs ...float64) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldNotIn(FieldObtainedMarks, vs...))
}

// ObtainedMarksGT applies the GT predicate on the "obtained_marks" field.
func ObtainedMarksGT(v float64) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldGT(FieldObtainedMarks, v))
}

// ObtainedMarksGTE applies the GTE predicate on the "obtained_marks" field.
func ObtainedMarksGTE(v float64) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldGTE(FieldObtainedMarks, v))
}

// ObtainedMarksLT applies the LT predicate on the "obtained_marks" field.
func ObtainedMarksLT(v float64) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldLT(FieldObtainedMarks, v))
}

// ObtainedMarksLTE applies the LTE predicate on the "obtained_marks" field.
func ObtainedMarksLTE(v float64) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldLTE(FieldObtainedMarks, v))
}

// ObtainedMarksIsNil applies the IsNil predicate on the "obtained_marks" field.
func ObtainedMarksIsNil() predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldIsNull(FieldObtainedMarks))
}

// ObtainedMarksNotNil applies the NotNil predicate on the "obtained_marks" field.
func ObtainedMarksNotNil() predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldNotNull(FieldObtainedMarks))
}

// RemarksEQ applies the EQ predicate on the "remarks" field.
func RemarksEQ(v string) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldEQ(FieldRemarks, v))
}

// RemarksNEQ applies the NEQ predicate on the "remarks" field.
func RemarksNEQ(v string) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldNEQ(FieldRemarks, v))
}

// RemarksIn applies the In predicate on the "remarks" field.
func RemarksIn(vs ...string) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldIn(FieldRemarks, vs...))
}

// RemarksNotIn applies the NotIn predicate on the "remarks" field.
func RemarksNotIn(vs ...string) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldNotIn(FieldRemarks, vs...))
}

// RemarksGT applies the GT predicate on the "remarks" field.
func RemarksGT(v string) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldGT(FieldRemarks, v))
}

// RemarksGTE applies the GTE predicate on the "remarks" field.
func RemarksGTE(v string) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldGTE(FieldRemarks, v))
}

// RemarksLT applies the LT predicate on the "remarks" field.
func RemarksLT(v string) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldLT(FieldRemarks, v))
}

// RemarksLTE applies the LTE predicate on the "remarks" field.
func RemarksLTE(v string) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldLTE(FieldRemarks, v))
}

// RemarksContains applies the Contains predicate on the "remarks" field.
func RemarksContains(v string) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldContains(FieldRemarks, v))
}

// RemarksHasPrefix applies the HasPrefix predicate on the "remarks" field.
func RemarksHasPrefix(v string) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldHasPrefix(FieldRemarks, v))
}

// RemarksHasSuffix applies the HasSuffix predicate on the "remarks" field.
func RemarksHasSuffix(v string) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldHasSuffix(FieldRemarks, v))
}

// RemarksIsNil applies the IsNil predicate on the "remarks" field.
func RemarksIsNil() predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldIsNull(FieldRemarks))
}

// RemarksNotNil applies the NotNil predicate on the "remarks" field.
func RemarksNotNil() predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldNotNull(FieldRemarks))
}

// RemarksEqualFold applies the EqualFold predicate on the "remarks" field.
func RemarksEqualFold(v string) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldEqualFold(FieldRemarks, v))
}

// RemarksContainsFold applies the ContainsFold predicate on the "remarks" field.
func RemarksContainsFold(v string) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldContainsFold(FieldRemarks, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasAttempt applies the HasEdge predicate on the "attempt" edge.
func HasAttempt() predicate.ExamAssesment {
	return predicate.ExamAssesment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, AttemptTable, AttemptColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAttemptWith applies the HasEdge predicate on the "attempt" edge with a given conditions (other predicates).
func HasAttemptWith(preds ...predicate.ExamAttempt) predicate.ExamAssesment {
	return predicate.ExamAssesment(func(s *sql.Selector) {
		step := newAttemptStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ExamAssesment) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ExamAssesment) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ExamAssesment) predicate.ExamAssesment {
	return predicate.ExamAssesment(sql.NotPredicates(p))
}
