// Code generated by ent, DO NOT EDIT.

package usersubscription

import (
	"common/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldLTE(FieldID, id))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldEQ(FieldStartDate, v))
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldEQ(FieldEndDate, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldEQ(FieldIsActive, v))
}

// ProviderOrderID applies equality check predicate on the "provider_order_id" field. It's identical to ProviderOrderIDEQ.
func ProviderOrderID(v string) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldEQ(FieldProviderOrderID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldEQ(FieldUpdatedAt, v))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldLTE(FieldStartDate, v))
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldEQ(FieldEndDate, v))
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNEQ(FieldEndDate, v))
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldIn(FieldEndDate, vs...))
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNotIn(FieldEndDate, vs...))
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldGT(FieldEndDate, v))
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldGTE(FieldEndDate, v))
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldLT(FieldEndDate, v))
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldLTE(FieldEndDate, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNEQ(FieldIsActive, v))
}

// ProviderOrderIDEQ applies the EQ predicate on the "provider_order_id" field.
func ProviderOrderIDEQ(v string) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldEQ(FieldProviderOrderID, v))
}

// ProviderOrderIDNEQ applies the NEQ predicate on the "provider_order_id" field.
func ProviderOrderIDNEQ(v string) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNEQ(FieldProviderOrderID, v))
}

// ProviderOrderIDIn applies the In predicate on the "provider_order_id" field.
func ProviderOrderIDIn(vs ...string) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldIn(FieldProviderOrderID, vs...))
}

// ProviderOrderIDNotIn applies the NotIn predicate on the "provider_order_id" field.
func ProviderOrderIDNotIn(vs ...string) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNotIn(FieldProviderOrderID, vs...))
}

// ProviderOrderIDGT applies the GT predicate on the "provider_order_id" field.
func ProviderOrderIDGT(v string) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldGT(FieldProviderOrderID, v))
}

// ProviderOrderIDGTE applies the GTE predicate on the "provider_order_id" field.
func ProviderOrderIDGTE(v string) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldGTE(FieldProviderOrderID, v))
}

// ProviderOrderIDLT applies the LT predicate on the "provider_order_id" field.
func ProviderOrderIDLT(v string) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldLT(FieldProviderOrderID, v))
}

// ProviderOrderIDLTE applies the LTE predicate on the "provider_order_id" field.
func ProviderOrderIDLTE(v string) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldLTE(FieldProviderOrderID, v))
}

// ProviderOrderIDContains applies the Contains predicate on the "provider_order_id" field.
func ProviderOrderIDContains(v string) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldContains(FieldProviderOrderID, v))
}

// ProviderOrderIDHasPrefix applies the HasPrefix predicate on the "provider_order_id" field.
func ProviderOrderIDHasPrefix(v string) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldHasPrefix(FieldProviderOrderID, v))
}

// ProviderOrderIDHasSuffix applies the HasSuffix predicate on the "provider_order_id" field.
func ProviderOrderIDHasSuffix(v string) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldHasSuffix(FieldProviderOrderID, v))
}

// ProviderOrderIDEqualFold applies the EqualFold predicate on the "provider_order_id" field.
func ProviderOrderIDEqualFold(v string) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldEqualFold(FieldProviderOrderID, v))
}

// ProviderOrderIDContainsFold applies the ContainsFold predicate on the "provider_order_id" field.
func ProviderOrderIDContainsFold(v string) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldContainsFold(FieldProviderOrderID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UserSubscription {
	return predicate.UserSubscription(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserSubscription {
	return predicate.UserSubscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserSubscription {
	return predicate.UserSubscription(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubscription applies the HasEdge predicate on the "subscription" edge.
func HasSubscription() predicate.UserSubscription {
	return predicate.UserSubscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SubscriptionTable, SubscriptionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscriptionWith applies the HasEdge predicate on the "subscription" edge with a given conditions (other predicates).
func HasSubscriptionWith(preds ...predicate.Subscription) predicate.UserSubscription {
	return predicate.UserSubscription(func(s *sql.Selector) {
		step := newSubscriptionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPayments applies the HasEdge predicate on the "payments" edge.
func HasPayments() predicate.UserSubscription {
	return predicate.UserSubscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PaymentsTable, PaymentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPaymentsWith applies the HasEdge predicate on the "payments" edge with a given conditions (other predicates).
func HasPaymentsWith(preds ...predicate.Payment) predicate.UserSubscription {
	return predicate.UserSubscription(func(s *sql.Selector) {
		step := newPaymentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserSubscription) predicate.UserSubscription {
	return predicate.UserSubscription(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserSubscription) predicate.UserSubscription {
	return predicate.UserSubscription(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserSubscription) predicate.UserSubscription {
	return predicate.UserSubscription(sql.NotPredicates(p))
}
