// Code generated by ent, DO NOT EDIT.

package ent

import (
	"common/ent/exam"
	"common/ent/examsetting"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ExamSetting is the model entity for the ExamSetting schema.
type ExamSetting struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// NumberOfQuestions holds the value of the "number_of_questions" field.
	NumberOfQuestions int `json:"number_of_questions,omitempty"`
	// DurationMinutes holds the value of the "duration_minutes" field.
	DurationMinutes time.Time `json:"duration_minutes,omitempty"`
	// NegativeMarking holds the value of the "negative_marking" field.
	NegativeMarking float64 `json:"negative_marking,omitempty"`
	// OtherDetails holds the value of the "other_details" field.
	OtherDetails map[string]interface{} `json:"other_details,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExamSettingQuery when eager-loading is set.
	Edges         ExamSettingEdges `json:"edges"`
	exam_settings *int
	selectValues  sql.SelectValues
}

// ExamSettingEdges holds the relations/edges for other nodes in the graph.
type ExamSettingEdges struct {
	// Exam holds the value of the exam edge.
	Exam *Exam `json:"exam,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ExamOrErr returns the Exam value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExamSettingEdges) ExamOrErr() (*Exam, error) {
	if e.Exam != nil {
		return e.Exam, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: exam.Label}
	}
	return nil, &NotLoadedError{edge: "exam"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ExamSetting) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case examsetting.FieldOtherDetails:
			values[i] = new([]byte)
		case examsetting.FieldNegativeMarking:
			values[i] = new(sql.NullFloat64)
		case examsetting.FieldID, examsetting.FieldNumberOfQuestions:
			values[i] = new(sql.NullInt64)
		case examsetting.FieldDurationMinutes:
			values[i] = new(sql.NullTime)
		case examsetting.ForeignKeys[0]: // exam_settings
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ExamSetting fields.
func (es *ExamSetting) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case examsetting.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			es.ID = int(value.Int64)
		case examsetting.FieldNumberOfQuestions:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number_of_questions", values[i])
			} else if value.Valid {
				es.NumberOfQuestions = int(value.Int64)
			}
		case examsetting.FieldDurationMinutes:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field duration_minutes", values[i])
			} else if value.Valid {
				es.DurationMinutes = value.Time
			}
		case examsetting.FieldNegativeMarking:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field negative_marking", values[i])
			} else if value.Valid {
				es.NegativeMarking = value.Float64
			}
		case examsetting.FieldOtherDetails:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field other_details", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &es.OtherDetails); err != nil {
					return fmt.Errorf("unmarshal field other_details: %w", err)
				}
			}
		case examsetting.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field exam_settings", value)
			} else if value.Valid {
				es.exam_settings = new(int)
				*es.exam_settings = int(value.Int64)
			}
		default:
			es.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ExamSetting.
// This includes values selected through modifiers, order, etc.
func (es *ExamSetting) Value(name string) (ent.Value, error) {
	return es.selectValues.Get(name)
}

// QueryExam queries the "exam" edge of the ExamSetting entity.
func (es *ExamSetting) QueryExam() *ExamQuery {
	return NewExamSettingClient(es.config).QueryExam(es)
}

// Update returns a builder for updating this ExamSetting.
// Note that you need to call ExamSetting.Unwrap() before calling this method if this ExamSetting
// was returned from a transaction, and the transaction was committed or rolled back.
func (es *ExamSetting) Update() *ExamSettingUpdateOne {
	return NewExamSettingClient(es.config).UpdateOne(es)
}

// Unwrap unwraps the ExamSetting entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (es *ExamSetting) Unwrap() *ExamSetting {
	_tx, ok := es.config.driver.(*txDriver)
	if !ok {
		panic("ent: ExamSetting is not a transactional entity")
	}
	es.config.driver = _tx.drv
	return es
}

// String implements the fmt.Stringer.
func (es *ExamSetting) String() string {
	var builder strings.Builder
	builder.WriteString("ExamSetting(")
	builder.WriteString(fmt.Sprintf("id=%v, ", es.ID))
	builder.WriteString("number_of_questions=")
	builder.WriteString(fmt.Sprintf("%v", es.NumberOfQuestions))
	builder.WriteString(", ")
	builder.WriteString("duration_minutes=")
	builder.WriteString(es.DurationMinutes.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("negative_marking=")
	builder.WriteString(fmt.Sprintf("%v", es.NegativeMarking))
	builder.WriteString(", ")
	builder.WriteString("other_details=")
	builder.WriteString(fmt.Sprintf("%v", es.OtherDetails))
	builder.WriteByte(')')
	return builder.String()
}

// ExamSettings is a parsable slice of ExamSetting.
type ExamSettings []*ExamSetting
