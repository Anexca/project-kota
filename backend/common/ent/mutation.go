// Code generated by ent, DO NOT EDIT.

package ent

import (
	"common/ent/cachedexam"
	"common/ent/exam"
	"common/ent/examassesment"
	"common/ent/examattempt"
	"common/ent/examcategory"
	"common/ent/examgroup"
	"common/ent/examsetting"
	"common/ent/generatedexam"
	"common/ent/payment"
	"common/ent/predicate"
	"common/ent/subscription"
	"common/ent/subscriptionexam"
	"common/ent/user"
	"common/ent/usersubscription"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCachedExam       = "CachedExam"
	TypeExam             = "Exam"
	TypeExamAssesment    = "ExamAssesment"
	TypeExamAttempt      = "ExamAttempt"
	TypeExamCategory     = "ExamCategory"
	TypeExamGroup        = "ExamGroup"
	TypeExamSetting      = "ExamSetting"
	TypeGeneratedExam    = "GeneratedExam"
	TypePayment          = "Payment"
	TypeSubscription     = "Subscription"
	TypeSubscriptionExam = "SubscriptionExam"
	TypeUser             = "User"
	TypeUserSubscription = "UserSubscription"
)

// CachedExamMutation represents an operation that mutates the CachedExam nodes in the graph.
type CachedExamMutation struct {
	config
	op            Op
	typ           string
	id            *int
	cache_uid     *string
	is_used       *bool
	expires_at    *time.Time
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	exam          *int
	clearedexam   bool
	done          bool
	oldValue      func(context.Context) (*CachedExam, error)
	predicates    []predicate.CachedExam
}

var _ ent.Mutation = (*CachedExamMutation)(nil)

// cachedexamOption allows management of the mutation configuration using functional options.
type cachedexamOption func(*CachedExamMutation)

// newCachedExamMutation creates new mutation for the CachedExam entity.
func newCachedExamMutation(c config, op Op, opts ...cachedexamOption) *CachedExamMutation {
	m := &CachedExamMutation{
		config:        c,
		op:            op,
		typ:           TypeCachedExam,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCachedExamID sets the ID field of the mutation.
func withCachedExamID(id int) cachedexamOption {
	return func(m *CachedExamMutation) {
		var (
			err   error
			once  sync.Once
			value *CachedExam
		)
		m.oldValue = func(ctx context.Context) (*CachedExam, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CachedExam.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCachedExam sets the old CachedExam of the mutation.
func withCachedExam(node *CachedExam) cachedexamOption {
	return func(m *CachedExamMutation) {
		m.oldValue = func(context.Context) (*CachedExam, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CachedExamMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CachedExamMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CachedExamMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CachedExamMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CachedExam.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCacheUID sets the "cache_uid" field.
func (m *CachedExamMutation) SetCacheUID(s string) {
	m.cache_uid = &s
}

// CacheUID returns the value of the "cache_uid" field in the mutation.
func (m *CachedExamMutation) CacheUID() (r string, exists bool) {
	v := m.cache_uid
	if v == nil {
		return
	}
	return *v, true
}

// OldCacheUID returns the old "cache_uid" field's value of the CachedExam entity.
// If the CachedExam object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CachedExamMutation) OldCacheUID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCacheUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCacheUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCacheUID: %w", err)
	}
	return oldValue.CacheUID, nil
}

// ResetCacheUID resets all changes to the "cache_uid" field.
func (m *CachedExamMutation) ResetCacheUID() {
	m.cache_uid = nil
}

// SetIsUsed sets the "is_used" field.
func (m *CachedExamMutation) SetIsUsed(b bool) {
	m.is_used = &b
}

// IsUsed returns the value of the "is_used" field in the mutation.
func (m *CachedExamMutation) IsUsed() (r bool, exists bool) {
	v := m.is_used
	if v == nil {
		return
	}
	return *v, true
}

// OldIsUsed returns the old "is_used" field's value of the CachedExam entity.
// If the CachedExam object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CachedExamMutation) OldIsUsed(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsUsed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsUsed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsUsed: %w", err)
	}
	return oldValue.IsUsed, nil
}

// ResetIsUsed resets all changes to the "is_used" field.
func (m *CachedExamMutation) ResetIsUsed() {
	m.is_used = nil
}

// SetExpiresAt sets the "expires_at" field.
func (m *CachedExamMutation) SetExpiresAt(t time.Time) {
	m.expires_at = &t
}

// ExpiresAt returns the value of the "expires_at" field in the mutation.
func (m *CachedExamMutation) ExpiresAt() (r time.Time, exists bool) {
	v := m.expires_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiresAt returns the old "expires_at" field's value of the CachedExam entity.
// If the CachedExam object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CachedExamMutation) OldExpiresAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiresAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiresAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiresAt: %w", err)
	}
	return oldValue.ExpiresAt, nil
}

// ResetExpiresAt resets all changes to the "expires_at" field.
func (m *CachedExamMutation) ResetExpiresAt() {
	m.expires_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CachedExamMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CachedExamMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CachedExam entity.
// If the CachedExam object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CachedExamMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CachedExamMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CachedExamMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CachedExamMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CachedExam entity.
// If the CachedExam object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CachedExamMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CachedExamMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetExamID sets the "exam" edge to the Exam entity by id.
func (m *CachedExamMutation) SetExamID(id int) {
	m.exam = &id
}

// ClearExam clears the "exam" edge to the Exam entity.
func (m *CachedExamMutation) ClearExam() {
	m.clearedexam = true
}

// ExamCleared reports if the "exam" edge to the Exam entity was cleared.
func (m *CachedExamMutation) ExamCleared() bool {
	return m.clearedexam
}

// ExamID returns the "exam" edge ID in the mutation.
func (m *CachedExamMutation) ExamID() (id int, exists bool) {
	if m.exam != nil {
		return *m.exam, true
	}
	return
}

// ExamIDs returns the "exam" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ExamID instead. It exists only for internal usage by the builders.
func (m *CachedExamMutation) ExamIDs() (ids []int) {
	if id := m.exam; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetExam resets all changes to the "exam" edge.
func (m *CachedExamMutation) ResetExam() {
	m.exam = nil
	m.clearedexam = false
}

// Where appends a list predicates to the CachedExamMutation builder.
func (m *CachedExamMutation) Where(ps ...predicate.CachedExam) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CachedExamMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CachedExamMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CachedExam, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CachedExamMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CachedExamMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CachedExam).
func (m *CachedExamMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CachedExamMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.cache_uid != nil {
		fields = append(fields, cachedexam.FieldCacheUID)
	}
	if m.is_used != nil {
		fields = append(fields, cachedexam.FieldIsUsed)
	}
	if m.expires_at != nil {
		fields = append(fields, cachedexam.FieldExpiresAt)
	}
	if m.created_at != nil {
		fields = append(fields, cachedexam.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, cachedexam.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CachedExamMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case cachedexam.FieldCacheUID:
		return m.CacheUID()
	case cachedexam.FieldIsUsed:
		return m.IsUsed()
	case cachedexam.FieldExpiresAt:
		return m.ExpiresAt()
	case cachedexam.FieldCreatedAt:
		return m.CreatedAt()
	case cachedexam.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CachedExamMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case cachedexam.FieldCacheUID:
		return m.OldCacheUID(ctx)
	case cachedexam.FieldIsUsed:
		return m.OldIsUsed(ctx)
	case cachedexam.FieldExpiresAt:
		return m.OldExpiresAt(ctx)
	case cachedexam.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case cachedexam.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown CachedExam field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CachedExamMutation) SetField(name string, value ent.Value) error {
	switch name {
	case cachedexam.FieldCacheUID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCacheUID(v)
		return nil
	case cachedexam.FieldIsUsed:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsUsed(v)
		return nil
	case cachedexam.FieldExpiresAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiresAt(v)
		return nil
	case cachedexam.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case cachedexam.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown CachedExam field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CachedExamMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CachedExamMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CachedExamMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CachedExam numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CachedExamMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CachedExamMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CachedExamMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CachedExam nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CachedExamMutation) ResetField(name string) error {
	switch name {
	case cachedexam.FieldCacheUID:
		m.ResetCacheUID()
		return nil
	case cachedexam.FieldIsUsed:
		m.ResetIsUsed()
		return nil
	case cachedexam.FieldExpiresAt:
		m.ResetExpiresAt()
		return nil
	case cachedexam.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case cachedexam.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown CachedExam field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CachedExamMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.exam != nil {
		edges = append(edges, cachedexam.EdgeExam)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CachedExamMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case cachedexam.EdgeExam:
		if id := m.exam; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CachedExamMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CachedExamMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CachedExamMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedexam {
		edges = append(edges, cachedexam.EdgeExam)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CachedExamMutation) EdgeCleared(name string) bool {
	switch name {
	case cachedexam.EdgeExam:
		return m.clearedexam
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CachedExamMutation) ClearEdge(name string) error {
	switch name {
	case cachedexam.EdgeExam:
		m.ClearExam()
		return nil
	}
	return fmt.Errorf("unknown CachedExam unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CachedExamMutation) ResetEdge(name string) error {
	switch name {
	case cachedexam.EdgeExam:
		m.ResetExam()
		return nil
	}
	return fmt.Errorf("unknown CachedExam edge %s", name)
}

// ExamMutation represents an operation that mutates the Exam nodes in the graph.
type ExamMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	name                  *string
	description           *string
	_type                 *exam.Type
	is_active             *bool
	logo_url              *string
	created_at            *time.Time
	updated_at            *time.Time
	clearedFields         map[string]struct{}
	category              *int
	clearedcategory       bool
	subscriptions         map[int]struct{}
	removedsubscriptions  map[int]struct{}
	clearedsubscriptions  bool
	setting               *int
	clearedsetting        bool
	cached_exam           map[int]struct{}
	removedcached_exam    map[int]struct{}
	clearedcached_exam    bool
	generatedexams        map[int]struct{}
	removedgeneratedexams map[int]struct{}
	clearedgeneratedexams bool
	done                  bool
	oldValue              func(context.Context) (*Exam, error)
	predicates            []predicate.Exam
}

var _ ent.Mutation = (*ExamMutation)(nil)

// examOption allows management of the mutation configuration using functional options.
type examOption func(*ExamMutation)

// newExamMutation creates new mutation for the Exam entity.
func newExamMutation(c config, op Op, opts ...examOption) *ExamMutation {
	m := &ExamMutation{
		config:        c,
		op:            op,
		typ:           TypeExam,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExamID sets the ID field of the mutation.
func withExamID(id int) examOption {
	return func(m *ExamMutation) {
		var (
			err   error
			once  sync.Once
			value *Exam
		)
		m.oldValue = func(ctx context.Context) (*Exam, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Exam.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withExam sets the old Exam of the mutation.
func withExam(node *Exam) examOption {
	return func(m *ExamMutation) {
		m.oldValue = func(context.Context) (*Exam, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExamMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExamMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ExamMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ExamMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Exam.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ExamMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ExamMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Exam entity.
// If the Exam object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ExamMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *ExamMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ExamMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Exam entity.
// If the Exam object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ExamMutation) ResetDescription() {
	m.description = nil
}

// SetType sets the "type" field.
func (m *ExamMutation) SetType(e exam.Type) {
	m._type = &e
}

// GetType returns the value of the "type" field in the mutation.
func (m *ExamMutation) GetType() (r exam.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Exam entity.
// If the Exam object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamMutation) OldType(ctx context.Context) (v exam.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *ExamMutation) ResetType() {
	m._type = nil
}

// SetIsActive sets the "is_active" field.
func (m *ExamMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *ExamMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the Exam entity.
// If the Exam object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *ExamMutation) ResetIsActive() {
	m.is_active = nil
}

// SetLogoURL sets the "logo_url" field.
func (m *ExamMutation) SetLogoURL(s string) {
	m.logo_url = &s
}

// LogoURL returns the value of the "logo_url" field in the mutation.
func (m *ExamMutation) LogoURL() (r string, exists bool) {
	v := m.logo_url
	if v == nil {
		return
	}
	return *v, true
}

// OldLogoURL returns the old "logo_url" field's value of the Exam entity.
// If the Exam object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamMutation) OldLogoURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogoURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogoURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogoURL: %w", err)
	}
	return oldValue.LogoURL, nil
}

// ClearLogoURL clears the value of the "logo_url" field.
func (m *ExamMutation) ClearLogoURL() {
	m.logo_url = nil
	m.clearedFields[exam.FieldLogoURL] = struct{}{}
}

// LogoURLCleared returns if the "logo_url" field was cleared in this mutation.
func (m *ExamMutation) LogoURLCleared() bool {
	_, ok := m.clearedFields[exam.FieldLogoURL]
	return ok
}

// ResetLogoURL resets all changes to the "logo_url" field.
func (m *ExamMutation) ResetLogoURL() {
	m.logo_url = nil
	delete(m.clearedFields, exam.FieldLogoURL)
}

// SetCreatedAt sets the "created_at" field.
func (m *ExamMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ExamMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Exam entity.
// If the Exam object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ExamMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ExamMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ExamMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Exam entity.
// If the Exam object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ExamMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCategoryID sets the "category" edge to the ExamCategory entity by id.
func (m *ExamMutation) SetCategoryID(id int) {
	m.category = &id
}

// ClearCategory clears the "category" edge to the ExamCategory entity.
func (m *ExamMutation) ClearCategory() {
	m.clearedcategory = true
}

// CategoryCleared reports if the "category" edge to the ExamCategory entity was cleared.
func (m *ExamMutation) CategoryCleared() bool {
	return m.clearedcategory
}

// CategoryID returns the "category" edge ID in the mutation.
func (m *ExamMutation) CategoryID() (id int, exists bool) {
	if m.category != nil {
		return *m.category, true
	}
	return
}

// CategoryIDs returns the "category" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CategoryID instead. It exists only for internal usage by the builders.
func (m *ExamMutation) CategoryIDs() (ids []int) {
	if id := m.category; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCategory resets all changes to the "category" edge.
func (m *ExamMutation) ResetCategory() {
	m.category = nil
	m.clearedcategory = false
}

// AddSubscriptionIDs adds the "subscriptions" edge to the SubscriptionExam entity by ids.
func (m *ExamMutation) AddSubscriptionIDs(ids ...int) {
	if m.subscriptions == nil {
		m.subscriptions = make(map[int]struct{})
	}
	for i := range ids {
		m.subscriptions[ids[i]] = struct{}{}
	}
}

// ClearSubscriptions clears the "subscriptions" edge to the SubscriptionExam entity.
func (m *ExamMutation) ClearSubscriptions() {
	m.clearedsubscriptions = true
}

// SubscriptionsCleared reports if the "subscriptions" edge to the SubscriptionExam entity was cleared.
func (m *ExamMutation) SubscriptionsCleared() bool {
	return m.clearedsubscriptions
}

// RemoveSubscriptionIDs removes the "subscriptions" edge to the SubscriptionExam entity by IDs.
func (m *ExamMutation) RemoveSubscriptionIDs(ids ...int) {
	if m.removedsubscriptions == nil {
		m.removedsubscriptions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.subscriptions, ids[i])
		m.removedsubscriptions[ids[i]] = struct{}{}
	}
}

// RemovedSubscriptions returns the removed IDs of the "subscriptions" edge to the SubscriptionExam entity.
func (m *ExamMutation) RemovedSubscriptionsIDs() (ids []int) {
	for id := range m.removedsubscriptions {
		ids = append(ids, id)
	}
	return
}

// SubscriptionsIDs returns the "subscriptions" edge IDs in the mutation.
func (m *ExamMutation) SubscriptionsIDs() (ids []int) {
	for id := range m.subscriptions {
		ids = append(ids, id)
	}
	return
}

// ResetSubscriptions resets all changes to the "subscriptions" edge.
func (m *ExamMutation) ResetSubscriptions() {
	m.subscriptions = nil
	m.clearedsubscriptions = false
	m.removedsubscriptions = nil
}

// SetSettingID sets the "setting" edge to the ExamSetting entity by id.
func (m *ExamMutation) SetSettingID(id int) {
	m.setting = &id
}

// ClearSetting clears the "setting" edge to the ExamSetting entity.
func (m *ExamMutation) ClearSetting() {
	m.clearedsetting = true
}

// SettingCleared reports if the "setting" edge to the ExamSetting entity was cleared.
func (m *ExamMutation) SettingCleared() bool {
	return m.clearedsetting
}

// SettingID returns the "setting" edge ID in the mutation.
func (m *ExamMutation) SettingID() (id int, exists bool) {
	if m.setting != nil {
		return *m.setting, true
	}
	return
}

// SettingIDs returns the "setting" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SettingID instead. It exists only for internal usage by the builders.
func (m *ExamMutation) SettingIDs() (ids []int) {
	if id := m.setting; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSetting resets all changes to the "setting" edge.
func (m *ExamMutation) ResetSetting() {
	m.setting = nil
	m.clearedsetting = false
}

// AddCachedExamIDs adds the "cached_exam" edge to the CachedExam entity by ids.
func (m *ExamMutation) AddCachedExamIDs(ids ...int) {
	if m.cached_exam == nil {
		m.cached_exam = make(map[int]struct{})
	}
	for i := range ids {
		m.cached_exam[ids[i]] = struct{}{}
	}
}

// ClearCachedExam clears the "cached_exam" edge to the CachedExam entity.
func (m *ExamMutation) ClearCachedExam() {
	m.clearedcached_exam = true
}

// CachedExamCleared reports if the "cached_exam" edge to the CachedExam entity was cleared.
func (m *ExamMutation) CachedExamCleared() bool {
	return m.clearedcached_exam
}

// RemoveCachedExamIDs removes the "cached_exam" edge to the CachedExam entity by IDs.
func (m *ExamMutation) RemoveCachedExamIDs(ids ...int) {
	if m.removedcached_exam == nil {
		m.removedcached_exam = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.cached_exam, ids[i])
		m.removedcached_exam[ids[i]] = struct{}{}
	}
}

// RemovedCachedExam returns the removed IDs of the "cached_exam" edge to the CachedExam entity.
func (m *ExamMutation) RemovedCachedExamIDs() (ids []int) {
	for id := range m.removedcached_exam {
		ids = append(ids, id)
	}
	return
}

// CachedExamIDs returns the "cached_exam" edge IDs in the mutation.
func (m *ExamMutation) CachedExamIDs() (ids []int) {
	for id := range m.cached_exam {
		ids = append(ids, id)
	}
	return
}

// ResetCachedExam resets all changes to the "cached_exam" edge.
func (m *ExamMutation) ResetCachedExam() {
	m.cached_exam = nil
	m.clearedcached_exam = false
	m.removedcached_exam = nil
}

// AddGeneratedexamIDs adds the "generatedexams" edge to the GeneratedExam entity by ids.
func (m *ExamMutation) AddGeneratedexamIDs(ids ...int) {
	if m.generatedexams == nil {
		m.generatedexams = make(map[int]struct{})
	}
	for i := range ids {
		m.generatedexams[ids[i]] = struct{}{}
	}
}

// ClearGeneratedexams clears the "generatedexams" edge to the GeneratedExam entity.
func (m *ExamMutation) ClearGeneratedexams() {
	m.clearedgeneratedexams = true
}

// GeneratedexamsCleared reports if the "generatedexams" edge to the GeneratedExam entity was cleared.
func (m *ExamMutation) GeneratedexamsCleared() bool {
	return m.clearedgeneratedexams
}

// RemoveGeneratedexamIDs removes the "generatedexams" edge to the GeneratedExam entity by IDs.
func (m *ExamMutation) RemoveGeneratedexamIDs(ids ...int) {
	if m.removedgeneratedexams == nil {
		m.removedgeneratedexams = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.generatedexams, ids[i])
		m.removedgeneratedexams[ids[i]] = struct{}{}
	}
}

// RemovedGeneratedexams returns the removed IDs of the "generatedexams" edge to the GeneratedExam entity.
func (m *ExamMutation) RemovedGeneratedexamsIDs() (ids []int) {
	for id := range m.removedgeneratedexams {
		ids = append(ids, id)
	}
	return
}

// GeneratedexamsIDs returns the "generatedexams" edge IDs in the mutation.
func (m *ExamMutation) GeneratedexamsIDs() (ids []int) {
	for id := range m.generatedexams {
		ids = append(ids, id)
	}
	return
}

// ResetGeneratedexams resets all changes to the "generatedexams" edge.
func (m *ExamMutation) ResetGeneratedexams() {
	m.generatedexams = nil
	m.clearedgeneratedexams = false
	m.removedgeneratedexams = nil
}

// Where appends a list predicates to the ExamMutation builder.
func (m *ExamMutation) Where(ps ...predicate.Exam) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ExamMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ExamMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Exam, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ExamMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ExamMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Exam).
func (m *ExamMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ExamMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.name != nil {
		fields = append(fields, exam.FieldName)
	}
	if m.description != nil {
		fields = append(fields, exam.FieldDescription)
	}
	if m._type != nil {
		fields = append(fields, exam.FieldType)
	}
	if m.is_active != nil {
		fields = append(fields, exam.FieldIsActive)
	}
	if m.logo_url != nil {
		fields = append(fields, exam.FieldLogoURL)
	}
	if m.created_at != nil {
		fields = append(fields, exam.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, exam.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ExamMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case exam.FieldName:
		return m.Name()
	case exam.FieldDescription:
		return m.Description()
	case exam.FieldType:
		return m.GetType()
	case exam.FieldIsActive:
		return m.IsActive()
	case exam.FieldLogoURL:
		return m.LogoURL()
	case exam.FieldCreatedAt:
		return m.CreatedAt()
	case exam.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ExamMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case exam.FieldName:
		return m.OldName(ctx)
	case exam.FieldDescription:
		return m.OldDescription(ctx)
	case exam.FieldType:
		return m.OldType(ctx)
	case exam.FieldIsActive:
		return m.OldIsActive(ctx)
	case exam.FieldLogoURL:
		return m.OldLogoURL(ctx)
	case exam.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case exam.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Exam field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExamMutation) SetField(name string, value ent.Value) error {
	switch name {
	case exam.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case exam.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case exam.FieldType:
		v, ok := value.(exam.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case exam.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case exam.FieldLogoURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogoURL(v)
		return nil
	case exam.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case exam.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Exam field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ExamMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ExamMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExamMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Exam numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ExamMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(exam.FieldLogoURL) {
		fields = append(fields, exam.FieldLogoURL)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ExamMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExamMutation) ClearField(name string) error {
	switch name {
	case exam.FieldLogoURL:
		m.ClearLogoURL()
		return nil
	}
	return fmt.Errorf("unknown Exam nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ExamMutation) ResetField(name string) error {
	switch name {
	case exam.FieldName:
		m.ResetName()
		return nil
	case exam.FieldDescription:
		m.ResetDescription()
		return nil
	case exam.FieldType:
		m.ResetType()
		return nil
	case exam.FieldIsActive:
		m.ResetIsActive()
		return nil
	case exam.FieldLogoURL:
		m.ResetLogoURL()
		return nil
	case exam.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case exam.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Exam field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ExamMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.category != nil {
		edges = append(edges, exam.EdgeCategory)
	}
	if m.subscriptions != nil {
		edges = append(edges, exam.EdgeSubscriptions)
	}
	if m.setting != nil {
		edges = append(edges, exam.EdgeSetting)
	}
	if m.cached_exam != nil {
		edges = append(edges, exam.EdgeCachedExam)
	}
	if m.generatedexams != nil {
		edges = append(edges, exam.EdgeGeneratedexams)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ExamMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case exam.EdgeCategory:
		if id := m.category; id != nil {
			return []ent.Value{*id}
		}
	case exam.EdgeSubscriptions:
		ids := make([]ent.Value, 0, len(m.subscriptions))
		for id := range m.subscriptions {
			ids = append(ids, id)
		}
		return ids
	case exam.EdgeSetting:
		if id := m.setting; id != nil {
			return []ent.Value{*id}
		}
	case exam.EdgeCachedExam:
		ids := make([]ent.Value, 0, len(m.cached_exam))
		for id := range m.cached_exam {
			ids = append(ids, id)
		}
		return ids
	case exam.EdgeGeneratedexams:
		ids := make([]ent.Value, 0, len(m.generatedexams))
		for id := range m.generatedexams {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ExamMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedsubscriptions != nil {
		edges = append(edges, exam.EdgeSubscriptions)
	}
	if m.removedcached_exam != nil {
		edges = append(edges, exam.EdgeCachedExam)
	}
	if m.removedgeneratedexams != nil {
		edges = append(edges, exam.EdgeGeneratedexams)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ExamMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case exam.EdgeSubscriptions:
		ids := make([]ent.Value, 0, len(m.removedsubscriptions))
		for id := range m.removedsubscriptions {
			ids = append(ids, id)
		}
		return ids
	case exam.EdgeCachedExam:
		ids := make([]ent.Value, 0, len(m.removedcached_exam))
		for id := range m.removedcached_exam {
			ids = append(ids, id)
		}
		return ids
	case exam.EdgeGeneratedexams:
		ids := make([]ent.Value, 0, len(m.removedgeneratedexams))
		for id := range m.removedgeneratedexams {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ExamMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedcategory {
		edges = append(edges, exam.EdgeCategory)
	}
	if m.clearedsubscriptions {
		edges = append(edges, exam.EdgeSubscriptions)
	}
	if m.clearedsetting {
		edges = append(edges, exam.EdgeSetting)
	}
	if m.clearedcached_exam {
		edges = append(edges, exam.EdgeCachedExam)
	}
	if m.clearedgeneratedexams {
		edges = append(edges, exam.EdgeGeneratedexams)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ExamMutation) EdgeCleared(name string) bool {
	switch name {
	case exam.EdgeCategory:
		return m.clearedcategory
	case exam.EdgeSubscriptions:
		return m.clearedsubscriptions
	case exam.EdgeSetting:
		return m.clearedsetting
	case exam.EdgeCachedExam:
		return m.clearedcached_exam
	case exam.EdgeGeneratedexams:
		return m.clearedgeneratedexams
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ExamMutation) ClearEdge(name string) error {
	switch name {
	case exam.EdgeCategory:
		m.ClearCategory()
		return nil
	case exam.EdgeSetting:
		m.ClearSetting()
		return nil
	}
	return fmt.Errorf("unknown Exam unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ExamMutation) ResetEdge(name string) error {
	switch name {
	case exam.EdgeCategory:
		m.ResetCategory()
		return nil
	case exam.EdgeSubscriptions:
		m.ResetSubscriptions()
		return nil
	case exam.EdgeSetting:
		m.ResetSetting()
		return nil
	case exam.EdgeCachedExam:
		m.ResetCachedExam()
		return nil
	case exam.EdgeGeneratedexams:
		m.ResetGeneratedexams()
		return nil
	}
	return fmt.Errorf("unknown Exam edge %s", name)
}

// ExamAssesmentMutation represents an operation that mutates the ExamAssesment nodes in the graph.
type ExamAssesmentMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	completed_seconds    *int
	addcompleted_seconds *int
	raw_assesment_data   *map[string]interface{}
	raw_user_submission  *map[string]interface{}
	status               *examassesment.Status
	remarks              *string
	created_at           *time.Time
	updated_at           *time.Time
	clearedFields        map[string]struct{}
	attempt              *int
	clearedattempt       bool
	done                 bool
	oldValue             func(context.Context) (*ExamAssesment, error)
	predicates           []predicate.ExamAssesment
}

var _ ent.Mutation = (*ExamAssesmentMutation)(nil)

// examassesmentOption allows management of the mutation configuration using functional options.
type examassesmentOption func(*ExamAssesmentMutation)

// newExamAssesmentMutation creates new mutation for the ExamAssesment entity.
func newExamAssesmentMutation(c config, op Op, opts ...examassesmentOption) *ExamAssesmentMutation {
	m := &ExamAssesmentMutation{
		config:        c,
		op:            op,
		typ:           TypeExamAssesment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExamAssesmentID sets the ID field of the mutation.
func withExamAssesmentID(id int) examassesmentOption {
	return func(m *ExamAssesmentMutation) {
		var (
			err   error
			once  sync.Once
			value *ExamAssesment
		)
		m.oldValue = func(ctx context.Context) (*ExamAssesment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ExamAssesment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withExamAssesment sets the old ExamAssesment of the mutation.
func withExamAssesment(node *ExamAssesment) examassesmentOption {
	return func(m *ExamAssesmentMutation) {
		m.oldValue = func(context.Context) (*ExamAssesment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExamAssesmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExamAssesmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ExamAssesmentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ExamAssesmentMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ExamAssesment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCompletedSeconds sets the "completed_seconds" field.
func (m *ExamAssesmentMutation) SetCompletedSeconds(i int) {
	m.completed_seconds = &i
	m.addcompleted_seconds = nil
}

// CompletedSeconds returns the value of the "completed_seconds" field in the mutation.
func (m *ExamAssesmentMutation) CompletedSeconds() (r int, exists bool) {
	v := m.completed_seconds
	if v == nil {
		return
	}
	return *v, true
}

// OldCompletedSeconds returns the old "completed_seconds" field's value of the ExamAssesment entity.
// If the ExamAssesment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamAssesmentMutation) OldCompletedSeconds(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCompletedSeconds is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCompletedSeconds requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCompletedSeconds: %w", err)
	}
	return oldValue.CompletedSeconds, nil
}

// AddCompletedSeconds adds i to the "completed_seconds" field.
func (m *ExamAssesmentMutation) AddCompletedSeconds(i int) {
	if m.addcompleted_seconds != nil {
		*m.addcompleted_seconds += i
	} else {
		m.addcompleted_seconds = &i
	}
}

// AddedCompletedSeconds returns the value that was added to the "completed_seconds" field in this mutation.
func (m *ExamAssesmentMutation) AddedCompletedSeconds() (r int, exists bool) {
	v := m.addcompleted_seconds
	if v == nil {
		return
	}
	return *v, true
}

// ResetCompletedSeconds resets all changes to the "completed_seconds" field.
func (m *ExamAssesmentMutation) ResetCompletedSeconds() {
	m.completed_seconds = nil
	m.addcompleted_seconds = nil
}

// SetRawAssesmentData sets the "raw_assesment_data" field.
func (m *ExamAssesmentMutation) SetRawAssesmentData(value map[string]interface{}) {
	m.raw_assesment_data = &value
}

// RawAssesmentData returns the value of the "raw_assesment_data" field in the mutation.
func (m *ExamAssesmentMutation) RawAssesmentData() (r map[string]interface{}, exists bool) {
	v := m.raw_assesment_data
	if v == nil {
		return
	}
	return *v, true
}

// OldRawAssesmentData returns the old "raw_assesment_data" field's value of the ExamAssesment entity.
// If the ExamAssesment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamAssesmentMutation) OldRawAssesmentData(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRawAssesmentData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRawAssesmentData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRawAssesmentData: %w", err)
	}
	return oldValue.RawAssesmentData, nil
}

// ClearRawAssesmentData clears the value of the "raw_assesment_data" field.
func (m *ExamAssesmentMutation) ClearRawAssesmentData() {
	m.raw_assesment_data = nil
	m.clearedFields[examassesment.FieldRawAssesmentData] = struct{}{}
}

// RawAssesmentDataCleared returns if the "raw_assesment_data" field was cleared in this mutation.
func (m *ExamAssesmentMutation) RawAssesmentDataCleared() bool {
	_, ok := m.clearedFields[examassesment.FieldRawAssesmentData]
	return ok
}

// ResetRawAssesmentData resets all changes to the "raw_assesment_data" field.
func (m *ExamAssesmentMutation) ResetRawAssesmentData() {
	m.raw_assesment_data = nil
	delete(m.clearedFields, examassesment.FieldRawAssesmentData)
}

// SetRawUserSubmission sets the "raw_user_submission" field.
func (m *ExamAssesmentMutation) SetRawUserSubmission(value map[string]interface{}) {
	m.raw_user_submission = &value
}

// RawUserSubmission returns the value of the "raw_user_submission" field in the mutation.
func (m *ExamAssesmentMutation) RawUserSubmission() (r map[string]interface{}, exists bool) {
	v := m.raw_user_submission
	if v == nil {
		return
	}
	return *v, true
}

// OldRawUserSubmission returns the old "raw_user_submission" field's value of the ExamAssesment entity.
// If the ExamAssesment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamAssesmentMutation) OldRawUserSubmission(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRawUserSubmission is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRawUserSubmission requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRawUserSubmission: %w", err)
	}
	return oldValue.RawUserSubmission, nil
}

// ResetRawUserSubmission resets all changes to the "raw_user_submission" field.
func (m *ExamAssesmentMutation) ResetRawUserSubmission() {
	m.raw_user_submission = nil
}

// SetStatus sets the "status" field.
func (m *ExamAssesmentMutation) SetStatus(e examassesment.Status) {
	m.status = &e
}

// Status returns the value of the "status" field in the mutation.
func (m *ExamAssesmentMutation) Status() (r examassesment.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the ExamAssesment entity.
// If the ExamAssesment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamAssesmentMutation) OldStatus(ctx context.Context) (v examassesment.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *ExamAssesmentMutation) ResetStatus() {
	m.status = nil
}

// SetRemarks sets the "remarks" field.
func (m *ExamAssesmentMutation) SetRemarks(s string) {
	m.remarks = &s
}

// Remarks returns the value of the "remarks" field in the mutation.
func (m *ExamAssesmentMutation) Remarks() (r string, exists bool) {
	v := m.remarks
	if v == nil {
		return
	}
	return *v, true
}

// OldRemarks returns the old "remarks" field's value of the ExamAssesment entity.
// If the ExamAssesment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamAssesmentMutation) OldRemarks(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemarks is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemarks requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemarks: %w", err)
	}
	return oldValue.Remarks, nil
}

// ClearRemarks clears the value of the "remarks" field.
func (m *ExamAssesmentMutation) ClearRemarks() {
	m.remarks = nil
	m.clearedFields[examassesment.FieldRemarks] = struct{}{}
}

// RemarksCleared returns if the "remarks" field was cleared in this mutation.
func (m *ExamAssesmentMutation) RemarksCleared() bool {
	_, ok := m.clearedFields[examassesment.FieldRemarks]
	return ok
}

// ResetRemarks resets all changes to the "remarks" field.
func (m *ExamAssesmentMutation) ResetRemarks() {
	m.remarks = nil
	delete(m.clearedFields, examassesment.FieldRemarks)
}

// SetCreatedAt sets the "created_at" field.
func (m *ExamAssesmentMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ExamAssesmentMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ExamAssesment entity.
// If the ExamAssesment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamAssesmentMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ExamAssesmentMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ExamAssesmentMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ExamAssesmentMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ExamAssesment entity.
// If the ExamAssesment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamAssesmentMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ExamAssesmentMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetAttemptID sets the "attempt" edge to the ExamAttempt entity by id.
func (m *ExamAssesmentMutation) SetAttemptID(id int) {
	m.attempt = &id
}

// ClearAttempt clears the "attempt" edge to the ExamAttempt entity.
func (m *ExamAssesmentMutation) ClearAttempt() {
	m.clearedattempt = true
}

// AttemptCleared reports if the "attempt" edge to the ExamAttempt entity was cleared.
func (m *ExamAssesmentMutation) AttemptCleared() bool {
	return m.clearedattempt
}

// AttemptID returns the "attempt" edge ID in the mutation.
func (m *ExamAssesmentMutation) AttemptID() (id int, exists bool) {
	if m.attempt != nil {
		return *m.attempt, true
	}
	return
}

// AttemptIDs returns the "attempt" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AttemptID instead. It exists only for internal usage by the builders.
func (m *ExamAssesmentMutation) AttemptIDs() (ids []int) {
	if id := m.attempt; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAttempt resets all changes to the "attempt" edge.
func (m *ExamAssesmentMutation) ResetAttempt() {
	m.attempt = nil
	m.clearedattempt = false
}

// Where appends a list predicates to the ExamAssesmentMutation builder.
func (m *ExamAssesmentMutation) Where(ps ...predicate.ExamAssesment) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ExamAssesmentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ExamAssesmentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ExamAssesment, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ExamAssesmentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ExamAssesmentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ExamAssesment).
func (m *ExamAssesmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ExamAssesmentMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.completed_seconds != nil {
		fields = append(fields, examassesment.FieldCompletedSeconds)
	}
	if m.raw_assesment_data != nil {
		fields = append(fields, examassesment.FieldRawAssesmentData)
	}
	if m.raw_user_submission != nil {
		fields = append(fields, examassesment.FieldRawUserSubmission)
	}
	if m.status != nil {
		fields = append(fields, examassesment.FieldStatus)
	}
	if m.remarks != nil {
		fields = append(fields, examassesment.FieldRemarks)
	}
	if m.created_at != nil {
		fields = append(fields, examassesment.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, examassesment.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ExamAssesmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case examassesment.FieldCompletedSeconds:
		return m.CompletedSeconds()
	case examassesment.FieldRawAssesmentData:
		return m.RawAssesmentData()
	case examassesment.FieldRawUserSubmission:
		return m.RawUserSubmission()
	case examassesment.FieldStatus:
		return m.Status()
	case examassesment.FieldRemarks:
		return m.Remarks()
	case examassesment.FieldCreatedAt:
		return m.CreatedAt()
	case examassesment.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ExamAssesmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case examassesment.FieldCompletedSeconds:
		return m.OldCompletedSeconds(ctx)
	case examassesment.FieldRawAssesmentData:
		return m.OldRawAssesmentData(ctx)
	case examassesment.FieldRawUserSubmission:
		return m.OldRawUserSubmission(ctx)
	case examassesment.FieldStatus:
		return m.OldStatus(ctx)
	case examassesment.FieldRemarks:
		return m.OldRemarks(ctx)
	case examassesment.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case examassesment.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ExamAssesment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExamAssesmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case examassesment.FieldCompletedSeconds:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCompletedSeconds(v)
		return nil
	case examassesment.FieldRawAssesmentData:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRawAssesmentData(v)
		return nil
	case examassesment.FieldRawUserSubmission:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRawUserSubmission(v)
		return nil
	case examassesment.FieldStatus:
		v, ok := value.(examassesment.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case examassesment.FieldRemarks:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemarks(v)
		return nil
	case examassesment.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case examassesment.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ExamAssesment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ExamAssesmentMutation) AddedFields() []string {
	var fields []string
	if m.addcompleted_seconds != nil {
		fields = append(fields, examassesment.FieldCompletedSeconds)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ExamAssesmentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case examassesment.FieldCompletedSeconds:
		return m.AddedCompletedSeconds()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExamAssesmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case examassesment.FieldCompletedSeconds:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCompletedSeconds(v)
		return nil
	}
	return fmt.Errorf("unknown ExamAssesment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ExamAssesmentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(examassesment.FieldRawAssesmentData) {
		fields = append(fields, examassesment.FieldRawAssesmentData)
	}
	if m.FieldCleared(examassesment.FieldRemarks) {
		fields = append(fields, examassesment.FieldRemarks)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ExamAssesmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExamAssesmentMutation) ClearField(name string) error {
	switch name {
	case examassesment.FieldRawAssesmentData:
		m.ClearRawAssesmentData()
		return nil
	case examassesment.FieldRemarks:
		m.ClearRemarks()
		return nil
	}
	return fmt.Errorf("unknown ExamAssesment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ExamAssesmentMutation) ResetField(name string) error {
	switch name {
	case examassesment.FieldCompletedSeconds:
		m.ResetCompletedSeconds()
		return nil
	case examassesment.FieldRawAssesmentData:
		m.ResetRawAssesmentData()
		return nil
	case examassesment.FieldRawUserSubmission:
		m.ResetRawUserSubmission()
		return nil
	case examassesment.FieldStatus:
		m.ResetStatus()
		return nil
	case examassesment.FieldRemarks:
		m.ResetRemarks()
		return nil
	case examassesment.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case examassesment.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown ExamAssesment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ExamAssesmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.attempt != nil {
		edges = append(edges, examassesment.EdgeAttempt)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ExamAssesmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case examassesment.EdgeAttempt:
		if id := m.attempt; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ExamAssesmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ExamAssesmentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ExamAssesmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedattempt {
		edges = append(edges, examassesment.EdgeAttempt)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ExamAssesmentMutation) EdgeCleared(name string) bool {
	switch name {
	case examassesment.EdgeAttempt:
		return m.clearedattempt
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ExamAssesmentMutation) ClearEdge(name string) error {
	switch name {
	case examassesment.EdgeAttempt:
		m.ClearAttempt()
		return nil
	}
	return fmt.Errorf("unknown ExamAssesment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ExamAssesmentMutation) ResetEdge(name string) error {
	switch name {
	case examassesment.EdgeAttempt:
		m.ResetAttempt()
		return nil
	}
	return fmt.Errorf("unknown ExamAssesment edge %s", name)
}

// ExamAttemptMutation represents an operation that mutates the ExamAttempt nodes in the graph.
type ExamAttemptMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	attempt_number       *int
	addattempt_number    *int
	created_at           *time.Time
	updated_at           *time.Time
	clearedFields        map[string]struct{}
	generatedexam        *int
	clearedgeneratedexam bool
	user                 *uuid.UUID
	cleareduser          bool
	assesment            *int
	clearedassesment     bool
	done                 bool
	oldValue             func(context.Context) (*ExamAttempt, error)
	predicates           []predicate.ExamAttempt
}

var _ ent.Mutation = (*ExamAttemptMutation)(nil)

// examattemptOption allows management of the mutation configuration using functional options.
type examattemptOption func(*ExamAttemptMutation)

// newExamAttemptMutation creates new mutation for the ExamAttempt entity.
func newExamAttemptMutation(c config, op Op, opts ...examattemptOption) *ExamAttemptMutation {
	m := &ExamAttemptMutation{
		config:        c,
		op:            op,
		typ:           TypeExamAttempt,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExamAttemptID sets the ID field of the mutation.
func withExamAttemptID(id int) examattemptOption {
	return func(m *ExamAttemptMutation) {
		var (
			err   error
			once  sync.Once
			value *ExamAttempt
		)
		m.oldValue = func(ctx context.Context) (*ExamAttempt, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ExamAttempt.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withExamAttempt sets the old ExamAttempt of the mutation.
func withExamAttempt(node *ExamAttempt) examattemptOption {
	return func(m *ExamAttemptMutation) {
		m.oldValue = func(context.Context) (*ExamAttempt, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExamAttemptMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExamAttemptMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ExamAttemptMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ExamAttemptMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ExamAttempt.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAttemptNumber sets the "attempt_number" field.
func (m *ExamAttemptMutation) SetAttemptNumber(i int) {
	m.attempt_number = &i
	m.addattempt_number = nil
}

// AttemptNumber returns the value of the "attempt_number" field in the mutation.
func (m *ExamAttemptMutation) AttemptNumber() (r int, exists bool) {
	v := m.attempt_number
	if v == nil {
		return
	}
	return *v, true
}

// OldAttemptNumber returns the old "attempt_number" field's value of the ExamAttempt entity.
// If the ExamAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamAttemptMutation) OldAttemptNumber(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAttemptNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAttemptNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAttemptNumber: %w", err)
	}
	return oldValue.AttemptNumber, nil
}

// AddAttemptNumber adds i to the "attempt_number" field.
func (m *ExamAttemptMutation) AddAttemptNumber(i int) {
	if m.addattempt_number != nil {
		*m.addattempt_number += i
	} else {
		m.addattempt_number = &i
	}
}

// AddedAttemptNumber returns the value that was added to the "attempt_number" field in this mutation.
func (m *ExamAttemptMutation) AddedAttemptNumber() (r int, exists bool) {
	v := m.addattempt_number
	if v == nil {
		return
	}
	return *v, true
}

// ResetAttemptNumber resets all changes to the "attempt_number" field.
func (m *ExamAttemptMutation) ResetAttemptNumber() {
	m.attempt_number = nil
	m.addattempt_number = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ExamAttemptMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ExamAttemptMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ExamAttempt entity.
// If the ExamAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamAttemptMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ExamAttemptMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ExamAttemptMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ExamAttemptMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ExamAttempt entity.
// If the ExamAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamAttemptMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ExamAttemptMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetGeneratedexamID sets the "generatedexam" edge to the GeneratedExam entity by id.
func (m *ExamAttemptMutation) SetGeneratedexamID(id int) {
	m.generatedexam = &id
}

// ClearGeneratedexam clears the "generatedexam" edge to the GeneratedExam entity.
func (m *ExamAttemptMutation) ClearGeneratedexam() {
	m.clearedgeneratedexam = true
}

// GeneratedexamCleared reports if the "generatedexam" edge to the GeneratedExam entity was cleared.
func (m *ExamAttemptMutation) GeneratedexamCleared() bool {
	return m.clearedgeneratedexam
}

// GeneratedexamID returns the "generatedexam" edge ID in the mutation.
func (m *ExamAttemptMutation) GeneratedexamID() (id int, exists bool) {
	if m.generatedexam != nil {
		return *m.generatedexam, true
	}
	return
}

// GeneratedexamIDs returns the "generatedexam" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GeneratedexamID instead. It exists only for internal usage by the builders.
func (m *ExamAttemptMutation) GeneratedexamIDs() (ids []int) {
	if id := m.generatedexam; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGeneratedexam resets all changes to the "generatedexam" edge.
func (m *ExamAttemptMutation) ResetGeneratedexam() {
	m.generatedexam = nil
	m.clearedgeneratedexam = false
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *ExamAttemptMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *ExamAttemptMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *ExamAttemptMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *ExamAttemptMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ExamAttemptMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ExamAttemptMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetAssesmentID sets the "assesment" edge to the ExamAssesment entity by id.
func (m *ExamAttemptMutation) SetAssesmentID(id int) {
	m.assesment = &id
}

// ClearAssesment clears the "assesment" edge to the ExamAssesment entity.
func (m *ExamAttemptMutation) ClearAssesment() {
	m.clearedassesment = true
}

// AssesmentCleared reports if the "assesment" edge to the ExamAssesment entity was cleared.
func (m *ExamAttemptMutation) AssesmentCleared() bool {
	return m.clearedassesment
}

// AssesmentID returns the "assesment" edge ID in the mutation.
func (m *ExamAttemptMutation) AssesmentID() (id int, exists bool) {
	if m.assesment != nil {
		return *m.assesment, true
	}
	return
}

// AssesmentIDs returns the "assesment" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AssesmentID instead. It exists only for internal usage by the builders.
func (m *ExamAttemptMutation) AssesmentIDs() (ids []int) {
	if id := m.assesment; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAssesment resets all changes to the "assesment" edge.
func (m *ExamAttemptMutation) ResetAssesment() {
	m.assesment = nil
	m.clearedassesment = false
}

// Where appends a list predicates to the ExamAttemptMutation builder.
func (m *ExamAttemptMutation) Where(ps ...predicate.ExamAttempt) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ExamAttemptMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ExamAttemptMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ExamAttempt, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ExamAttemptMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ExamAttemptMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ExamAttempt).
func (m *ExamAttemptMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ExamAttemptMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.attempt_number != nil {
		fields = append(fields, examattempt.FieldAttemptNumber)
	}
	if m.created_at != nil {
		fields = append(fields, examattempt.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, examattempt.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ExamAttemptMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case examattempt.FieldAttemptNumber:
		return m.AttemptNumber()
	case examattempt.FieldCreatedAt:
		return m.CreatedAt()
	case examattempt.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ExamAttemptMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case examattempt.FieldAttemptNumber:
		return m.OldAttemptNumber(ctx)
	case examattempt.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case examattempt.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ExamAttempt field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExamAttemptMutation) SetField(name string, value ent.Value) error {
	switch name {
	case examattempt.FieldAttemptNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAttemptNumber(v)
		return nil
	case examattempt.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case examattempt.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ExamAttempt field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ExamAttemptMutation) AddedFields() []string {
	var fields []string
	if m.addattempt_number != nil {
		fields = append(fields, examattempt.FieldAttemptNumber)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ExamAttemptMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case examattempt.FieldAttemptNumber:
		return m.AddedAttemptNumber()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExamAttemptMutation) AddField(name string, value ent.Value) error {
	switch name {
	case examattempt.FieldAttemptNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAttemptNumber(v)
		return nil
	}
	return fmt.Errorf("unknown ExamAttempt numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ExamAttemptMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ExamAttemptMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExamAttemptMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ExamAttempt nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ExamAttemptMutation) ResetField(name string) error {
	switch name {
	case examattempt.FieldAttemptNumber:
		m.ResetAttemptNumber()
		return nil
	case examattempt.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case examattempt.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown ExamAttempt field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ExamAttemptMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.generatedexam != nil {
		edges = append(edges, examattempt.EdgeGeneratedexam)
	}
	if m.user != nil {
		edges = append(edges, examattempt.EdgeUser)
	}
	if m.assesment != nil {
		edges = append(edges, examattempt.EdgeAssesment)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ExamAttemptMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case examattempt.EdgeGeneratedexam:
		if id := m.generatedexam; id != nil {
			return []ent.Value{*id}
		}
	case examattempt.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case examattempt.EdgeAssesment:
		if id := m.assesment; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ExamAttemptMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ExamAttemptMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ExamAttemptMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedgeneratedexam {
		edges = append(edges, examattempt.EdgeGeneratedexam)
	}
	if m.cleareduser {
		edges = append(edges, examattempt.EdgeUser)
	}
	if m.clearedassesment {
		edges = append(edges, examattempt.EdgeAssesment)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ExamAttemptMutation) EdgeCleared(name string) bool {
	switch name {
	case examattempt.EdgeGeneratedexam:
		return m.clearedgeneratedexam
	case examattempt.EdgeUser:
		return m.cleareduser
	case examattempt.EdgeAssesment:
		return m.clearedassesment
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ExamAttemptMutation) ClearEdge(name string) error {
	switch name {
	case examattempt.EdgeGeneratedexam:
		m.ClearGeneratedexam()
		return nil
	case examattempt.EdgeUser:
		m.ClearUser()
		return nil
	case examattempt.EdgeAssesment:
		m.ClearAssesment()
		return nil
	}
	return fmt.Errorf("unknown ExamAttempt unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ExamAttemptMutation) ResetEdge(name string) error {
	switch name {
	case examattempt.EdgeGeneratedexam:
		m.ResetGeneratedexam()
		return nil
	case examattempt.EdgeUser:
		m.ResetUser()
		return nil
	case examattempt.EdgeAssesment:
		m.ResetAssesment()
		return nil
	}
	return fmt.Errorf("unknown ExamAttempt edge %s", name)
}

// ExamCategoryMutation represents an operation that mutates the ExamCategory nodes in the graph.
type ExamCategoryMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *examcategory.Name
	description   *string
	is_active     *bool
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	exams         map[int]struct{}
	removedexams  map[int]struct{}
	clearedexams  bool
	groups        map[int]struct{}
	removedgroups map[int]struct{}
	clearedgroups bool
	done          bool
	oldValue      func(context.Context) (*ExamCategory, error)
	predicates    []predicate.ExamCategory
}

var _ ent.Mutation = (*ExamCategoryMutation)(nil)

// examcategoryOption allows management of the mutation configuration using functional options.
type examcategoryOption func(*ExamCategoryMutation)

// newExamCategoryMutation creates new mutation for the ExamCategory entity.
func newExamCategoryMutation(c config, op Op, opts ...examcategoryOption) *ExamCategoryMutation {
	m := &ExamCategoryMutation{
		config:        c,
		op:            op,
		typ:           TypeExamCategory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExamCategoryID sets the ID field of the mutation.
func withExamCategoryID(id int) examcategoryOption {
	return func(m *ExamCategoryMutation) {
		var (
			err   error
			once  sync.Once
			value *ExamCategory
		)
		m.oldValue = func(ctx context.Context) (*ExamCategory, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ExamCategory.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withExamCategory sets the old ExamCategory of the mutation.
func withExamCategory(node *ExamCategory) examcategoryOption {
	return func(m *ExamCategoryMutation) {
		m.oldValue = func(context.Context) (*ExamCategory, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExamCategoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExamCategoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ExamCategoryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ExamCategoryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ExamCategory.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ExamCategoryMutation) SetName(e examcategory.Name) {
	m.name = &e
}

// Name returns the value of the "name" field in the mutation.
func (m *ExamCategoryMutation) Name() (r examcategory.Name, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the ExamCategory entity.
// If the ExamCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamCategoryMutation) OldName(ctx context.Context) (v examcategory.Name, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ExamCategoryMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *ExamCategoryMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ExamCategoryMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the ExamCategory entity.
// If the ExamCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamCategoryMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ExamCategoryMutation) ResetDescription() {
	m.description = nil
}

// SetIsActive sets the "is_active" field.
func (m *ExamCategoryMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *ExamCategoryMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the ExamCategory entity.
// If the ExamCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamCategoryMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *ExamCategoryMutation) ResetIsActive() {
	m.is_active = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ExamCategoryMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ExamCategoryMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ExamCategory entity.
// If the ExamCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamCategoryMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ExamCategoryMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ExamCategoryMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ExamCategoryMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ExamCategory entity.
// If the ExamCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamCategoryMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ExamCategoryMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddExamIDs adds the "exams" edge to the Exam entity by ids.
func (m *ExamCategoryMutation) AddExamIDs(ids ...int) {
	if m.exams == nil {
		m.exams = make(map[int]struct{})
	}
	for i := range ids {
		m.exams[ids[i]] = struct{}{}
	}
}

// ClearExams clears the "exams" edge to the Exam entity.
func (m *ExamCategoryMutation) ClearExams() {
	m.clearedexams = true
}

// ExamsCleared reports if the "exams" edge to the Exam entity was cleared.
func (m *ExamCategoryMutation) ExamsCleared() bool {
	return m.clearedexams
}

// RemoveExamIDs removes the "exams" edge to the Exam entity by IDs.
func (m *ExamCategoryMutation) RemoveExamIDs(ids ...int) {
	if m.removedexams == nil {
		m.removedexams = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.exams, ids[i])
		m.removedexams[ids[i]] = struct{}{}
	}
}

// RemovedExams returns the removed IDs of the "exams" edge to the Exam entity.
func (m *ExamCategoryMutation) RemovedExamsIDs() (ids []int) {
	for id := range m.removedexams {
		ids = append(ids, id)
	}
	return
}

// ExamsIDs returns the "exams" edge IDs in the mutation.
func (m *ExamCategoryMutation) ExamsIDs() (ids []int) {
	for id := range m.exams {
		ids = append(ids, id)
	}
	return
}

// ResetExams resets all changes to the "exams" edge.
func (m *ExamCategoryMutation) ResetExams() {
	m.exams = nil
	m.clearedexams = false
	m.removedexams = nil
}

// AddGroupIDs adds the "groups" edge to the ExamGroup entity by ids.
func (m *ExamCategoryMutation) AddGroupIDs(ids ...int) {
	if m.groups == nil {
		m.groups = make(map[int]struct{})
	}
	for i := range ids {
		m.groups[ids[i]] = struct{}{}
	}
}

// ClearGroups clears the "groups" edge to the ExamGroup entity.
func (m *ExamCategoryMutation) ClearGroups() {
	m.clearedgroups = true
}

// GroupsCleared reports if the "groups" edge to the ExamGroup entity was cleared.
func (m *ExamCategoryMutation) GroupsCleared() bool {
	return m.clearedgroups
}

// RemoveGroupIDs removes the "groups" edge to the ExamGroup entity by IDs.
func (m *ExamCategoryMutation) RemoveGroupIDs(ids ...int) {
	if m.removedgroups == nil {
		m.removedgroups = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.groups, ids[i])
		m.removedgroups[ids[i]] = struct{}{}
	}
}

// RemovedGroups returns the removed IDs of the "groups" edge to the ExamGroup entity.
func (m *ExamCategoryMutation) RemovedGroupsIDs() (ids []int) {
	for id := range m.removedgroups {
		ids = append(ids, id)
	}
	return
}

// GroupsIDs returns the "groups" edge IDs in the mutation.
func (m *ExamCategoryMutation) GroupsIDs() (ids []int) {
	for id := range m.groups {
		ids = append(ids, id)
	}
	return
}

// ResetGroups resets all changes to the "groups" edge.
func (m *ExamCategoryMutation) ResetGroups() {
	m.groups = nil
	m.clearedgroups = false
	m.removedgroups = nil
}

// Where appends a list predicates to the ExamCategoryMutation builder.
func (m *ExamCategoryMutation) Where(ps ...predicate.ExamCategory) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ExamCategoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ExamCategoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ExamCategory, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ExamCategoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ExamCategoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ExamCategory).
func (m *ExamCategoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ExamCategoryMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, examcategory.FieldName)
	}
	if m.description != nil {
		fields = append(fields, examcategory.FieldDescription)
	}
	if m.is_active != nil {
		fields = append(fields, examcategory.FieldIsActive)
	}
	if m.created_at != nil {
		fields = append(fields, examcategory.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, examcategory.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ExamCategoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case examcategory.FieldName:
		return m.Name()
	case examcategory.FieldDescription:
		return m.Description()
	case examcategory.FieldIsActive:
		return m.IsActive()
	case examcategory.FieldCreatedAt:
		return m.CreatedAt()
	case examcategory.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ExamCategoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case examcategory.FieldName:
		return m.OldName(ctx)
	case examcategory.FieldDescription:
		return m.OldDescription(ctx)
	case examcategory.FieldIsActive:
		return m.OldIsActive(ctx)
	case examcategory.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case examcategory.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ExamCategory field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExamCategoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case examcategory.FieldName:
		v, ok := value.(examcategory.Name)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case examcategory.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case examcategory.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case examcategory.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case examcategory.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ExamCategory field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ExamCategoryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ExamCategoryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExamCategoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ExamCategory numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ExamCategoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ExamCategoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExamCategoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ExamCategory nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ExamCategoryMutation) ResetField(name string) error {
	switch name {
	case examcategory.FieldName:
		m.ResetName()
		return nil
	case examcategory.FieldDescription:
		m.ResetDescription()
		return nil
	case examcategory.FieldIsActive:
		m.ResetIsActive()
		return nil
	case examcategory.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case examcategory.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown ExamCategory field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ExamCategoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.exams != nil {
		edges = append(edges, examcategory.EdgeExams)
	}
	if m.groups != nil {
		edges = append(edges, examcategory.EdgeGroups)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ExamCategoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case examcategory.EdgeExams:
		ids := make([]ent.Value, 0, len(m.exams))
		for id := range m.exams {
			ids = append(ids, id)
		}
		return ids
	case examcategory.EdgeGroups:
		ids := make([]ent.Value, 0, len(m.groups))
		for id := range m.groups {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ExamCategoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedexams != nil {
		edges = append(edges, examcategory.EdgeExams)
	}
	if m.removedgroups != nil {
		edges = append(edges, examcategory.EdgeGroups)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ExamCategoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case examcategory.EdgeExams:
		ids := make([]ent.Value, 0, len(m.removedexams))
		for id := range m.removedexams {
			ids = append(ids, id)
		}
		return ids
	case examcategory.EdgeGroups:
		ids := make([]ent.Value, 0, len(m.removedgroups))
		for id := range m.removedgroups {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ExamCategoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedexams {
		edges = append(edges, examcategory.EdgeExams)
	}
	if m.clearedgroups {
		edges = append(edges, examcategory.EdgeGroups)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ExamCategoryMutation) EdgeCleared(name string) bool {
	switch name {
	case examcategory.EdgeExams:
		return m.clearedexams
	case examcategory.EdgeGroups:
		return m.clearedgroups
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ExamCategoryMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown ExamCategory unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ExamCategoryMutation) ResetEdge(name string) error {
	switch name {
	case examcategory.EdgeExams:
		m.ResetExams()
		return nil
	case examcategory.EdgeGroups:
		m.ResetGroups()
		return nil
	}
	return fmt.Errorf("unknown ExamCategory edge %s", name)
}

// ExamGroupMutation represents an operation that mutates the ExamGroup nodes in the graph.
type ExamGroupMutation struct {
	config
	op              Op
	typ             string
	id              *int
	name            *string
	description     *string
	is_active       *bool
	logo_url        *string
	created_at      *time.Time
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	category        *int
	clearedcategory bool
	done            bool
	oldValue        func(context.Context) (*ExamGroup, error)
	predicates      []predicate.ExamGroup
}

var _ ent.Mutation = (*ExamGroupMutation)(nil)

// examgroupOption allows management of the mutation configuration using functional options.
type examgroupOption func(*ExamGroupMutation)

// newExamGroupMutation creates new mutation for the ExamGroup entity.
func newExamGroupMutation(c config, op Op, opts ...examgroupOption) *ExamGroupMutation {
	m := &ExamGroupMutation{
		config:        c,
		op:            op,
		typ:           TypeExamGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExamGroupID sets the ID field of the mutation.
func withExamGroupID(id int) examgroupOption {
	return func(m *ExamGroupMutation) {
		var (
			err   error
			once  sync.Once
			value *ExamGroup
		)
		m.oldValue = func(ctx context.Context) (*ExamGroup, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ExamGroup.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withExamGroup sets the old ExamGroup of the mutation.
func withExamGroup(node *ExamGroup) examgroupOption {
	return func(m *ExamGroupMutation) {
		m.oldValue = func(context.Context) (*ExamGroup, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExamGroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExamGroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ExamGroupMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ExamGroupMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ExamGroup.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ExamGroupMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ExamGroupMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the ExamGroup entity.
// If the ExamGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamGroupMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ExamGroupMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *ExamGroupMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ExamGroupMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the ExamGroup entity.
// If the ExamGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamGroupMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ExamGroupMutation) ResetDescription() {
	m.description = nil
}

// SetIsActive sets the "is_active" field.
func (m *ExamGroupMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *ExamGroupMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the ExamGroup entity.
// If the ExamGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamGroupMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *ExamGroupMutation) ResetIsActive() {
	m.is_active = nil
}

// SetLogoURL sets the "logo_url" field.
func (m *ExamGroupMutation) SetLogoURL(s string) {
	m.logo_url = &s
}

// LogoURL returns the value of the "logo_url" field in the mutation.
func (m *ExamGroupMutation) LogoURL() (r string, exists bool) {
	v := m.logo_url
	if v == nil {
		return
	}
	return *v, true
}

// OldLogoURL returns the old "logo_url" field's value of the ExamGroup entity.
// If the ExamGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamGroupMutation) OldLogoURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogoURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogoURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogoURL: %w", err)
	}
	return oldValue.LogoURL, nil
}

// ClearLogoURL clears the value of the "logo_url" field.
func (m *ExamGroupMutation) ClearLogoURL() {
	m.logo_url = nil
	m.clearedFields[examgroup.FieldLogoURL] = struct{}{}
}

// LogoURLCleared returns if the "logo_url" field was cleared in this mutation.
func (m *ExamGroupMutation) LogoURLCleared() bool {
	_, ok := m.clearedFields[examgroup.FieldLogoURL]
	return ok
}

// ResetLogoURL resets all changes to the "logo_url" field.
func (m *ExamGroupMutation) ResetLogoURL() {
	m.logo_url = nil
	delete(m.clearedFields, examgroup.FieldLogoURL)
}

// SetCreatedAt sets the "created_at" field.
func (m *ExamGroupMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ExamGroupMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ExamGroup entity.
// If the ExamGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamGroupMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ExamGroupMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ExamGroupMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ExamGroupMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ExamGroup entity.
// If the ExamGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamGroupMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ExamGroupMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCategoryID sets the "category" edge to the ExamCategory entity by id.
func (m *ExamGroupMutation) SetCategoryID(id int) {
	m.category = &id
}

// ClearCategory clears the "category" edge to the ExamCategory entity.
func (m *ExamGroupMutation) ClearCategory() {
	m.clearedcategory = true
}

// CategoryCleared reports if the "category" edge to the ExamCategory entity was cleared.
func (m *ExamGroupMutation) CategoryCleared() bool {
	return m.clearedcategory
}

// CategoryID returns the "category" edge ID in the mutation.
func (m *ExamGroupMutation) CategoryID() (id int, exists bool) {
	if m.category != nil {
		return *m.category, true
	}
	return
}

// CategoryIDs returns the "category" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CategoryID instead. It exists only for internal usage by the builders.
func (m *ExamGroupMutation) CategoryIDs() (ids []int) {
	if id := m.category; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCategory resets all changes to the "category" edge.
func (m *ExamGroupMutation) ResetCategory() {
	m.category = nil
	m.clearedcategory = false
}

// Where appends a list predicates to the ExamGroupMutation builder.
func (m *ExamGroupMutation) Where(ps ...predicate.ExamGroup) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ExamGroupMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ExamGroupMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ExamGroup, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ExamGroupMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ExamGroupMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ExamGroup).
func (m *ExamGroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ExamGroupMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, examgroup.FieldName)
	}
	if m.description != nil {
		fields = append(fields, examgroup.FieldDescription)
	}
	if m.is_active != nil {
		fields = append(fields, examgroup.FieldIsActive)
	}
	if m.logo_url != nil {
		fields = append(fields, examgroup.FieldLogoURL)
	}
	if m.created_at != nil {
		fields = append(fields, examgroup.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, examgroup.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ExamGroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case examgroup.FieldName:
		return m.Name()
	case examgroup.FieldDescription:
		return m.Description()
	case examgroup.FieldIsActive:
		return m.IsActive()
	case examgroup.FieldLogoURL:
		return m.LogoURL()
	case examgroup.FieldCreatedAt:
		return m.CreatedAt()
	case examgroup.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ExamGroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case examgroup.FieldName:
		return m.OldName(ctx)
	case examgroup.FieldDescription:
		return m.OldDescription(ctx)
	case examgroup.FieldIsActive:
		return m.OldIsActive(ctx)
	case examgroup.FieldLogoURL:
		return m.OldLogoURL(ctx)
	case examgroup.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case examgroup.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ExamGroup field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExamGroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case examgroup.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case examgroup.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case examgroup.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case examgroup.FieldLogoURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogoURL(v)
		return nil
	case examgroup.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case examgroup.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ExamGroup field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ExamGroupMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ExamGroupMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExamGroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ExamGroup numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ExamGroupMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(examgroup.FieldLogoURL) {
		fields = append(fields, examgroup.FieldLogoURL)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ExamGroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExamGroupMutation) ClearField(name string) error {
	switch name {
	case examgroup.FieldLogoURL:
		m.ClearLogoURL()
		return nil
	}
	return fmt.Errorf("unknown ExamGroup nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ExamGroupMutation) ResetField(name string) error {
	switch name {
	case examgroup.FieldName:
		m.ResetName()
		return nil
	case examgroup.FieldDescription:
		m.ResetDescription()
		return nil
	case examgroup.FieldIsActive:
		m.ResetIsActive()
		return nil
	case examgroup.FieldLogoURL:
		m.ResetLogoURL()
		return nil
	case examgroup.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case examgroup.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown ExamGroup field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ExamGroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.category != nil {
		edges = append(edges, examgroup.EdgeCategory)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ExamGroupMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case examgroup.EdgeCategory:
		if id := m.category; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ExamGroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ExamGroupMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ExamGroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcategory {
		edges = append(edges, examgroup.EdgeCategory)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ExamGroupMutation) EdgeCleared(name string) bool {
	switch name {
	case examgroup.EdgeCategory:
		return m.clearedcategory
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ExamGroupMutation) ClearEdge(name string) error {
	switch name {
	case examgroup.EdgeCategory:
		m.ClearCategory()
		return nil
	}
	return fmt.Errorf("unknown ExamGroup unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ExamGroupMutation) ResetEdge(name string) error {
	switch name {
	case examgroup.EdgeCategory:
		m.ResetCategory()
		return nil
	}
	return fmt.Errorf("unknown ExamGroup edge %s", name)
}

// ExamSettingMutation represents an operation that mutates the ExamSetting nodes in the graph.
type ExamSettingMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	number_of_questions    *int
	addnumber_of_questions *int
	duration_seconds       *int
	addduration_seconds    *int
	negative_marking       *float64
	addnegative_marking    *float64
	ai_prompt              *string
	other_details          *map[string]interface{}
	max_attempts           *int
	addmax_attempts        *int
	evaluation_ai_prompt   *string
	created_at             *time.Time
	updated_at             *time.Time
	clearedFields          map[string]struct{}
	exam                   *int
	clearedexam            bool
	done                   bool
	oldValue               func(context.Context) (*ExamSetting, error)
	predicates             []predicate.ExamSetting
}

var _ ent.Mutation = (*ExamSettingMutation)(nil)

// examsettingOption allows management of the mutation configuration using functional options.
type examsettingOption func(*ExamSettingMutation)

// newExamSettingMutation creates new mutation for the ExamSetting entity.
func newExamSettingMutation(c config, op Op, opts ...examsettingOption) *ExamSettingMutation {
	m := &ExamSettingMutation{
		config:        c,
		op:            op,
		typ:           TypeExamSetting,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExamSettingID sets the ID field of the mutation.
func withExamSettingID(id int) examsettingOption {
	return func(m *ExamSettingMutation) {
		var (
			err   error
			once  sync.Once
			value *ExamSetting
		)
		m.oldValue = func(ctx context.Context) (*ExamSetting, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ExamSetting.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withExamSetting sets the old ExamSetting of the mutation.
func withExamSetting(node *ExamSetting) examsettingOption {
	return func(m *ExamSettingMutation) {
		m.oldValue = func(context.Context) (*ExamSetting, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExamSettingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExamSettingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ExamSettingMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ExamSettingMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ExamSetting.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetNumberOfQuestions sets the "number_of_questions" field.
func (m *ExamSettingMutation) SetNumberOfQuestions(i int) {
	m.number_of_questions = &i
	m.addnumber_of_questions = nil
}

// NumberOfQuestions returns the value of the "number_of_questions" field in the mutation.
func (m *ExamSettingMutation) NumberOfQuestions() (r int, exists bool) {
	v := m.number_of_questions
	if v == nil {
		return
	}
	return *v, true
}

// OldNumberOfQuestions returns the old "number_of_questions" field's value of the ExamSetting entity.
// If the ExamSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamSettingMutation) OldNumberOfQuestions(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumberOfQuestions is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumberOfQuestions requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumberOfQuestions: %w", err)
	}
	return oldValue.NumberOfQuestions, nil
}

// AddNumberOfQuestions adds i to the "number_of_questions" field.
func (m *ExamSettingMutation) AddNumberOfQuestions(i int) {
	if m.addnumber_of_questions != nil {
		*m.addnumber_of_questions += i
	} else {
		m.addnumber_of_questions = &i
	}
}

// AddedNumberOfQuestions returns the value that was added to the "number_of_questions" field in this mutation.
func (m *ExamSettingMutation) AddedNumberOfQuestions() (r int, exists bool) {
	v := m.addnumber_of_questions
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumberOfQuestions resets all changes to the "number_of_questions" field.
func (m *ExamSettingMutation) ResetNumberOfQuestions() {
	m.number_of_questions = nil
	m.addnumber_of_questions = nil
}

// SetDurationSeconds sets the "duration_seconds" field.
func (m *ExamSettingMutation) SetDurationSeconds(i int) {
	m.duration_seconds = &i
	m.addduration_seconds = nil
}

// DurationSeconds returns the value of the "duration_seconds" field in the mutation.
func (m *ExamSettingMutation) DurationSeconds() (r int, exists bool) {
	v := m.duration_seconds
	if v == nil {
		return
	}
	return *v, true
}

// OldDurationSeconds returns the old "duration_seconds" field's value of the ExamSetting entity.
// If the ExamSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamSettingMutation) OldDurationSeconds(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDurationSeconds is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDurationSeconds requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDurationSeconds: %w", err)
	}
	return oldValue.DurationSeconds, nil
}

// AddDurationSeconds adds i to the "duration_seconds" field.
func (m *ExamSettingMutation) AddDurationSeconds(i int) {
	if m.addduration_seconds != nil {
		*m.addduration_seconds += i
	} else {
		m.addduration_seconds = &i
	}
}

// AddedDurationSeconds returns the value that was added to the "duration_seconds" field in this mutation.
func (m *ExamSettingMutation) AddedDurationSeconds() (r int, exists bool) {
	v := m.addduration_seconds
	if v == nil {
		return
	}
	return *v, true
}

// ResetDurationSeconds resets all changes to the "duration_seconds" field.
func (m *ExamSettingMutation) ResetDurationSeconds() {
	m.duration_seconds = nil
	m.addduration_seconds = nil
}

// SetNegativeMarking sets the "negative_marking" field.
func (m *ExamSettingMutation) SetNegativeMarking(f float64) {
	m.negative_marking = &f
	m.addnegative_marking = nil
}

// NegativeMarking returns the value of the "negative_marking" field in the mutation.
func (m *ExamSettingMutation) NegativeMarking() (r float64, exists bool) {
	v := m.negative_marking
	if v == nil {
		return
	}
	return *v, true
}

// OldNegativeMarking returns the old "negative_marking" field's value of the ExamSetting entity.
// If the ExamSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamSettingMutation) OldNegativeMarking(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNegativeMarking is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNegativeMarking requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNegativeMarking: %w", err)
	}
	return oldValue.NegativeMarking, nil
}

// AddNegativeMarking adds f to the "negative_marking" field.
func (m *ExamSettingMutation) AddNegativeMarking(f float64) {
	if m.addnegative_marking != nil {
		*m.addnegative_marking += f
	} else {
		m.addnegative_marking = &f
	}
}

// AddedNegativeMarking returns the value that was added to the "negative_marking" field in this mutation.
func (m *ExamSettingMutation) AddedNegativeMarking() (r float64, exists bool) {
	v := m.addnegative_marking
	if v == nil {
		return
	}
	return *v, true
}

// ClearNegativeMarking clears the value of the "negative_marking" field.
func (m *ExamSettingMutation) ClearNegativeMarking() {
	m.negative_marking = nil
	m.addnegative_marking = nil
	m.clearedFields[examsetting.FieldNegativeMarking] = struct{}{}
}

// NegativeMarkingCleared returns if the "negative_marking" field was cleared in this mutation.
func (m *ExamSettingMutation) NegativeMarkingCleared() bool {
	_, ok := m.clearedFields[examsetting.FieldNegativeMarking]
	return ok
}

// ResetNegativeMarking resets all changes to the "negative_marking" field.
func (m *ExamSettingMutation) ResetNegativeMarking() {
	m.negative_marking = nil
	m.addnegative_marking = nil
	delete(m.clearedFields, examsetting.FieldNegativeMarking)
}

// SetAiPrompt sets the "ai_prompt" field.
func (m *ExamSettingMutation) SetAiPrompt(s string) {
	m.ai_prompt = &s
}

// AiPrompt returns the value of the "ai_prompt" field in the mutation.
func (m *ExamSettingMutation) AiPrompt() (r string, exists bool) {
	v := m.ai_prompt
	if v == nil {
		return
	}
	return *v, true
}

// OldAiPrompt returns the old "ai_prompt" field's value of the ExamSetting entity.
// If the ExamSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamSettingMutation) OldAiPrompt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAiPrompt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAiPrompt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAiPrompt: %w", err)
	}
	return oldValue.AiPrompt, nil
}

// ClearAiPrompt clears the value of the "ai_prompt" field.
func (m *ExamSettingMutation) ClearAiPrompt() {
	m.ai_prompt = nil
	m.clearedFields[examsetting.FieldAiPrompt] = struct{}{}
}

// AiPromptCleared returns if the "ai_prompt" field was cleared in this mutation.
func (m *ExamSettingMutation) AiPromptCleared() bool {
	_, ok := m.clearedFields[examsetting.FieldAiPrompt]
	return ok
}

// ResetAiPrompt resets all changes to the "ai_prompt" field.
func (m *ExamSettingMutation) ResetAiPrompt() {
	m.ai_prompt = nil
	delete(m.clearedFields, examsetting.FieldAiPrompt)
}

// SetOtherDetails sets the "other_details" field.
func (m *ExamSettingMutation) SetOtherDetails(value map[string]interface{}) {
	m.other_details = &value
}

// OtherDetails returns the value of the "other_details" field in the mutation.
func (m *ExamSettingMutation) OtherDetails() (r map[string]interface{}, exists bool) {
	v := m.other_details
	if v == nil {
		return
	}
	return *v, true
}

// OldOtherDetails returns the old "other_details" field's value of the ExamSetting entity.
// If the ExamSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamSettingMutation) OldOtherDetails(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOtherDetails is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOtherDetails requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOtherDetails: %w", err)
	}
	return oldValue.OtherDetails, nil
}

// ClearOtherDetails clears the value of the "other_details" field.
func (m *ExamSettingMutation) ClearOtherDetails() {
	m.other_details = nil
	m.clearedFields[examsetting.FieldOtherDetails] = struct{}{}
}

// OtherDetailsCleared returns if the "other_details" field was cleared in this mutation.
func (m *ExamSettingMutation) OtherDetailsCleared() bool {
	_, ok := m.clearedFields[examsetting.FieldOtherDetails]
	return ok
}

// ResetOtherDetails resets all changes to the "other_details" field.
func (m *ExamSettingMutation) ResetOtherDetails() {
	m.other_details = nil
	delete(m.clearedFields, examsetting.FieldOtherDetails)
}

// SetMaxAttempts sets the "max_attempts" field.
func (m *ExamSettingMutation) SetMaxAttempts(i int) {
	m.max_attempts = &i
	m.addmax_attempts = nil
}

// MaxAttempts returns the value of the "max_attempts" field in the mutation.
func (m *ExamSettingMutation) MaxAttempts() (r int, exists bool) {
	v := m.max_attempts
	if v == nil {
		return
	}
	return *v, true
}

// OldMaxAttempts returns the old "max_attempts" field's value of the ExamSetting entity.
// If the ExamSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamSettingMutation) OldMaxAttempts(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMaxAttempts is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMaxAttempts requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaxAttempts: %w", err)
	}
	return oldValue.MaxAttempts, nil
}

// AddMaxAttempts adds i to the "max_attempts" field.
func (m *ExamSettingMutation) AddMaxAttempts(i int) {
	if m.addmax_attempts != nil {
		*m.addmax_attempts += i
	} else {
		m.addmax_attempts = &i
	}
}

// AddedMaxAttempts returns the value that was added to the "max_attempts" field in this mutation.
func (m *ExamSettingMutation) AddedMaxAttempts() (r int, exists bool) {
	v := m.addmax_attempts
	if v == nil {
		return
	}
	return *v, true
}

// ResetMaxAttempts resets all changes to the "max_attempts" field.
func (m *ExamSettingMutation) ResetMaxAttempts() {
	m.max_attempts = nil
	m.addmax_attempts = nil
}

// SetEvaluationAiPrompt sets the "evaluation_ai_prompt" field.
func (m *ExamSettingMutation) SetEvaluationAiPrompt(s string) {
	m.evaluation_ai_prompt = &s
}

// EvaluationAiPrompt returns the value of the "evaluation_ai_prompt" field in the mutation.
func (m *ExamSettingMutation) EvaluationAiPrompt() (r string, exists bool) {
	v := m.evaluation_ai_prompt
	if v == nil {
		return
	}
	return *v, true
}

// OldEvaluationAiPrompt returns the old "evaluation_ai_prompt" field's value of the ExamSetting entity.
// If the ExamSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamSettingMutation) OldEvaluationAiPrompt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEvaluationAiPrompt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEvaluationAiPrompt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEvaluationAiPrompt: %w", err)
	}
	return oldValue.EvaluationAiPrompt, nil
}

// ClearEvaluationAiPrompt clears the value of the "evaluation_ai_prompt" field.
func (m *ExamSettingMutation) ClearEvaluationAiPrompt() {
	m.evaluation_ai_prompt = nil
	m.clearedFields[examsetting.FieldEvaluationAiPrompt] = struct{}{}
}

// EvaluationAiPromptCleared returns if the "evaluation_ai_prompt" field was cleared in this mutation.
func (m *ExamSettingMutation) EvaluationAiPromptCleared() bool {
	_, ok := m.clearedFields[examsetting.FieldEvaluationAiPrompt]
	return ok
}

// ResetEvaluationAiPrompt resets all changes to the "evaluation_ai_prompt" field.
func (m *ExamSettingMutation) ResetEvaluationAiPrompt() {
	m.evaluation_ai_prompt = nil
	delete(m.clearedFields, examsetting.FieldEvaluationAiPrompt)
}

// SetCreatedAt sets the "created_at" field.
func (m *ExamSettingMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ExamSettingMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ExamSetting entity.
// If the ExamSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamSettingMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ExamSettingMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ExamSettingMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ExamSettingMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ExamSetting entity.
// If the ExamSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamSettingMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ExamSettingMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetExamID sets the "exam" edge to the Exam entity by id.
func (m *ExamSettingMutation) SetExamID(id int) {
	m.exam = &id
}

// ClearExam clears the "exam" edge to the Exam entity.
func (m *ExamSettingMutation) ClearExam() {
	m.clearedexam = true
}

// ExamCleared reports if the "exam" edge to the Exam entity was cleared.
func (m *ExamSettingMutation) ExamCleared() bool {
	return m.clearedexam
}

// ExamID returns the "exam" edge ID in the mutation.
func (m *ExamSettingMutation) ExamID() (id int, exists bool) {
	if m.exam != nil {
		return *m.exam, true
	}
	return
}

// ExamIDs returns the "exam" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ExamID instead. It exists only for internal usage by the builders.
func (m *ExamSettingMutation) ExamIDs() (ids []int) {
	if id := m.exam; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetExam resets all changes to the "exam" edge.
func (m *ExamSettingMutation) ResetExam() {
	m.exam = nil
	m.clearedexam = false
}

// Where appends a list predicates to the ExamSettingMutation builder.
func (m *ExamSettingMutation) Where(ps ...predicate.ExamSetting) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ExamSettingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ExamSettingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ExamSetting, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ExamSettingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ExamSettingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ExamSetting).
func (m *ExamSettingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ExamSettingMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.number_of_questions != nil {
		fields = append(fields, examsetting.FieldNumberOfQuestions)
	}
	if m.duration_seconds != nil {
		fields = append(fields, examsetting.FieldDurationSeconds)
	}
	if m.negative_marking != nil {
		fields = append(fields, examsetting.FieldNegativeMarking)
	}
	if m.ai_prompt != nil {
		fields = append(fields, examsetting.FieldAiPrompt)
	}
	if m.other_details != nil {
		fields = append(fields, examsetting.FieldOtherDetails)
	}
	if m.max_attempts != nil {
		fields = append(fields, examsetting.FieldMaxAttempts)
	}
	if m.evaluation_ai_prompt != nil {
		fields = append(fields, examsetting.FieldEvaluationAiPrompt)
	}
	if m.created_at != nil {
		fields = append(fields, examsetting.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, examsetting.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ExamSettingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case examsetting.FieldNumberOfQuestions:
		return m.NumberOfQuestions()
	case examsetting.FieldDurationSeconds:
		return m.DurationSeconds()
	case examsetting.FieldNegativeMarking:
		return m.NegativeMarking()
	case examsetting.FieldAiPrompt:
		return m.AiPrompt()
	case examsetting.FieldOtherDetails:
		return m.OtherDetails()
	case examsetting.FieldMaxAttempts:
		return m.MaxAttempts()
	case examsetting.FieldEvaluationAiPrompt:
		return m.EvaluationAiPrompt()
	case examsetting.FieldCreatedAt:
		return m.CreatedAt()
	case examsetting.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ExamSettingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case examsetting.FieldNumberOfQuestions:
		return m.OldNumberOfQuestions(ctx)
	case examsetting.FieldDurationSeconds:
		return m.OldDurationSeconds(ctx)
	case examsetting.FieldNegativeMarking:
		return m.OldNegativeMarking(ctx)
	case examsetting.FieldAiPrompt:
		return m.OldAiPrompt(ctx)
	case examsetting.FieldOtherDetails:
		return m.OldOtherDetails(ctx)
	case examsetting.FieldMaxAttempts:
		return m.OldMaxAttempts(ctx)
	case examsetting.FieldEvaluationAiPrompt:
		return m.OldEvaluationAiPrompt(ctx)
	case examsetting.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case examsetting.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ExamSetting field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExamSettingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case examsetting.FieldNumberOfQuestions:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumberOfQuestions(v)
		return nil
	case examsetting.FieldDurationSeconds:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDurationSeconds(v)
		return nil
	case examsetting.FieldNegativeMarking:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNegativeMarking(v)
		return nil
	case examsetting.FieldAiPrompt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAiPrompt(v)
		return nil
	case examsetting.FieldOtherDetails:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOtherDetails(v)
		return nil
	case examsetting.FieldMaxAttempts:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaxAttempts(v)
		return nil
	case examsetting.FieldEvaluationAiPrompt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEvaluationAiPrompt(v)
		return nil
	case examsetting.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case examsetting.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ExamSetting field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ExamSettingMutation) AddedFields() []string {
	var fields []string
	if m.addnumber_of_questions != nil {
		fields = append(fields, examsetting.FieldNumberOfQuestions)
	}
	if m.addduration_seconds != nil {
		fields = append(fields, examsetting.FieldDurationSeconds)
	}
	if m.addnegative_marking != nil {
		fields = append(fields, examsetting.FieldNegativeMarking)
	}
	if m.addmax_attempts != nil {
		fields = append(fields, examsetting.FieldMaxAttempts)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ExamSettingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case examsetting.FieldNumberOfQuestions:
		return m.AddedNumberOfQuestions()
	case examsetting.FieldDurationSeconds:
		return m.AddedDurationSeconds()
	case examsetting.FieldNegativeMarking:
		return m.AddedNegativeMarking()
	case examsetting.FieldMaxAttempts:
		return m.AddedMaxAttempts()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExamSettingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case examsetting.FieldNumberOfQuestions:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumberOfQuestions(v)
		return nil
	case examsetting.FieldDurationSeconds:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDurationSeconds(v)
		return nil
	case examsetting.FieldNegativeMarking:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNegativeMarking(v)
		return nil
	case examsetting.FieldMaxAttempts:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMaxAttempts(v)
		return nil
	}
	return fmt.Errorf("unknown ExamSetting numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ExamSettingMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(examsetting.FieldNegativeMarking) {
		fields = append(fields, examsetting.FieldNegativeMarking)
	}
	if m.FieldCleared(examsetting.FieldAiPrompt) {
		fields = append(fields, examsetting.FieldAiPrompt)
	}
	if m.FieldCleared(examsetting.FieldOtherDetails) {
		fields = append(fields, examsetting.FieldOtherDetails)
	}
	if m.FieldCleared(examsetting.FieldEvaluationAiPrompt) {
		fields = append(fields, examsetting.FieldEvaluationAiPrompt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ExamSettingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExamSettingMutation) ClearField(name string) error {
	switch name {
	case examsetting.FieldNegativeMarking:
		m.ClearNegativeMarking()
		return nil
	case examsetting.FieldAiPrompt:
		m.ClearAiPrompt()
		return nil
	case examsetting.FieldOtherDetails:
		m.ClearOtherDetails()
		return nil
	case examsetting.FieldEvaluationAiPrompt:
		m.ClearEvaluationAiPrompt()
		return nil
	}
	return fmt.Errorf("unknown ExamSetting nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ExamSettingMutation) ResetField(name string) error {
	switch name {
	case examsetting.FieldNumberOfQuestions:
		m.ResetNumberOfQuestions()
		return nil
	case examsetting.FieldDurationSeconds:
		m.ResetDurationSeconds()
		return nil
	case examsetting.FieldNegativeMarking:
		m.ResetNegativeMarking()
		return nil
	case examsetting.FieldAiPrompt:
		m.ResetAiPrompt()
		return nil
	case examsetting.FieldOtherDetails:
		m.ResetOtherDetails()
		return nil
	case examsetting.FieldMaxAttempts:
		m.ResetMaxAttempts()
		return nil
	case examsetting.FieldEvaluationAiPrompt:
		m.ResetEvaluationAiPrompt()
		return nil
	case examsetting.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case examsetting.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown ExamSetting field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ExamSettingMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.exam != nil {
		edges = append(edges, examsetting.EdgeExam)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ExamSettingMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case examsetting.EdgeExam:
		if id := m.exam; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ExamSettingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ExamSettingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ExamSettingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedexam {
		edges = append(edges, examsetting.EdgeExam)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ExamSettingMutation) EdgeCleared(name string) bool {
	switch name {
	case examsetting.EdgeExam:
		return m.clearedexam
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ExamSettingMutation) ClearEdge(name string) error {
	switch name {
	case examsetting.EdgeExam:
		m.ClearExam()
		return nil
	}
	return fmt.Errorf("unknown ExamSetting unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ExamSettingMutation) ResetEdge(name string) error {
	switch name {
	case examsetting.EdgeExam:
		m.ResetExam()
		return nil
	}
	return fmt.Errorf("unknown ExamSetting edge %s", name)
}

// GeneratedExamMutation represents an operation that mutates the GeneratedExam nodes in the graph.
type GeneratedExamMutation struct {
	config
	op              Op
	typ             string
	id              *int
	is_active       *bool
	raw_exam_data   *map[string]interface{}
	is_open         *bool
	created_at      *time.Time
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	exam            *int
	clearedexam     bool
	attempts        map[int]struct{}
	removedattempts map[int]struct{}
	clearedattempts bool
	done            bool
	oldValue        func(context.Context) (*GeneratedExam, error)
	predicates      []predicate.GeneratedExam
}

var _ ent.Mutation = (*GeneratedExamMutation)(nil)

// generatedexamOption allows management of the mutation configuration using functional options.
type generatedexamOption func(*GeneratedExamMutation)

// newGeneratedExamMutation creates new mutation for the GeneratedExam entity.
func newGeneratedExamMutation(c config, op Op, opts ...generatedexamOption) *GeneratedExamMutation {
	m := &GeneratedExamMutation{
		config:        c,
		op:            op,
		typ:           TypeGeneratedExam,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGeneratedExamID sets the ID field of the mutation.
func withGeneratedExamID(id int) generatedexamOption {
	return func(m *GeneratedExamMutation) {
		var (
			err   error
			once  sync.Once
			value *GeneratedExam
		)
		m.oldValue = func(ctx context.Context) (*GeneratedExam, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GeneratedExam.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGeneratedExam sets the old GeneratedExam of the mutation.
func withGeneratedExam(node *GeneratedExam) generatedexamOption {
	return func(m *GeneratedExamMutation) {
		m.oldValue = func(context.Context) (*GeneratedExam, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GeneratedExamMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GeneratedExamMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GeneratedExamMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GeneratedExamMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GeneratedExam.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIsActive sets the "is_active" field.
func (m *GeneratedExamMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *GeneratedExamMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the GeneratedExam entity.
// If the GeneratedExam object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GeneratedExamMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *GeneratedExamMutation) ResetIsActive() {
	m.is_active = nil
}

// SetRawExamData sets the "raw_exam_data" field.
func (m *GeneratedExamMutation) SetRawExamData(value map[string]interface{}) {
	m.raw_exam_data = &value
}

// RawExamData returns the value of the "raw_exam_data" field in the mutation.
func (m *GeneratedExamMutation) RawExamData() (r map[string]interface{}, exists bool) {
	v := m.raw_exam_data
	if v == nil {
		return
	}
	return *v, true
}

// OldRawExamData returns the old "raw_exam_data" field's value of the GeneratedExam entity.
// If the GeneratedExam object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GeneratedExamMutation) OldRawExamData(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRawExamData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRawExamData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRawExamData: %w", err)
	}
	return oldValue.RawExamData, nil
}

// ClearRawExamData clears the value of the "raw_exam_data" field.
func (m *GeneratedExamMutation) ClearRawExamData() {
	m.raw_exam_data = nil
	m.clearedFields[generatedexam.FieldRawExamData] = struct{}{}
}

// RawExamDataCleared returns if the "raw_exam_data" field was cleared in this mutation.
func (m *GeneratedExamMutation) RawExamDataCleared() bool {
	_, ok := m.clearedFields[generatedexam.FieldRawExamData]
	return ok
}

// ResetRawExamData resets all changes to the "raw_exam_data" field.
func (m *GeneratedExamMutation) ResetRawExamData() {
	m.raw_exam_data = nil
	delete(m.clearedFields, generatedexam.FieldRawExamData)
}

// SetIsOpen sets the "is_open" field.
func (m *GeneratedExamMutation) SetIsOpen(b bool) {
	m.is_open = &b
}

// IsOpen returns the value of the "is_open" field in the mutation.
func (m *GeneratedExamMutation) IsOpen() (r bool, exists bool) {
	v := m.is_open
	if v == nil {
		return
	}
	return *v, true
}

// OldIsOpen returns the old "is_open" field's value of the GeneratedExam entity.
// If the GeneratedExam object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GeneratedExamMutation) OldIsOpen(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsOpen is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsOpen requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsOpen: %w", err)
	}
	return oldValue.IsOpen, nil
}

// ResetIsOpen resets all changes to the "is_open" field.
func (m *GeneratedExamMutation) ResetIsOpen() {
	m.is_open = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *GeneratedExamMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GeneratedExamMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the GeneratedExam entity.
// If the GeneratedExam object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GeneratedExamMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GeneratedExamMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *GeneratedExamMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *GeneratedExamMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the GeneratedExam entity.
// If the GeneratedExam object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GeneratedExamMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *GeneratedExamMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetExamID sets the "exam" edge to the Exam entity by id.
func (m *GeneratedExamMutation) SetExamID(id int) {
	m.exam = &id
}

// ClearExam clears the "exam" edge to the Exam entity.
func (m *GeneratedExamMutation) ClearExam() {
	m.clearedexam = true
}

// ExamCleared reports if the "exam" edge to the Exam entity was cleared.
func (m *GeneratedExamMutation) ExamCleared() bool {
	return m.clearedexam
}

// ExamID returns the "exam" edge ID in the mutation.
func (m *GeneratedExamMutation) ExamID() (id int, exists bool) {
	if m.exam != nil {
		return *m.exam, true
	}
	return
}

// ExamIDs returns the "exam" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ExamID instead. It exists only for internal usage by the builders.
func (m *GeneratedExamMutation) ExamIDs() (ids []int) {
	if id := m.exam; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetExam resets all changes to the "exam" edge.
func (m *GeneratedExamMutation) ResetExam() {
	m.exam = nil
	m.clearedexam = false
}

// AddAttemptIDs adds the "attempts" edge to the ExamAttempt entity by ids.
func (m *GeneratedExamMutation) AddAttemptIDs(ids ...int) {
	if m.attempts == nil {
		m.attempts = make(map[int]struct{})
	}
	for i := range ids {
		m.attempts[ids[i]] = struct{}{}
	}
}

// ClearAttempts clears the "attempts" edge to the ExamAttempt entity.
func (m *GeneratedExamMutation) ClearAttempts() {
	m.clearedattempts = true
}

// AttemptsCleared reports if the "attempts" edge to the ExamAttempt entity was cleared.
func (m *GeneratedExamMutation) AttemptsCleared() bool {
	return m.clearedattempts
}

// RemoveAttemptIDs removes the "attempts" edge to the ExamAttempt entity by IDs.
func (m *GeneratedExamMutation) RemoveAttemptIDs(ids ...int) {
	if m.removedattempts == nil {
		m.removedattempts = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.attempts, ids[i])
		m.removedattempts[ids[i]] = struct{}{}
	}
}

// RemovedAttempts returns the removed IDs of the "attempts" edge to the ExamAttempt entity.
func (m *GeneratedExamMutation) RemovedAttemptsIDs() (ids []int) {
	for id := range m.removedattempts {
		ids = append(ids, id)
	}
	return
}

// AttemptsIDs returns the "attempts" edge IDs in the mutation.
func (m *GeneratedExamMutation) AttemptsIDs() (ids []int) {
	for id := range m.attempts {
		ids = append(ids, id)
	}
	return
}

// ResetAttempts resets all changes to the "attempts" edge.
func (m *GeneratedExamMutation) ResetAttempts() {
	m.attempts = nil
	m.clearedattempts = false
	m.removedattempts = nil
}

// Where appends a list predicates to the GeneratedExamMutation builder.
func (m *GeneratedExamMutation) Where(ps ...predicate.GeneratedExam) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GeneratedExamMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GeneratedExamMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GeneratedExam, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GeneratedExamMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GeneratedExamMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GeneratedExam).
func (m *GeneratedExamMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GeneratedExamMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.is_active != nil {
		fields = append(fields, generatedexam.FieldIsActive)
	}
	if m.raw_exam_data != nil {
		fields = append(fields, generatedexam.FieldRawExamData)
	}
	if m.is_open != nil {
		fields = append(fields, generatedexam.FieldIsOpen)
	}
	if m.created_at != nil {
		fields = append(fields, generatedexam.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, generatedexam.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GeneratedExamMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case generatedexam.FieldIsActive:
		return m.IsActive()
	case generatedexam.FieldRawExamData:
		return m.RawExamData()
	case generatedexam.FieldIsOpen:
		return m.IsOpen()
	case generatedexam.FieldCreatedAt:
		return m.CreatedAt()
	case generatedexam.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GeneratedExamMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case generatedexam.FieldIsActive:
		return m.OldIsActive(ctx)
	case generatedexam.FieldRawExamData:
		return m.OldRawExamData(ctx)
	case generatedexam.FieldIsOpen:
		return m.OldIsOpen(ctx)
	case generatedexam.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case generatedexam.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown GeneratedExam field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GeneratedExamMutation) SetField(name string, value ent.Value) error {
	switch name {
	case generatedexam.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case generatedexam.FieldRawExamData:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRawExamData(v)
		return nil
	case generatedexam.FieldIsOpen:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsOpen(v)
		return nil
	case generatedexam.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case generatedexam.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown GeneratedExam field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GeneratedExamMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GeneratedExamMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GeneratedExamMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown GeneratedExam numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GeneratedExamMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(generatedexam.FieldRawExamData) {
		fields = append(fields, generatedexam.FieldRawExamData)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GeneratedExamMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GeneratedExamMutation) ClearField(name string) error {
	switch name {
	case generatedexam.FieldRawExamData:
		m.ClearRawExamData()
		return nil
	}
	return fmt.Errorf("unknown GeneratedExam nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GeneratedExamMutation) ResetField(name string) error {
	switch name {
	case generatedexam.FieldIsActive:
		m.ResetIsActive()
		return nil
	case generatedexam.FieldRawExamData:
		m.ResetRawExamData()
		return nil
	case generatedexam.FieldIsOpen:
		m.ResetIsOpen()
		return nil
	case generatedexam.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case generatedexam.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown GeneratedExam field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GeneratedExamMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.exam != nil {
		edges = append(edges, generatedexam.EdgeExam)
	}
	if m.attempts != nil {
		edges = append(edges, generatedexam.EdgeAttempts)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GeneratedExamMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case generatedexam.EdgeExam:
		if id := m.exam; id != nil {
			return []ent.Value{*id}
		}
	case generatedexam.EdgeAttempts:
		ids := make([]ent.Value, 0, len(m.attempts))
		for id := range m.attempts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GeneratedExamMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedattempts != nil {
		edges = append(edges, generatedexam.EdgeAttempts)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GeneratedExamMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case generatedexam.EdgeAttempts:
		ids := make([]ent.Value, 0, len(m.removedattempts))
		for id := range m.removedattempts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GeneratedExamMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedexam {
		edges = append(edges, generatedexam.EdgeExam)
	}
	if m.clearedattempts {
		edges = append(edges, generatedexam.EdgeAttempts)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GeneratedExamMutation) EdgeCleared(name string) bool {
	switch name {
	case generatedexam.EdgeExam:
		return m.clearedexam
	case generatedexam.EdgeAttempts:
		return m.clearedattempts
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GeneratedExamMutation) ClearEdge(name string) error {
	switch name {
	case generatedexam.EdgeExam:
		m.ClearExam()
		return nil
	}
	return fmt.Errorf("unknown GeneratedExam unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GeneratedExamMutation) ResetEdge(name string) error {
	switch name {
	case generatedexam.EdgeExam:
		m.ResetExam()
		return nil
	case generatedexam.EdgeAttempts:
		m.ResetAttempts()
		return nil
	}
	return fmt.Errorf("unknown GeneratedExam edge %s", name)
}

// PaymentMutation represents an operation that mutates the Payment nodes in the graph.
type PaymentMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	amount              *float64
	addamount           *float64
	payment_date        *time.Time
	status              *payment.Status
	payment_method      *string
	provider_payment_id *string
	provider_invoice_id *string
	created_at          *time.Time
	updated_at          *time.Time
	clearedFields       map[string]struct{}
	user                *uuid.UUID
	cleareduser         bool
	subscription        *int
	clearedsubscription bool
	done                bool
	oldValue            func(context.Context) (*Payment, error)
	predicates          []predicate.Payment
}

var _ ent.Mutation = (*PaymentMutation)(nil)

// paymentOption allows management of the mutation configuration using functional options.
type paymentOption func(*PaymentMutation)

// newPaymentMutation creates new mutation for the Payment entity.
func newPaymentMutation(c config, op Op, opts ...paymentOption) *PaymentMutation {
	m := &PaymentMutation{
		config:        c,
		op:            op,
		typ:           TypePayment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPaymentID sets the ID field of the mutation.
func withPaymentID(id int) paymentOption {
	return func(m *PaymentMutation) {
		var (
			err   error
			once  sync.Once
			value *Payment
		)
		m.oldValue = func(ctx context.Context) (*Payment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Payment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPayment sets the old Payment of the mutation.
func withPayment(node *Payment) paymentOption {
	return func(m *PaymentMutation) {
		m.oldValue = func(context.Context) (*Payment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PaymentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PaymentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PaymentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PaymentMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Payment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAmount sets the "amount" field.
func (m *PaymentMutation) SetAmount(f float64) {
	m.amount = &f
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *PaymentMutation) Amount() (r float64, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldAmount(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds f to the "amount" field.
func (m *PaymentMutation) AddAmount(f float64) {
	if m.addamount != nil {
		*m.addamount += f
	} else {
		m.addamount = &f
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *PaymentMutation) AddedAmount() (r float64, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *PaymentMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetPaymentDate sets the "payment_date" field.
func (m *PaymentMutation) SetPaymentDate(t time.Time) {
	m.payment_date = &t
}

// PaymentDate returns the value of the "payment_date" field in the mutation.
func (m *PaymentMutation) PaymentDate() (r time.Time, exists bool) {
	v := m.payment_date
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentDate returns the old "payment_date" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldPaymentDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentDate: %w", err)
	}
	return oldValue.PaymentDate, nil
}

// ResetPaymentDate resets all changes to the "payment_date" field.
func (m *PaymentMutation) ResetPaymentDate() {
	m.payment_date = nil
}

// SetStatus sets the "status" field.
func (m *PaymentMutation) SetStatus(pa payment.Status) {
	m.status = &pa
}

// Status returns the value of the "status" field in the mutation.
func (m *PaymentMutation) Status() (r payment.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldStatus(ctx context.Context) (v payment.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *PaymentMutation) ResetStatus() {
	m.status = nil
}

// SetPaymentMethod sets the "payment_method" field.
func (m *PaymentMutation) SetPaymentMethod(s string) {
	m.payment_method = &s
}

// PaymentMethod returns the value of the "payment_method" field in the mutation.
func (m *PaymentMutation) PaymentMethod() (r string, exists bool) {
	v := m.payment_method
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentMethod returns the old "payment_method" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldPaymentMethod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentMethod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentMethod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentMethod: %w", err)
	}
	return oldValue.PaymentMethod, nil
}

// ResetPaymentMethod resets all changes to the "payment_method" field.
func (m *PaymentMutation) ResetPaymentMethod() {
	m.payment_method = nil
}

// SetProviderPaymentID sets the "provider_payment_id" field.
func (m *PaymentMutation) SetProviderPaymentID(s string) {
	m.provider_payment_id = &s
}

// ProviderPaymentID returns the value of the "provider_payment_id" field in the mutation.
func (m *PaymentMutation) ProviderPaymentID() (r string, exists bool) {
	v := m.provider_payment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProviderPaymentID returns the old "provider_payment_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldProviderPaymentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProviderPaymentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProviderPaymentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProviderPaymentID: %w", err)
	}
	return oldValue.ProviderPaymentID, nil
}

// ResetProviderPaymentID resets all changes to the "provider_payment_id" field.
func (m *PaymentMutation) ResetProviderPaymentID() {
	m.provider_payment_id = nil
}

// SetProviderInvoiceID sets the "provider_invoice_id" field.
func (m *PaymentMutation) SetProviderInvoiceID(s string) {
	m.provider_invoice_id = &s
}

// ProviderInvoiceID returns the value of the "provider_invoice_id" field in the mutation.
func (m *PaymentMutation) ProviderInvoiceID() (r string, exists bool) {
	v := m.provider_invoice_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProviderInvoiceID returns the old "provider_invoice_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldProviderInvoiceID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProviderInvoiceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProviderInvoiceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProviderInvoiceID: %w", err)
	}
	return oldValue.ProviderInvoiceID, nil
}

// ClearProviderInvoiceID clears the value of the "provider_invoice_id" field.
func (m *PaymentMutation) ClearProviderInvoiceID() {
	m.provider_invoice_id = nil
	m.clearedFields[payment.FieldProviderInvoiceID] = struct{}{}
}

// ProviderInvoiceIDCleared returns if the "provider_invoice_id" field was cleared in this mutation.
func (m *PaymentMutation) ProviderInvoiceIDCleared() bool {
	_, ok := m.clearedFields[payment.FieldProviderInvoiceID]
	return ok
}

// ResetProviderInvoiceID resets all changes to the "provider_invoice_id" field.
func (m *PaymentMutation) ResetProviderInvoiceID() {
	m.provider_invoice_id = nil
	delete(m.clearedFields, payment.FieldProviderInvoiceID)
}

// SetCreatedAt sets the "created_at" field.
func (m *PaymentMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PaymentMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PaymentMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PaymentMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PaymentMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PaymentMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *PaymentMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *PaymentMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *PaymentMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *PaymentMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *PaymentMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *PaymentMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetSubscriptionID sets the "subscription" edge to the UserSubscription entity by id.
func (m *PaymentMutation) SetSubscriptionID(id int) {
	m.subscription = &id
}

// ClearSubscription clears the "subscription" edge to the UserSubscription entity.
func (m *PaymentMutation) ClearSubscription() {
	m.clearedsubscription = true
}

// SubscriptionCleared reports if the "subscription" edge to the UserSubscription entity was cleared.
func (m *PaymentMutation) SubscriptionCleared() bool {
	return m.clearedsubscription
}

// SubscriptionID returns the "subscription" edge ID in the mutation.
func (m *PaymentMutation) SubscriptionID() (id int, exists bool) {
	if m.subscription != nil {
		return *m.subscription, true
	}
	return
}

// SubscriptionIDs returns the "subscription" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SubscriptionID instead. It exists only for internal usage by the builders.
func (m *PaymentMutation) SubscriptionIDs() (ids []int) {
	if id := m.subscription; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSubscription resets all changes to the "subscription" edge.
func (m *PaymentMutation) ResetSubscription() {
	m.subscription = nil
	m.clearedsubscription = false
}

// Where appends a list predicates to the PaymentMutation builder.
func (m *PaymentMutation) Where(ps ...predicate.Payment) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PaymentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PaymentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Payment, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PaymentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PaymentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Payment).
func (m *PaymentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PaymentMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.amount != nil {
		fields = append(fields, payment.FieldAmount)
	}
	if m.payment_date != nil {
		fields = append(fields, payment.FieldPaymentDate)
	}
	if m.status != nil {
		fields = append(fields, payment.FieldStatus)
	}
	if m.payment_method != nil {
		fields = append(fields, payment.FieldPaymentMethod)
	}
	if m.provider_payment_id != nil {
		fields = append(fields, payment.FieldProviderPaymentID)
	}
	if m.provider_invoice_id != nil {
		fields = append(fields, payment.FieldProviderInvoiceID)
	}
	if m.created_at != nil {
		fields = append(fields, payment.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, payment.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PaymentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case payment.FieldAmount:
		return m.Amount()
	case payment.FieldPaymentDate:
		return m.PaymentDate()
	case payment.FieldStatus:
		return m.Status()
	case payment.FieldPaymentMethod:
		return m.PaymentMethod()
	case payment.FieldProviderPaymentID:
		return m.ProviderPaymentID()
	case payment.FieldProviderInvoiceID:
		return m.ProviderInvoiceID()
	case payment.FieldCreatedAt:
		return m.CreatedAt()
	case payment.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PaymentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case payment.FieldAmount:
		return m.OldAmount(ctx)
	case payment.FieldPaymentDate:
		return m.OldPaymentDate(ctx)
	case payment.FieldStatus:
		return m.OldStatus(ctx)
	case payment.FieldPaymentMethod:
		return m.OldPaymentMethod(ctx)
	case payment.FieldProviderPaymentID:
		return m.OldProviderPaymentID(ctx)
	case payment.FieldProviderInvoiceID:
		return m.OldProviderInvoiceID(ctx)
	case payment.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case payment.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Payment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PaymentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case payment.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case payment.FieldPaymentDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentDate(v)
		return nil
	case payment.FieldStatus:
		v, ok := value.(payment.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case payment.FieldPaymentMethod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentMethod(v)
		return nil
	case payment.FieldProviderPaymentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProviderPaymentID(v)
		return nil
	case payment.FieldProviderInvoiceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProviderInvoiceID(v)
		return nil
	case payment.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case payment.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Payment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PaymentMutation) AddedFields() []string {
	var fields []string
	if m.addamount != nil {
		fields = append(fields, payment.FieldAmount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PaymentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case payment.FieldAmount:
		return m.AddedAmount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PaymentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case payment.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	}
	return fmt.Errorf("unknown Payment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PaymentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(payment.FieldProviderInvoiceID) {
		fields = append(fields, payment.FieldProviderInvoiceID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PaymentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PaymentMutation) ClearField(name string) error {
	switch name {
	case payment.FieldProviderInvoiceID:
		m.ClearProviderInvoiceID()
		return nil
	}
	return fmt.Errorf("unknown Payment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PaymentMutation) ResetField(name string) error {
	switch name {
	case payment.FieldAmount:
		m.ResetAmount()
		return nil
	case payment.FieldPaymentDate:
		m.ResetPaymentDate()
		return nil
	case payment.FieldStatus:
		m.ResetStatus()
		return nil
	case payment.FieldPaymentMethod:
		m.ResetPaymentMethod()
		return nil
	case payment.FieldProviderPaymentID:
		m.ResetProviderPaymentID()
		return nil
	case payment.FieldProviderInvoiceID:
		m.ResetProviderInvoiceID()
		return nil
	case payment.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case payment.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Payment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PaymentMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, payment.EdgeUser)
	}
	if m.subscription != nil {
		edges = append(edges, payment.EdgeSubscription)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PaymentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case payment.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case payment.EdgeSubscription:
		if id := m.subscription; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PaymentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PaymentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PaymentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, payment.EdgeUser)
	}
	if m.clearedsubscription {
		edges = append(edges, payment.EdgeSubscription)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PaymentMutation) EdgeCleared(name string) bool {
	switch name {
	case payment.EdgeUser:
		return m.cleareduser
	case payment.EdgeSubscription:
		return m.clearedsubscription
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PaymentMutation) ClearEdge(name string) error {
	switch name {
	case payment.EdgeUser:
		m.ClearUser()
		return nil
	case payment.EdgeSubscription:
		m.ClearSubscription()
		return nil
	}
	return fmt.Errorf("unknown Payment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PaymentMutation) ResetEdge(name string) error {
	switch name {
	case payment.EdgeUser:
		m.ResetUser()
		return nil
	case payment.EdgeSubscription:
		m.ResetSubscription()
		return nil
	}
	return fmt.Errorf("unknown Payment edge %s", name)
}

// SubscriptionMutation represents an operation that mutates the Subscription nodes in the graph.
type SubscriptionMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int
	provider_plan_id          *string
	base_price                *float64
	addbase_price             *float64
	final_price               *float64
	addfinal_price            *float64
	price                     *float64
	addprice                  *float64
	duration_in_months        *int
	addduration_in_months     *int
	is_active                 *bool
	name                      *string
	raw_subscription_data     *map[string]interface{}
	created_at                *time.Time
	updated_at                *time.Time
	clearedFields             map[string]struct{}
	exams                     map[int]struct{}
	removedexams              map[int]struct{}
	clearedexams              bool
	user_subscriptions        map[int]struct{}
	removeduser_subscriptions map[int]struct{}
	cleareduser_subscriptions bool
	done                      bool
	oldValue                  func(context.Context) (*Subscription, error)
	predicates                []predicate.Subscription
}

var _ ent.Mutation = (*SubscriptionMutation)(nil)

// subscriptionOption allows management of the mutation configuration using functional options.
type subscriptionOption func(*SubscriptionMutation)

// newSubscriptionMutation creates new mutation for the Subscription entity.
func newSubscriptionMutation(c config, op Op, opts ...subscriptionOption) *SubscriptionMutation {
	m := &SubscriptionMutation{
		config:        c,
		op:            op,
		typ:           TypeSubscription,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSubscriptionID sets the ID field of the mutation.
func withSubscriptionID(id int) subscriptionOption {
	return func(m *SubscriptionMutation) {
		var (
			err   error
			once  sync.Once
			value *Subscription
		)
		m.oldValue = func(ctx context.Context) (*Subscription, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Subscription.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSubscription sets the old Subscription of the mutation.
func withSubscription(node *Subscription) subscriptionOption {
	return func(m *SubscriptionMutation) {
		m.oldValue = func(context.Context) (*Subscription, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SubscriptionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SubscriptionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SubscriptionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SubscriptionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Subscription.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetProviderPlanID sets the "provider_plan_id" field.
func (m *SubscriptionMutation) SetProviderPlanID(s string) {
	m.provider_plan_id = &s
}

// ProviderPlanID returns the value of the "provider_plan_id" field in the mutation.
func (m *SubscriptionMutation) ProviderPlanID() (r string, exists bool) {
	v := m.provider_plan_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProviderPlanID returns the old "provider_plan_id" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldProviderPlanID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProviderPlanID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProviderPlanID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProviderPlanID: %w", err)
	}
	return oldValue.ProviderPlanID, nil
}

// ResetProviderPlanID resets all changes to the "provider_plan_id" field.
func (m *SubscriptionMutation) ResetProviderPlanID() {
	m.provider_plan_id = nil
}

// SetBasePrice sets the "base_price" field.
func (m *SubscriptionMutation) SetBasePrice(f float64) {
	m.base_price = &f
	m.addbase_price = nil
}

// BasePrice returns the value of the "base_price" field in the mutation.
func (m *SubscriptionMutation) BasePrice() (r float64, exists bool) {
	v := m.base_price
	if v == nil {
		return
	}
	return *v, true
}

// OldBasePrice returns the old "base_price" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldBasePrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBasePrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBasePrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBasePrice: %w", err)
	}
	return oldValue.BasePrice, nil
}

// AddBasePrice adds f to the "base_price" field.
func (m *SubscriptionMutation) AddBasePrice(f float64) {
	if m.addbase_price != nil {
		*m.addbase_price += f
	} else {
		m.addbase_price = &f
	}
}

// AddedBasePrice returns the value that was added to the "base_price" field in this mutation.
func (m *SubscriptionMutation) AddedBasePrice() (r float64, exists bool) {
	v := m.addbase_price
	if v == nil {
		return
	}
	return *v, true
}

// ClearBasePrice clears the value of the "base_price" field.
func (m *SubscriptionMutation) ClearBasePrice() {
	m.base_price = nil
	m.addbase_price = nil
	m.clearedFields[subscription.FieldBasePrice] = struct{}{}
}

// BasePriceCleared returns if the "base_price" field was cleared in this mutation.
func (m *SubscriptionMutation) BasePriceCleared() bool {
	_, ok := m.clearedFields[subscription.FieldBasePrice]
	return ok
}

// ResetBasePrice resets all changes to the "base_price" field.
func (m *SubscriptionMutation) ResetBasePrice() {
	m.base_price = nil
	m.addbase_price = nil
	delete(m.clearedFields, subscription.FieldBasePrice)
}

// SetFinalPrice sets the "final_price" field.
func (m *SubscriptionMutation) SetFinalPrice(f float64) {
	m.final_price = &f
	m.addfinal_price = nil
}

// FinalPrice returns the value of the "final_price" field in the mutation.
func (m *SubscriptionMutation) FinalPrice() (r float64, exists bool) {
	v := m.final_price
	if v == nil {
		return
	}
	return *v, true
}

// OldFinalPrice returns the old "final_price" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldFinalPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFinalPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFinalPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFinalPrice: %w", err)
	}
	return oldValue.FinalPrice, nil
}

// AddFinalPrice adds f to the "final_price" field.
func (m *SubscriptionMutation) AddFinalPrice(f float64) {
	if m.addfinal_price != nil {
		*m.addfinal_price += f
	} else {
		m.addfinal_price = &f
	}
}

// AddedFinalPrice returns the value that was added to the "final_price" field in this mutation.
func (m *SubscriptionMutation) AddedFinalPrice() (r float64, exists bool) {
	v := m.addfinal_price
	if v == nil {
		return
	}
	return *v, true
}

// ClearFinalPrice clears the value of the "final_price" field.
func (m *SubscriptionMutation) ClearFinalPrice() {
	m.final_price = nil
	m.addfinal_price = nil
	m.clearedFields[subscription.FieldFinalPrice] = struct{}{}
}

// FinalPriceCleared returns if the "final_price" field was cleared in this mutation.
func (m *SubscriptionMutation) FinalPriceCleared() bool {
	_, ok := m.clearedFields[subscription.FieldFinalPrice]
	return ok
}

// ResetFinalPrice resets all changes to the "final_price" field.
func (m *SubscriptionMutation) ResetFinalPrice() {
	m.final_price = nil
	m.addfinal_price = nil
	delete(m.clearedFields, subscription.FieldFinalPrice)
}

// SetPrice sets the "price" field.
func (m *SubscriptionMutation) SetPrice(f float64) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *SubscriptionMutation) Price() (r float64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *SubscriptionMutation) AddPrice(f float64) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *SubscriptionMutation) AddedPrice() (r float64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ClearPrice clears the value of the "price" field.
func (m *SubscriptionMutation) ClearPrice() {
	m.price = nil
	m.addprice = nil
	m.clearedFields[subscription.FieldPrice] = struct{}{}
}

// PriceCleared returns if the "price" field was cleared in this mutation.
func (m *SubscriptionMutation) PriceCleared() bool {
	_, ok := m.clearedFields[subscription.FieldPrice]
	return ok
}

// ResetPrice resets all changes to the "price" field.
func (m *SubscriptionMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
	delete(m.clearedFields, subscription.FieldPrice)
}

// SetDurationInMonths sets the "duration_in_months" field.
func (m *SubscriptionMutation) SetDurationInMonths(i int) {
	m.duration_in_months = &i
	m.addduration_in_months = nil
}

// DurationInMonths returns the value of the "duration_in_months" field in the mutation.
func (m *SubscriptionMutation) DurationInMonths() (r int, exists bool) {
	v := m.duration_in_months
	if v == nil {
		return
	}
	return *v, true
}

// OldDurationInMonths returns the old "duration_in_months" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldDurationInMonths(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDurationInMonths is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDurationInMonths requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDurationInMonths: %w", err)
	}
	return oldValue.DurationInMonths, nil
}

// AddDurationInMonths adds i to the "duration_in_months" field.
func (m *SubscriptionMutation) AddDurationInMonths(i int) {
	if m.addduration_in_months != nil {
		*m.addduration_in_months += i
	} else {
		m.addduration_in_months = &i
	}
}

// AddedDurationInMonths returns the value that was added to the "duration_in_months" field in this mutation.
func (m *SubscriptionMutation) AddedDurationInMonths() (r int, exists bool) {
	v := m.addduration_in_months
	if v == nil {
		return
	}
	return *v, true
}

// ResetDurationInMonths resets all changes to the "duration_in_months" field.
func (m *SubscriptionMutation) ResetDurationInMonths() {
	m.duration_in_months = nil
	m.addduration_in_months = nil
}

// SetIsActive sets the "is_active" field.
func (m *SubscriptionMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *SubscriptionMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *SubscriptionMutation) ResetIsActive() {
	m.is_active = nil
}

// SetName sets the "name" field.
func (m *SubscriptionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SubscriptionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SubscriptionMutation) ResetName() {
	m.name = nil
}

// SetRawSubscriptionData sets the "raw_subscription_data" field.
func (m *SubscriptionMutation) SetRawSubscriptionData(value map[string]interface{}) {
	m.raw_subscription_data = &value
}

// RawSubscriptionData returns the value of the "raw_subscription_data" field in the mutation.
func (m *SubscriptionMutation) RawSubscriptionData() (r map[string]interface{}, exists bool) {
	v := m.raw_subscription_data
	if v == nil {
		return
	}
	return *v, true
}

// OldRawSubscriptionData returns the old "raw_subscription_data" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldRawSubscriptionData(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRawSubscriptionData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRawSubscriptionData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRawSubscriptionData: %w", err)
	}
	return oldValue.RawSubscriptionData, nil
}

// ClearRawSubscriptionData clears the value of the "raw_subscription_data" field.
func (m *SubscriptionMutation) ClearRawSubscriptionData() {
	m.raw_subscription_data = nil
	m.clearedFields[subscription.FieldRawSubscriptionData] = struct{}{}
}

// RawSubscriptionDataCleared returns if the "raw_subscription_data" field was cleared in this mutation.
func (m *SubscriptionMutation) RawSubscriptionDataCleared() bool {
	_, ok := m.clearedFields[subscription.FieldRawSubscriptionData]
	return ok
}

// ResetRawSubscriptionData resets all changes to the "raw_subscription_data" field.
func (m *SubscriptionMutation) ResetRawSubscriptionData() {
	m.raw_subscription_data = nil
	delete(m.clearedFields, subscription.FieldRawSubscriptionData)
}

// SetCreatedAt sets the "created_at" field.
func (m *SubscriptionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SubscriptionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SubscriptionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SubscriptionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SubscriptionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SubscriptionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddExamIDs adds the "exams" edge to the SubscriptionExam entity by ids.
func (m *SubscriptionMutation) AddExamIDs(ids ...int) {
	if m.exams == nil {
		m.exams = make(map[int]struct{})
	}
	for i := range ids {
		m.exams[ids[i]] = struct{}{}
	}
}

// ClearExams clears the "exams" edge to the SubscriptionExam entity.
func (m *SubscriptionMutation) ClearExams() {
	m.clearedexams = true
}

// ExamsCleared reports if the "exams" edge to the SubscriptionExam entity was cleared.
func (m *SubscriptionMutation) ExamsCleared() bool {
	return m.clearedexams
}

// RemoveExamIDs removes the "exams" edge to the SubscriptionExam entity by IDs.
func (m *SubscriptionMutation) RemoveExamIDs(ids ...int) {
	if m.removedexams == nil {
		m.removedexams = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.exams, ids[i])
		m.removedexams[ids[i]] = struct{}{}
	}
}

// RemovedExams returns the removed IDs of the "exams" edge to the SubscriptionExam entity.
func (m *SubscriptionMutation) RemovedExamsIDs() (ids []int) {
	for id := range m.removedexams {
		ids = append(ids, id)
	}
	return
}

// ExamsIDs returns the "exams" edge IDs in the mutation.
func (m *SubscriptionMutation) ExamsIDs() (ids []int) {
	for id := range m.exams {
		ids = append(ids, id)
	}
	return
}

// ResetExams resets all changes to the "exams" edge.
func (m *SubscriptionMutation) ResetExams() {
	m.exams = nil
	m.clearedexams = false
	m.removedexams = nil
}

// AddUserSubscriptionIDs adds the "user_subscriptions" edge to the UserSubscription entity by ids.
func (m *SubscriptionMutation) AddUserSubscriptionIDs(ids ...int) {
	if m.user_subscriptions == nil {
		m.user_subscriptions = make(map[int]struct{})
	}
	for i := range ids {
		m.user_subscriptions[ids[i]] = struct{}{}
	}
}

// ClearUserSubscriptions clears the "user_subscriptions" edge to the UserSubscription entity.
func (m *SubscriptionMutation) ClearUserSubscriptions() {
	m.cleareduser_subscriptions = true
}

// UserSubscriptionsCleared reports if the "user_subscriptions" edge to the UserSubscription entity was cleared.
func (m *SubscriptionMutation) UserSubscriptionsCleared() bool {
	return m.cleareduser_subscriptions
}

// RemoveUserSubscriptionIDs removes the "user_subscriptions" edge to the UserSubscription entity by IDs.
func (m *SubscriptionMutation) RemoveUserSubscriptionIDs(ids ...int) {
	if m.removeduser_subscriptions == nil {
		m.removeduser_subscriptions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.user_subscriptions, ids[i])
		m.removeduser_subscriptions[ids[i]] = struct{}{}
	}
}

// RemovedUserSubscriptions returns the removed IDs of the "user_subscriptions" edge to the UserSubscription entity.
func (m *SubscriptionMutation) RemovedUserSubscriptionsIDs() (ids []int) {
	for id := range m.removeduser_subscriptions {
		ids = append(ids, id)
	}
	return
}

// UserSubscriptionsIDs returns the "user_subscriptions" edge IDs in the mutation.
func (m *SubscriptionMutation) UserSubscriptionsIDs() (ids []int) {
	for id := range m.user_subscriptions {
		ids = append(ids, id)
	}
	return
}

// ResetUserSubscriptions resets all changes to the "user_subscriptions" edge.
func (m *SubscriptionMutation) ResetUserSubscriptions() {
	m.user_subscriptions = nil
	m.cleareduser_subscriptions = false
	m.removeduser_subscriptions = nil
}

// Where appends a list predicates to the SubscriptionMutation builder.
func (m *SubscriptionMutation) Where(ps ...predicate.Subscription) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SubscriptionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SubscriptionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Subscription, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SubscriptionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SubscriptionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Subscription).
func (m *SubscriptionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SubscriptionMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.provider_plan_id != nil {
		fields = append(fields, subscription.FieldProviderPlanID)
	}
	if m.base_price != nil {
		fields = append(fields, subscription.FieldBasePrice)
	}
	if m.final_price != nil {
		fields = append(fields, subscription.FieldFinalPrice)
	}
	if m.price != nil {
		fields = append(fields, subscription.FieldPrice)
	}
	if m.duration_in_months != nil {
		fields = append(fields, subscription.FieldDurationInMonths)
	}
	if m.is_active != nil {
		fields = append(fields, subscription.FieldIsActive)
	}
	if m.name != nil {
		fields = append(fields, subscription.FieldName)
	}
	if m.raw_subscription_data != nil {
		fields = append(fields, subscription.FieldRawSubscriptionData)
	}
	if m.created_at != nil {
		fields = append(fields, subscription.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, subscription.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SubscriptionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case subscription.FieldProviderPlanID:
		return m.ProviderPlanID()
	case subscription.FieldBasePrice:
		return m.BasePrice()
	case subscription.FieldFinalPrice:
		return m.FinalPrice()
	case subscription.FieldPrice:
		return m.Price()
	case subscription.FieldDurationInMonths:
		return m.DurationInMonths()
	case subscription.FieldIsActive:
		return m.IsActive()
	case subscription.FieldName:
		return m.Name()
	case subscription.FieldRawSubscriptionData:
		return m.RawSubscriptionData()
	case subscription.FieldCreatedAt:
		return m.CreatedAt()
	case subscription.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SubscriptionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case subscription.FieldProviderPlanID:
		return m.OldProviderPlanID(ctx)
	case subscription.FieldBasePrice:
		return m.OldBasePrice(ctx)
	case subscription.FieldFinalPrice:
		return m.OldFinalPrice(ctx)
	case subscription.FieldPrice:
		return m.OldPrice(ctx)
	case subscription.FieldDurationInMonths:
		return m.OldDurationInMonths(ctx)
	case subscription.FieldIsActive:
		return m.OldIsActive(ctx)
	case subscription.FieldName:
		return m.OldName(ctx)
	case subscription.FieldRawSubscriptionData:
		return m.OldRawSubscriptionData(ctx)
	case subscription.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case subscription.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Subscription field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubscriptionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case subscription.FieldProviderPlanID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProviderPlanID(v)
		return nil
	case subscription.FieldBasePrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBasePrice(v)
		return nil
	case subscription.FieldFinalPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFinalPrice(v)
		return nil
	case subscription.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case subscription.FieldDurationInMonths:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDurationInMonths(v)
		return nil
	case subscription.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case subscription.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case subscription.FieldRawSubscriptionData:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRawSubscriptionData(v)
		return nil
	case subscription.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case subscription.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Subscription field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SubscriptionMutation) AddedFields() []string {
	var fields []string
	if m.addbase_price != nil {
		fields = append(fields, subscription.FieldBasePrice)
	}
	if m.addfinal_price != nil {
		fields = append(fields, subscription.FieldFinalPrice)
	}
	if m.addprice != nil {
		fields = append(fields, subscription.FieldPrice)
	}
	if m.addduration_in_months != nil {
		fields = append(fields, subscription.FieldDurationInMonths)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SubscriptionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case subscription.FieldBasePrice:
		return m.AddedBasePrice()
	case subscription.FieldFinalPrice:
		return m.AddedFinalPrice()
	case subscription.FieldPrice:
		return m.AddedPrice()
	case subscription.FieldDurationInMonths:
		return m.AddedDurationInMonths()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubscriptionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case subscription.FieldBasePrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBasePrice(v)
		return nil
	case subscription.FieldFinalPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFinalPrice(v)
		return nil
	case subscription.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	case subscription.FieldDurationInMonths:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDurationInMonths(v)
		return nil
	}
	return fmt.Errorf("unknown Subscription numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SubscriptionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(subscription.FieldBasePrice) {
		fields = append(fields, subscription.FieldBasePrice)
	}
	if m.FieldCleared(subscription.FieldFinalPrice) {
		fields = append(fields, subscription.FieldFinalPrice)
	}
	if m.FieldCleared(subscription.FieldPrice) {
		fields = append(fields, subscription.FieldPrice)
	}
	if m.FieldCleared(subscription.FieldRawSubscriptionData) {
		fields = append(fields, subscription.FieldRawSubscriptionData)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SubscriptionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SubscriptionMutation) ClearField(name string) error {
	switch name {
	case subscription.FieldBasePrice:
		m.ClearBasePrice()
		return nil
	case subscription.FieldFinalPrice:
		m.ClearFinalPrice()
		return nil
	case subscription.FieldPrice:
		m.ClearPrice()
		return nil
	case subscription.FieldRawSubscriptionData:
		m.ClearRawSubscriptionData()
		return nil
	}
	return fmt.Errorf("unknown Subscription nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SubscriptionMutation) ResetField(name string) error {
	switch name {
	case subscription.FieldProviderPlanID:
		m.ResetProviderPlanID()
		return nil
	case subscription.FieldBasePrice:
		m.ResetBasePrice()
		return nil
	case subscription.FieldFinalPrice:
		m.ResetFinalPrice()
		return nil
	case subscription.FieldPrice:
		m.ResetPrice()
		return nil
	case subscription.FieldDurationInMonths:
		m.ResetDurationInMonths()
		return nil
	case subscription.FieldIsActive:
		m.ResetIsActive()
		return nil
	case subscription.FieldName:
		m.ResetName()
		return nil
	case subscription.FieldRawSubscriptionData:
		m.ResetRawSubscriptionData()
		return nil
	case subscription.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case subscription.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Subscription field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SubscriptionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.exams != nil {
		edges = append(edges, subscription.EdgeExams)
	}
	if m.user_subscriptions != nil {
		edges = append(edges, subscription.EdgeUserSubscriptions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SubscriptionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case subscription.EdgeExams:
		ids := make([]ent.Value, 0, len(m.exams))
		for id := range m.exams {
			ids = append(ids, id)
		}
		return ids
	case subscription.EdgeUserSubscriptions:
		ids := make([]ent.Value, 0, len(m.user_subscriptions))
		for id := range m.user_subscriptions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SubscriptionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedexams != nil {
		edges = append(edges, subscription.EdgeExams)
	}
	if m.removeduser_subscriptions != nil {
		edges = append(edges, subscription.EdgeUserSubscriptions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SubscriptionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case subscription.EdgeExams:
		ids := make([]ent.Value, 0, len(m.removedexams))
		for id := range m.removedexams {
			ids = append(ids, id)
		}
		return ids
	case subscription.EdgeUserSubscriptions:
		ids := make([]ent.Value, 0, len(m.removeduser_subscriptions))
		for id := range m.removeduser_subscriptions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SubscriptionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedexams {
		edges = append(edges, subscription.EdgeExams)
	}
	if m.cleareduser_subscriptions {
		edges = append(edges, subscription.EdgeUserSubscriptions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SubscriptionMutation) EdgeCleared(name string) bool {
	switch name {
	case subscription.EdgeExams:
		return m.clearedexams
	case subscription.EdgeUserSubscriptions:
		return m.cleareduser_subscriptions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SubscriptionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Subscription unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SubscriptionMutation) ResetEdge(name string) error {
	switch name {
	case subscription.EdgeExams:
		m.ResetExams()
		return nil
	case subscription.EdgeUserSubscriptions:
		m.ResetUserSubscriptions()
		return nil
	}
	return fmt.Errorf("unknown Subscription edge %s", name)
}

// SubscriptionExamMutation represents an operation that mutates the SubscriptionExam nodes in the graph.
type SubscriptionExamMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	created_at          *time.Time
	updated_at          *time.Time
	clearedFields       map[string]struct{}
	subscription        *int
	clearedsubscription bool
	exam                *int
	clearedexam         bool
	done                bool
	oldValue            func(context.Context) (*SubscriptionExam, error)
	predicates          []predicate.SubscriptionExam
}

var _ ent.Mutation = (*SubscriptionExamMutation)(nil)

// subscriptionexamOption allows management of the mutation configuration using functional options.
type subscriptionexamOption func(*SubscriptionExamMutation)

// newSubscriptionExamMutation creates new mutation for the SubscriptionExam entity.
func newSubscriptionExamMutation(c config, op Op, opts ...subscriptionexamOption) *SubscriptionExamMutation {
	m := &SubscriptionExamMutation{
		config:        c,
		op:            op,
		typ:           TypeSubscriptionExam,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSubscriptionExamID sets the ID field of the mutation.
func withSubscriptionExamID(id int) subscriptionexamOption {
	return func(m *SubscriptionExamMutation) {
		var (
			err   error
			once  sync.Once
			value *SubscriptionExam
		)
		m.oldValue = func(ctx context.Context) (*SubscriptionExam, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SubscriptionExam.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSubscriptionExam sets the old SubscriptionExam of the mutation.
func withSubscriptionExam(node *SubscriptionExam) subscriptionexamOption {
	return func(m *SubscriptionExamMutation) {
		m.oldValue = func(context.Context) (*SubscriptionExam, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SubscriptionExamMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SubscriptionExamMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SubscriptionExamMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SubscriptionExamMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SubscriptionExam.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *SubscriptionExamMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SubscriptionExamMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SubscriptionExam entity.
// If the SubscriptionExam object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionExamMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SubscriptionExamMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SubscriptionExamMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SubscriptionExamMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SubscriptionExam entity.
// If the SubscriptionExam object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionExamMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SubscriptionExamMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetSubscriptionID sets the "subscription" edge to the Subscription entity by id.
func (m *SubscriptionExamMutation) SetSubscriptionID(id int) {
	m.subscription = &id
}

// ClearSubscription clears the "subscription" edge to the Subscription entity.
func (m *SubscriptionExamMutation) ClearSubscription() {
	m.clearedsubscription = true
}

// SubscriptionCleared reports if the "subscription" edge to the Subscription entity was cleared.
func (m *SubscriptionExamMutation) SubscriptionCleared() bool {
	return m.clearedsubscription
}

// SubscriptionID returns the "subscription" edge ID in the mutation.
func (m *SubscriptionExamMutation) SubscriptionID() (id int, exists bool) {
	if m.subscription != nil {
		return *m.subscription, true
	}
	return
}

// SubscriptionIDs returns the "subscription" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SubscriptionID instead. It exists only for internal usage by the builders.
func (m *SubscriptionExamMutation) SubscriptionIDs() (ids []int) {
	if id := m.subscription; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSubscription resets all changes to the "subscription" edge.
func (m *SubscriptionExamMutation) ResetSubscription() {
	m.subscription = nil
	m.clearedsubscription = false
}

// SetExamID sets the "exam" edge to the Exam entity by id.
func (m *SubscriptionExamMutation) SetExamID(id int) {
	m.exam = &id
}

// ClearExam clears the "exam" edge to the Exam entity.
func (m *SubscriptionExamMutation) ClearExam() {
	m.clearedexam = true
}

// ExamCleared reports if the "exam" edge to the Exam entity was cleared.
func (m *SubscriptionExamMutation) ExamCleared() bool {
	return m.clearedexam
}

// ExamID returns the "exam" edge ID in the mutation.
func (m *SubscriptionExamMutation) ExamID() (id int, exists bool) {
	if m.exam != nil {
		return *m.exam, true
	}
	return
}

// ExamIDs returns the "exam" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ExamID instead. It exists only for internal usage by the builders.
func (m *SubscriptionExamMutation) ExamIDs() (ids []int) {
	if id := m.exam; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetExam resets all changes to the "exam" edge.
func (m *SubscriptionExamMutation) ResetExam() {
	m.exam = nil
	m.clearedexam = false
}

// Where appends a list predicates to the SubscriptionExamMutation builder.
func (m *SubscriptionExamMutation) Where(ps ...predicate.SubscriptionExam) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SubscriptionExamMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SubscriptionExamMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SubscriptionExam, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SubscriptionExamMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SubscriptionExamMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SubscriptionExam).
func (m *SubscriptionExamMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SubscriptionExamMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.created_at != nil {
		fields = append(fields, subscriptionexam.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, subscriptionexam.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SubscriptionExamMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case subscriptionexam.FieldCreatedAt:
		return m.CreatedAt()
	case subscriptionexam.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SubscriptionExamMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case subscriptionexam.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case subscriptionexam.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown SubscriptionExam field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubscriptionExamMutation) SetField(name string, value ent.Value) error {
	switch name {
	case subscriptionexam.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case subscriptionexam.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown SubscriptionExam field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SubscriptionExamMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SubscriptionExamMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubscriptionExamMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SubscriptionExam numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SubscriptionExamMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SubscriptionExamMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SubscriptionExamMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SubscriptionExam nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SubscriptionExamMutation) ResetField(name string) error {
	switch name {
	case subscriptionexam.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case subscriptionexam.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown SubscriptionExam field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SubscriptionExamMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.subscription != nil {
		edges = append(edges, subscriptionexam.EdgeSubscription)
	}
	if m.exam != nil {
		edges = append(edges, subscriptionexam.EdgeExam)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SubscriptionExamMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case subscriptionexam.EdgeSubscription:
		if id := m.subscription; id != nil {
			return []ent.Value{*id}
		}
	case subscriptionexam.EdgeExam:
		if id := m.exam; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SubscriptionExamMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SubscriptionExamMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SubscriptionExamMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedsubscription {
		edges = append(edges, subscriptionexam.EdgeSubscription)
	}
	if m.clearedexam {
		edges = append(edges, subscriptionexam.EdgeExam)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SubscriptionExamMutation) EdgeCleared(name string) bool {
	switch name {
	case subscriptionexam.EdgeSubscription:
		return m.clearedsubscription
	case subscriptionexam.EdgeExam:
		return m.clearedexam
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SubscriptionExamMutation) ClearEdge(name string) error {
	switch name {
	case subscriptionexam.EdgeSubscription:
		m.ClearSubscription()
		return nil
	case subscriptionexam.EdgeExam:
		m.ClearExam()
		return nil
	}
	return fmt.Errorf("unknown SubscriptionExam unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SubscriptionExamMutation) ResetEdge(name string) error {
	switch name {
	case subscriptionexam.EdgeSubscription:
		m.ResetSubscription()
		return nil
	case subscriptionexam.EdgeExam:
		m.ResetExam()
		return nil
	}
	return fmt.Errorf("unknown SubscriptionExam edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                           Op
	typ                          string
	id                           *uuid.UUID
	email                        *string
	first_name                   *string
	last_name                    *string
	phone_number                 *string
	payment_provider_customer_id *string
	clearedFields                map[string]struct{}
	attempts                     map[int]struct{}
	removedattempts              map[int]struct{}
	clearedattempts              bool
	subscriptions                map[int]struct{}
	removedsubscriptions         map[int]struct{}
	clearedsubscriptions         bool
	payments                     map[int]struct{}
	removedpayments              map[int]struct{}
	clearedpayments              bool
	done                         bool
	oldValue                     func(context.Context) (*User, error)
	predicates                   []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetFirstName sets the "first_name" field.
func (m *UserMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *UserMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ClearFirstName clears the value of the "first_name" field.
func (m *UserMutation) ClearFirstName() {
	m.first_name = nil
	m.clearedFields[user.FieldFirstName] = struct{}{}
}

// FirstNameCleared returns if the "first_name" field was cleared in this mutation.
func (m *UserMutation) FirstNameCleared() bool {
	_, ok := m.clearedFields[user.FieldFirstName]
	return ok
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *UserMutation) ResetFirstName() {
	m.first_name = nil
	delete(m.clearedFields, user.FieldFirstName)
}

// SetLastName sets the "last_name" field.
func (m *UserMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *UserMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ClearLastName clears the value of the "last_name" field.
func (m *UserMutation) ClearLastName() {
	m.last_name = nil
	m.clearedFields[user.FieldLastName] = struct{}{}
}

// LastNameCleared returns if the "last_name" field was cleared in this mutation.
func (m *UserMutation) LastNameCleared() bool {
	_, ok := m.clearedFields[user.FieldLastName]
	return ok
}

// ResetLastName resets all changes to the "last_name" field.
func (m *UserMutation) ResetLastName() {
	m.last_name = nil
	delete(m.clearedFields, user.FieldLastName)
}

// SetPhoneNumber sets the "phone_number" field.
func (m *UserMutation) SetPhoneNumber(s string) {
	m.phone_number = &s
}

// PhoneNumber returns the value of the "phone_number" field in the mutation.
func (m *UserMutation) PhoneNumber() (r string, exists bool) {
	v := m.phone_number
	if v == nil {
		return
	}
	return *v, true
}

// OldPhoneNumber returns the old "phone_number" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPhoneNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhoneNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhoneNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhoneNumber: %w", err)
	}
	return oldValue.PhoneNumber, nil
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (m *UserMutation) ClearPhoneNumber() {
	m.phone_number = nil
	m.clearedFields[user.FieldPhoneNumber] = struct{}{}
}

// PhoneNumberCleared returns if the "phone_number" field was cleared in this mutation.
func (m *UserMutation) PhoneNumberCleared() bool {
	_, ok := m.clearedFields[user.FieldPhoneNumber]
	return ok
}

// ResetPhoneNumber resets all changes to the "phone_number" field.
func (m *UserMutation) ResetPhoneNumber() {
	m.phone_number = nil
	delete(m.clearedFields, user.FieldPhoneNumber)
}

// SetPaymentProviderCustomerID sets the "payment_provider_customer_id" field.
func (m *UserMutation) SetPaymentProviderCustomerID(s string) {
	m.payment_provider_customer_id = &s
}

// PaymentProviderCustomerID returns the value of the "payment_provider_customer_id" field in the mutation.
func (m *UserMutation) PaymentProviderCustomerID() (r string, exists bool) {
	v := m.payment_provider_customer_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentProviderCustomerID returns the old "payment_provider_customer_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPaymentProviderCustomerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentProviderCustomerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentProviderCustomerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentProviderCustomerID: %w", err)
	}
	return oldValue.PaymentProviderCustomerID, nil
}

// ClearPaymentProviderCustomerID clears the value of the "payment_provider_customer_id" field.
func (m *UserMutation) ClearPaymentProviderCustomerID() {
	m.payment_provider_customer_id = nil
	m.clearedFields[user.FieldPaymentProviderCustomerID] = struct{}{}
}

// PaymentProviderCustomerIDCleared returns if the "payment_provider_customer_id" field was cleared in this mutation.
func (m *UserMutation) PaymentProviderCustomerIDCleared() bool {
	_, ok := m.clearedFields[user.FieldPaymentProviderCustomerID]
	return ok
}

// ResetPaymentProviderCustomerID resets all changes to the "payment_provider_customer_id" field.
func (m *UserMutation) ResetPaymentProviderCustomerID() {
	m.payment_provider_customer_id = nil
	delete(m.clearedFields, user.FieldPaymentProviderCustomerID)
}

// AddAttemptIDs adds the "attempts" edge to the ExamAttempt entity by ids.
func (m *UserMutation) AddAttemptIDs(ids ...int) {
	if m.attempts == nil {
		m.attempts = make(map[int]struct{})
	}
	for i := range ids {
		m.attempts[ids[i]] = struct{}{}
	}
}

// ClearAttempts clears the "attempts" edge to the ExamAttempt entity.
func (m *UserMutation) ClearAttempts() {
	m.clearedattempts = true
}

// AttemptsCleared reports if the "attempts" edge to the ExamAttempt entity was cleared.
func (m *UserMutation) AttemptsCleared() bool {
	return m.clearedattempts
}

// RemoveAttemptIDs removes the "attempts" edge to the ExamAttempt entity by IDs.
func (m *UserMutation) RemoveAttemptIDs(ids ...int) {
	if m.removedattempts == nil {
		m.removedattempts = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.attempts, ids[i])
		m.removedattempts[ids[i]] = struct{}{}
	}
}

// RemovedAttempts returns the removed IDs of the "attempts" edge to the ExamAttempt entity.
func (m *UserMutation) RemovedAttemptsIDs() (ids []int) {
	for id := range m.removedattempts {
		ids = append(ids, id)
	}
	return
}

// AttemptsIDs returns the "attempts" edge IDs in the mutation.
func (m *UserMutation) AttemptsIDs() (ids []int) {
	for id := range m.attempts {
		ids = append(ids, id)
	}
	return
}

// ResetAttempts resets all changes to the "attempts" edge.
func (m *UserMutation) ResetAttempts() {
	m.attempts = nil
	m.clearedattempts = false
	m.removedattempts = nil
}

// AddSubscriptionIDs adds the "subscriptions" edge to the UserSubscription entity by ids.
func (m *UserMutation) AddSubscriptionIDs(ids ...int) {
	if m.subscriptions == nil {
		m.subscriptions = make(map[int]struct{})
	}
	for i := range ids {
		m.subscriptions[ids[i]] = struct{}{}
	}
}

// ClearSubscriptions clears the "subscriptions" edge to the UserSubscription entity.
func (m *UserMutation) ClearSubscriptions() {
	m.clearedsubscriptions = true
}

// SubscriptionsCleared reports if the "subscriptions" edge to the UserSubscription entity was cleared.
func (m *UserMutation) SubscriptionsCleared() bool {
	return m.clearedsubscriptions
}

// RemoveSubscriptionIDs removes the "subscriptions" edge to the UserSubscription entity by IDs.
func (m *UserMutation) RemoveSubscriptionIDs(ids ...int) {
	if m.removedsubscriptions == nil {
		m.removedsubscriptions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.subscriptions, ids[i])
		m.removedsubscriptions[ids[i]] = struct{}{}
	}
}

// RemovedSubscriptions returns the removed IDs of the "subscriptions" edge to the UserSubscription entity.
func (m *UserMutation) RemovedSubscriptionsIDs() (ids []int) {
	for id := range m.removedsubscriptions {
		ids = append(ids, id)
	}
	return
}

// SubscriptionsIDs returns the "subscriptions" edge IDs in the mutation.
func (m *UserMutation) SubscriptionsIDs() (ids []int) {
	for id := range m.subscriptions {
		ids = append(ids, id)
	}
	return
}

// ResetSubscriptions resets all changes to the "subscriptions" edge.
func (m *UserMutation) ResetSubscriptions() {
	m.subscriptions = nil
	m.clearedsubscriptions = false
	m.removedsubscriptions = nil
}

// AddPaymentIDs adds the "payments" edge to the Payment entity by ids.
func (m *UserMutation) AddPaymentIDs(ids ...int) {
	if m.payments == nil {
		m.payments = make(map[int]struct{})
	}
	for i := range ids {
		m.payments[ids[i]] = struct{}{}
	}
}

// ClearPayments clears the "payments" edge to the Payment entity.
func (m *UserMutation) ClearPayments() {
	m.clearedpayments = true
}

// PaymentsCleared reports if the "payments" edge to the Payment entity was cleared.
func (m *UserMutation) PaymentsCleared() bool {
	return m.clearedpayments
}

// RemovePaymentIDs removes the "payments" edge to the Payment entity by IDs.
func (m *UserMutation) RemovePaymentIDs(ids ...int) {
	if m.removedpayments == nil {
		m.removedpayments = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.payments, ids[i])
		m.removedpayments[ids[i]] = struct{}{}
	}
}

// RemovedPayments returns the removed IDs of the "payments" edge to the Payment entity.
func (m *UserMutation) RemovedPaymentsIDs() (ids []int) {
	for id := range m.removedpayments {
		ids = append(ids, id)
	}
	return
}

// PaymentsIDs returns the "payments" edge IDs in the mutation.
func (m *UserMutation) PaymentsIDs() (ids []int) {
	for id := range m.payments {
		ids = append(ids, id)
	}
	return
}

// ResetPayments resets all changes to the "payments" edge.
func (m *UserMutation) ResetPayments() {
	m.payments = nil
	m.clearedpayments = false
	m.removedpayments = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.first_name != nil {
		fields = append(fields, user.FieldFirstName)
	}
	if m.last_name != nil {
		fields = append(fields, user.FieldLastName)
	}
	if m.phone_number != nil {
		fields = append(fields, user.FieldPhoneNumber)
	}
	if m.payment_provider_customer_id != nil {
		fields = append(fields, user.FieldPaymentProviderCustomerID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldEmail:
		return m.Email()
	case user.FieldFirstName:
		return m.FirstName()
	case user.FieldLastName:
		return m.LastName()
	case user.FieldPhoneNumber:
		return m.PhoneNumber()
	case user.FieldPaymentProviderCustomerID:
		return m.PaymentProviderCustomerID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldFirstName:
		return m.OldFirstName(ctx)
	case user.FieldLastName:
		return m.OldLastName(ctx)
	case user.FieldPhoneNumber:
		return m.OldPhoneNumber(ctx)
	case user.FieldPaymentProviderCustomerID:
		return m.OldPaymentProviderCustomerID(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case user.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case user.FieldPhoneNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhoneNumber(v)
		return nil
	case user.FieldPaymentProviderCustomerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentProviderCustomerID(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldFirstName) {
		fields = append(fields, user.FieldFirstName)
	}
	if m.FieldCleared(user.FieldLastName) {
		fields = append(fields, user.FieldLastName)
	}
	if m.FieldCleared(user.FieldPhoneNumber) {
		fields = append(fields, user.FieldPhoneNumber)
	}
	if m.FieldCleared(user.FieldPaymentProviderCustomerID) {
		fields = append(fields, user.FieldPaymentProviderCustomerID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldFirstName:
		m.ClearFirstName()
		return nil
	case user.FieldLastName:
		m.ClearLastName()
		return nil
	case user.FieldPhoneNumber:
		m.ClearPhoneNumber()
		return nil
	case user.FieldPaymentProviderCustomerID:
		m.ClearPaymentProviderCustomerID()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldFirstName:
		m.ResetFirstName()
		return nil
	case user.FieldLastName:
		m.ResetLastName()
		return nil
	case user.FieldPhoneNumber:
		m.ResetPhoneNumber()
		return nil
	case user.FieldPaymentProviderCustomerID:
		m.ResetPaymentProviderCustomerID()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.attempts != nil {
		edges = append(edges, user.EdgeAttempts)
	}
	if m.subscriptions != nil {
		edges = append(edges, user.EdgeSubscriptions)
	}
	if m.payments != nil {
		edges = append(edges, user.EdgePayments)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeAttempts:
		ids := make([]ent.Value, 0, len(m.attempts))
		for id := range m.attempts {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSubscriptions:
		ids := make([]ent.Value, 0, len(m.subscriptions))
		for id := range m.subscriptions {
			ids = append(ids, id)
		}
		return ids
	case user.EdgePayments:
		ids := make([]ent.Value, 0, len(m.payments))
		for id := range m.payments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedattempts != nil {
		edges = append(edges, user.EdgeAttempts)
	}
	if m.removedsubscriptions != nil {
		edges = append(edges, user.EdgeSubscriptions)
	}
	if m.removedpayments != nil {
		edges = append(edges, user.EdgePayments)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeAttempts:
		ids := make([]ent.Value, 0, len(m.removedattempts))
		for id := range m.removedattempts {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSubscriptions:
		ids := make([]ent.Value, 0, len(m.removedsubscriptions))
		for id := range m.removedsubscriptions {
			ids = append(ids, id)
		}
		return ids
	case user.EdgePayments:
		ids := make([]ent.Value, 0, len(m.removedpayments))
		for id := range m.removedpayments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedattempts {
		edges = append(edges, user.EdgeAttempts)
	}
	if m.clearedsubscriptions {
		edges = append(edges, user.EdgeSubscriptions)
	}
	if m.clearedpayments {
		edges = append(edges, user.EdgePayments)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeAttempts:
		return m.clearedattempts
	case user.EdgeSubscriptions:
		return m.clearedsubscriptions
	case user.EdgePayments:
		return m.clearedpayments
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeAttempts:
		m.ResetAttempts()
		return nil
	case user.EdgeSubscriptions:
		m.ResetSubscriptions()
		return nil
	case user.EdgePayments:
		m.ResetPayments()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// UserSubscriptionMutation represents an operation that mutates the UserSubscription nodes in the graph.
type UserSubscriptionMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int
	is_active                *bool
	status                   *usersubscription.Status
	start_date               *time.Time
	end_date                 *time.Time
	provider_subscription_id *string
	created_at               *time.Time
	updated_at               *time.Time
	clearedFields            map[string]struct{}
	user                     *uuid.UUID
	cleareduser              bool
	subscription             *int
	clearedsubscription      bool
	payments                 map[int]struct{}
	removedpayments          map[int]struct{}
	clearedpayments          bool
	done                     bool
	oldValue                 func(context.Context) (*UserSubscription, error)
	predicates               []predicate.UserSubscription
}

var _ ent.Mutation = (*UserSubscriptionMutation)(nil)

// usersubscriptionOption allows management of the mutation configuration using functional options.
type usersubscriptionOption func(*UserSubscriptionMutation)

// newUserSubscriptionMutation creates new mutation for the UserSubscription entity.
func newUserSubscriptionMutation(c config, op Op, opts ...usersubscriptionOption) *UserSubscriptionMutation {
	m := &UserSubscriptionMutation{
		config:        c,
		op:            op,
		typ:           TypeUserSubscription,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserSubscriptionID sets the ID field of the mutation.
func withUserSubscriptionID(id int) usersubscriptionOption {
	return func(m *UserSubscriptionMutation) {
		var (
			err   error
			once  sync.Once
			value *UserSubscription
		)
		m.oldValue = func(ctx context.Context) (*UserSubscription, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserSubscription.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserSubscription sets the old UserSubscription of the mutation.
func withUserSubscription(node *UserSubscription) usersubscriptionOption {
	return func(m *UserSubscriptionMutation) {
		m.oldValue = func(context.Context) (*UserSubscription, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserSubscriptionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserSubscriptionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserSubscriptionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserSubscriptionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserSubscription.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIsActive sets the "is_active" field.
func (m *UserSubscriptionMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *UserSubscriptionMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the UserSubscription entity.
// If the UserSubscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSubscriptionMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *UserSubscriptionMutation) ResetIsActive() {
	m.is_active = nil
}

// SetStatus sets the "status" field.
func (m *UserSubscriptionMutation) SetStatus(u usersubscription.Status) {
	m.status = &u
}

// Status returns the value of the "status" field in the mutation.
func (m *UserSubscriptionMutation) Status() (r usersubscription.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the UserSubscription entity.
// If the UserSubscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSubscriptionMutation) OldStatus(ctx context.Context) (v usersubscription.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *UserSubscriptionMutation) ResetStatus() {
	m.status = nil
}

// SetStartDate sets the "start_date" field.
func (m *UserSubscriptionMutation) SetStartDate(t time.Time) {
	m.start_date = &t
}

// StartDate returns the value of the "start_date" field in the mutation.
func (m *UserSubscriptionMutation) StartDate() (r time.Time, exists bool) {
	v := m.start_date
	if v == nil {
		return
	}
	return *v, true
}

// OldStartDate returns the old "start_date" field's value of the UserSubscription entity.
// If the UserSubscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSubscriptionMutation) OldStartDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartDate: %w", err)
	}
	return oldValue.StartDate, nil
}

// ClearStartDate clears the value of the "start_date" field.
func (m *UserSubscriptionMutation) ClearStartDate() {
	m.start_date = nil
	m.clearedFields[usersubscription.FieldStartDate] = struct{}{}
}

// StartDateCleared returns if the "start_date" field was cleared in this mutation.
func (m *UserSubscriptionMutation) StartDateCleared() bool {
	_, ok := m.clearedFields[usersubscription.FieldStartDate]
	return ok
}

// ResetStartDate resets all changes to the "start_date" field.
func (m *UserSubscriptionMutation) ResetStartDate() {
	m.start_date = nil
	delete(m.clearedFields, usersubscription.FieldStartDate)
}

// SetEndDate sets the "end_date" field.
func (m *UserSubscriptionMutation) SetEndDate(t time.Time) {
	m.end_date = &t
}

// EndDate returns the value of the "end_date" field in the mutation.
func (m *UserSubscriptionMutation) EndDate() (r time.Time, exists bool) {
	v := m.end_date
	if v == nil {
		return
	}
	return *v, true
}

// OldEndDate returns the old "end_date" field's value of the UserSubscription entity.
// If the UserSubscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSubscriptionMutation) OldEndDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndDate: %w", err)
	}
	return oldValue.EndDate, nil
}

// ClearEndDate clears the value of the "end_date" field.
func (m *UserSubscriptionMutation) ClearEndDate() {
	m.end_date = nil
	m.clearedFields[usersubscription.FieldEndDate] = struct{}{}
}

// EndDateCleared returns if the "end_date" field was cleared in this mutation.
func (m *UserSubscriptionMutation) EndDateCleared() bool {
	_, ok := m.clearedFields[usersubscription.FieldEndDate]
	return ok
}

// ResetEndDate resets all changes to the "end_date" field.
func (m *UserSubscriptionMutation) ResetEndDate() {
	m.end_date = nil
	delete(m.clearedFields, usersubscription.FieldEndDate)
}

// SetProviderSubscriptionID sets the "provider_subscription_id" field.
func (m *UserSubscriptionMutation) SetProviderSubscriptionID(s string) {
	m.provider_subscription_id = &s
}

// ProviderSubscriptionID returns the value of the "provider_subscription_id" field in the mutation.
func (m *UserSubscriptionMutation) ProviderSubscriptionID() (r string, exists bool) {
	v := m.provider_subscription_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProviderSubscriptionID returns the old "provider_subscription_id" field's value of the UserSubscription entity.
// If the UserSubscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSubscriptionMutation) OldProviderSubscriptionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProviderSubscriptionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProviderSubscriptionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProviderSubscriptionID: %w", err)
	}
	return oldValue.ProviderSubscriptionID, nil
}

// ResetProviderSubscriptionID resets all changes to the "provider_subscription_id" field.
func (m *UserSubscriptionMutation) ResetProviderSubscriptionID() {
	m.provider_subscription_id = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserSubscriptionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserSubscriptionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the UserSubscription entity.
// If the UserSubscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSubscriptionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserSubscriptionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserSubscriptionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserSubscriptionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the UserSubscription entity.
// If the UserSubscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSubscriptionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserSubscriptionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *UserSubscriptionMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *UserSubscriptionMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *UserSubscriptionMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *UserSubscriptionMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *UserSubscriptionMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *UserSubscriptionMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetSubscriptionID sets the "subscription" edge to the Subscription entity by id.
func (m *UserSubscriptionMutation) SetSubscriptionID(id int) {
	m.subscription = &id
}

// ClearSubscription clears the "subscription" edge to the Subscription entity.
func (m *UserSubscriptionMutation) ClearSubscription() {
	m.clearedsubscription = true
}

// SubscriptionCleared reports if the "subscription" edge to the Subscription entity was cleared.
func (m *UserSubscriptionMutation) SubscriptionCleared() bool {
	return m.clearedsubscription
}

// SubscriptionID returns the "subscription" edge ID in the mutation.
func (m *UserSubscriptionMutation) SubscriptionID() (id int, exists bool) {
	if m.subscription != nil {
		return *m.subscription, true
	}
	return
}

// SubscriptionIDs returns the "subscription" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SubscriptionID instead. It exists only for internal usage by the builders.
func (m *UserSubscriptionMutation) SubscriptionIDs() (ids []int) {
	if id := m.subscription; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSubscription resets all changes to the "subscription" edge.
func (m *UserSubscriptionMutation) ResetSubscription() {
	m.subscription = nil
	m.clearedsubscription = false
}

// AddPaymentIDs adds the "payments" edge to the Payment entity by ids.
func (m *UserSubscriptionMutation) AddPaymentIDs(ids ...int) {
	if m.payments == nil {
		m.payments = make(map[int]struct{})
	}
	for i := range ids {
		m.payments[ids[i]] = struct{}{}
	}
}

// ClearPayments clears the "payments" edge to the Payment entity.
func (m *UserSubscriptionMutation) ClearPayments() {
	m.clearedpayments = true
}

// PaymentsCleared reports if the "payments" edge to the Payment entity was cleared.
func (m *UserSubscriptionMutation) PaymentsCleared() bool {
	return m.clearedpayments
}

// RemovePaymentIDs removes the "payments" edge to the Payment entity by IDs.
func (m *UserSubscriptionMutation) RemovePaymentIDs(ids ...int) {
	if m.removedpayments == nil {
		m.removedpayments = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.payments, ids[i])
		m.removedpayments[ids[i]] = struct{}{}
	}
}

// RemovedPayments returns the removed IDs of the "payments" edge to the Payment entity.
func (m *UserSubscriptionMutation) RemovedPaymentsIDs() (ids []int) {
	for id := range m.removedpayments {
		ids = append(ids, id)
	}
	return
}

// PaymentsIDs returns the "payments" edge IDs in the mutation.
func (m *UserSubscriptionMutation) PaymentsIDs() (ids []int) {
	for id := range m.payments {
		ids = append(ids, id)
	}
	return
}

// ResetPayments resets all changes to the "payments" edge.
func (m *UserSubscriptionMutation) ResetPayments() {
	m.payments = nil
	m.clearedpayments = false
	m.removedpayments = nil
}

// Where appends a list predicates to the UserSubscriptionMutation builder.
func (m *UserSubscriptionMutation) Where(ps ...predicate.UserSubscription) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserSubscriptionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserSubscriptionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserSubscription, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserSubscriptionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserSubscriptionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserSubscription).
func (m *UserSubscriptionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserSubscriptionMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.is_active != nil {
		fields = append(fields, usersubscription.FieldIsActive)
	}
	if m.status != nil {
		fields = append(fields, usersubscription.FieldStatus)
	}
	if m.start_date != nil {
		fields = append(fields, usersubscription.FieldStartDate)
	}
	if m.end_date != nil {
		fields = append(fields, usersubscription.FieldEndDate)
	}
	if m.provider_subscription_id != nil {
		fields = append(fields, usersubscription.FieldProviderSubscriptionID)
	}
	if m.created_at != nil {
		fields = append(fields, usersubscription.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, usersubscription.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserSubscriptionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case usersubscription.FieldIsActive:
		return m.IsActive()
	case usersubscription.FieldStatus:
		return m.Status()
	case usersubscription.FieldStartDate:
		return m.StartDate()
	case usersubscription.FieldEndDate:
		return m.EndDate()
	case usersubscription.FieldProviderSubscriptionID:
		return m.ProviderSubscriptionID()
	case usersubscription.FieldCreatedAt:
		return m.CreatedAt()
	case usersubscription.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserSubscriptionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case usersubscription.FieldIsActive:
		return m.OldIsActive(ctx)
	case usersubscription.FieldStatus:
		return m.OldStatus(ctx)
	case usersubscription.FieldStartDate:
		return m.OldStartDate(ctx)
	case usersubscription.FieldEndDate:
		return m.OldEndDate(ctx)
	case usersubscription.FieldProviderSubscriptionID:
		return m.OldProviderSubscriptionID(ctx)
	case usersubscription.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case usersubscription.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown UserSubscription field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserSubscriptionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case usersubscription.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case usersubscription.FieldStatus:
		v, ok := value.(usersubscription.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case usersubscription.FieldStartDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartDate(v)
		return nil
	case usersubscription.FieldEndDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndDate(v)
		return nil
	case usersubscription.FieldProviderSubscriptionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProviderSubscriptionID(v)
		return nil
	case usersubscription.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case usersubscription.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserSubscription field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserSubscriptionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserSubscriptionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserSubscriptionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserSubscription numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserSubscriptionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(usersubscription.FieldStartDate) {
		fields = append(fields, usersubscription.FieldStartDate)
	}
	if m.FieldCleared(usersubscription.FieldEndDate) {
		fields = append(fields, usersubscription.FieldEndDate)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserSubscriptionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserSubscriptionMutation) ClearField(name string) error {
	switch name {
	case usersubscription.FieldStartDate:
		m.ClearStartDate()
		return nil
	case usersubscription.FieldEndDate:
		m.ClearEndDate()
		return nil
	}
	return fmt.Errorf("unknown UserSubscription nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserSubscriptionMutation) ResetField(name string) error {
	switch name {
	case usersubscription.FieldIsActive:
		m.ResetIsActive()
		return nil
	case usersubscription.FieldStatus:
		m.ResetStatus()
		return nil
	case usersubscription.FieldStartDate:
		m.ResetStartDate()
		return nil
	case usersubscription.FieldEndDate:
		m.ResetEndDate()
		return nil
	case usersubscription.FieldProviderSubscriptionID:
		m.ResetProviderSubscriptionID()
		return nil
	case usersubscription.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case usersubscription.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown UserSubscription field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserSubscriptionMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.user != nil {
		edges = append(edges, usersubscription.EdgeUser)
	}
	if m.subscription != nil {
		edges = append(edges, usersubscription.EdgeSubscription)
	}
	if m.payments != nil {
		edges = append(edges, usersubscription.EdgePayments)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserSubscriptionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case usersubscription.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case usersubscription.EdgeSubscription:
		if id := m.subscription; id != nil {
			return []ent.Value{*id}
		}
	case usersubscription.EdgePayments:
		ids := make([]ent.Value, 0, len(m.payments))
		for id := range m.payments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserSubscriptionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedpayments != nil {
		edges = append(edges, usersubscription.EdgePayments)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserSubscriptionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case usersubscription.EdgePayments:
		ids := make([]ent.Value, 0, len(m.removedpayments))
		for id := range m.removedpayments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserSubscriptionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareduser {
		edges = append(edges, usersubscription.EdgeUser)
	}
	if m.clearedsubscription {
		edges = append(edges, usersubscription.EdgeSubscription)
	}
	if m.clearedpayments {
		edges = append(edges, usersubscription.EdgePayments)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserSubscriptionMutation) EdgeCleared(name string) bool {
	switch name {
	case usersubscription.EdgeUser:
		return m.cleareduser
	case usersubscription.EdgeSubscription:
		return m.clearedsubscription
	case usersubscription.EdgePayments:
		return m.clearedpayments
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserSubscriptionMutation) ClearEdge(name string) error {
	switch name {
	case usersubscription.EdgeUser:
		m.ClearUser()
		return nil
	case usersubscription.EdgeSubscription:
		m.ClearSubscription()
		return nil
	}
	return fmt.Errorf("unknown UserSubscription unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserSubscriptionMutation) ResetEdge(name string) error {
	switch name {
	case usersubscription.EdgeUser:
		m.ResetUser()
		return nil
	case usersubscription.EdgeSubscription:
		m.ResetSubscription()
		return nil
	case usersubscription.EdgePayments:
		m.ResetPayments()
		return nil
	}
	return fmt.Errorf("unknown UserSubscription edge %s", name)
}
