// Code generated by ent, DO NOT EDIT.

package ent

import (
	"common/ent/cachedquestionmetadata"
	"common/ent/predicate"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCachedQuestionMetadata = "CachedQuestionMetadata"
)

// CachedQuestionMetadataMutation represents an operation that mutates the CachedQuestionMetadata nodes in the graph.
type CachedQuestionMetadataMutation struct {
	config
	op            Op
	typ           string
	id            *int
	key           *string
	_type         *string
	subject       *string
	exam          *string
	is_processed  *bool
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*CachedQuestionMetadata, error)
	predicates    []predicate.CachedQuestionMetadata
}

var _ ent.Mutation = (*CachedQuestionMetadataMutation)(nil)

// cachedquestionmetadataOption allows management of the mutation configuration using functional options.
type cachedquestionmetadataOption func(*CachedQuestionMetadataMutation)

// newCachedQuestionMetadataMutation creates new mutation for the CachedQuestionMetadata entity.
func newCachedQuestionMetadataMutation(c config, op Op, opts ...cachedquestionmetadataOption) *CachedQuestionMetadataMutation {
	m := &CachedQuestionMetadataMutation{
		config:        c,
		op:            op,
		typ:           TypeCachedQuestionMetadata,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCachedQuestionMetadataID sets the ID field of the mutation.
func withCachedQuestionMetadataID(id int) cachedquestionmetadataOption {
	return func(m *CachedQuestionMetadataMutation) {
		var (
			err   error
			once  sync.Once
			value *CachedQuestionMetadata
		)
		m.oldValue = func(ctx context.Context) (*CachedQuestionMetadata, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CachedQuestionMetadata.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCachedQuestionMetadata sets the old CachedQuestionMetadata of the mutation.
func withCachedQuestionMetadata(node *CachedQuestionMetadata) cachedquestionmetadataOption {
	return func(m *CachedQuestionMetadataMutation) {
		m.oldValue = func(context.Context) (*CachedQuestionMetadata, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CachedQuestionMetadataMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CachedQuestionMetadataMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CachedQuestionMetadataMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CachedQuestionMetadataMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CachedQuestionMetadata.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetKey sets the "key" field.
func (m *CachedQuestionMetadataMutation) SetKey(s string) {
	m.key = &s
}

// Key returns the value of the "key" field in the mutation.
func (m *CachedQuestionMetadataMutation) Key() (r string, exists bool) {
	v := m.key
	if v == nil {
		return
	}
	return *v, true
}

// OldKey returns the old "key" field's value of the CachedQuestionMetadata entity.
// If the CachedQuestionMetadata object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CachedQuestionMetadataMutation) OldKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKey: %w", err)
	}
	return oldValue.Key, nil
}

// ResetKey resets all changes to the "key" field.
func (m *CachedQuestionMetadataMutation) ResetKey() {
	m.key = nil
}

// SetType sets the "type" field.
func (m *CachedQuestionMetadataMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *CachedQuestionMetadataMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the CachedQuestionMetadata entity.
// If the CachedQuestionMetadata object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CachedQuestionMetadataMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *CachedQuestionMetadataMutation) ResetType() {
	m._type = nil
}

// SetSubject sets the "subject" field.
func (m *CachedQuestionMetadataMutation) SetSubject(s string) {
	m.subject = &s
}

// Subject returns the value of the "subject" field in the mutation.
func (m *CachedQuestionMetadataMutation) Subject() (r string, exists bool) {
	v := m.subject
	if v == nil {
		return
	}
	return *v, true
}

// OldSubject returns the old "subject" field's value of the CachedQuestionMetadata entity.
// If the CachedQuestionMetadata object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CachedQuestionMetadataMutation) OldSubject(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubject is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubject requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubject: %w", err)
	}
	return oldValue.Subject, nil
}

// ResetSubject resets all changes to the "subject" field.
func (m *CachedQuestionMetadataMutation) ResetSubject() {
	m.subject = nil
}

// SetExam sets the "exam" field.
func (m *CachedQuestionMetadataMutation) SetExam(s string) {
	m.exam = &s
}

// Exam returns the value of the "exam" field in the mutation.
func (m *CachedQuestionMetadataMutation) Exam() (r string, exists bool) {
	v := m.exam
	if v == nil {
		return
	}
	return *v, true
}

// OldExam returns the old "exam" field's value of the CachedQuestionMetadata entity.
// If the CachedQuestionMetadata object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CachedQuestionMetadataMutation) OldExam(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExam is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExam requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExam: %w", err)
	}
	return oldValue.Exam, nil
}

// ResetExam resets all changes to the "exam" field.
func (m *CachedQuestionMetadataMutation) ResetExam() {
	m.exam = nil
}

// SetIsProcessed sets the "is_processed" field.
func (m *CachedQuestionMetadataMutation) SetIsProcessed(b bool) {
	m.is_processed = &b
}

// IsProcessed returns the value of the "is_processed" field in the mutation.
func (m *CachedQuestionMetadataMutation) IsProcessed() (r bool, exists bool) {
	v := m.is_processed
	if v == nil {
		return
	}
	return *v, true
}

// OldIsProcessed returns the old "is_processed" field's value of the CachedQuestionMetadata entity.
// If the CachedQuestionMetadata object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CachedQuestionMetadataMutation) OldIsProcessed(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsProcessed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsProcessed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsProcessed: %w", err)
	}
	return oldValue.IsProcessed, nil
}

// ResetIsProcessed resets all changes to the "is_processed" field.
func (m *CachedQuestionMetadataMutation) ResetIsProcessed() {
	m.is_processed = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CachedQuestionMetadataMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CachedQuestionMetadataMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CachedQuestionMetadata entity.
// If the CachedQuestionMetadata object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CachedQuestionMetadataMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CachedQuestionMetadataMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CachedQuestionMetadataMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CachedQuestionMetadataMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CachedQuestionMetadata entity.
// If the CachedQuestionMetadata object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CachedQuestionMetadataMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CachedQuestionMetadataMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the CachedQuestionMetadataMutation builder.
func (m *CachedQuestionMetadataMutation) Where(ps ...predicate.CachedQuestionMetadata) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CachedQuestionMetadataMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CachedQuestionMetadataMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CachedQuestionMetadata, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CachedQuestionMetadataMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CachedQuestionMetadataMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CachedQuestionMetadata).
func (m *CachedQuestionMetadataMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CachedQuestionMetadataMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.key != nil {
		fields = append(fields, cachedquestionmetadata.FieldKey)
	}
	if m._type != nil {
		fields = append(fields, cachedquestionmetadata.FieldType)
	}
	if m.subject != nil {
		fields = append(fields, cachedquestionmetadata.FieldSubject)
	}
	if m.exam != nil {
		fields = append(fields, cachedquestionmetadata.FieldExam)
	}
	if m.is_processed != nil {
		fields = append(fields, cachedquestionmetadata.FieldIsProcessed)
	}
	if m.created_at != nil {
		fields = append(fields, cachedquestionmetadata.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, cachedquestionmetadata.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CachedQuestionMetadataMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case cachedquestionmetadata.FieldKey:
		return m.Key()
	case cachedquestionmetadata.FieldType:
		return m.GetType()
	case cachedquestionmetadata.FieldSubject:
		return m.Subject()
	case cachedquestionmetadata.FieldExam:
		return m.Exam()
	case cachedquestionmetadata.FieldIsProcessed:
		return m.IsProcessed()
	case cachedquestionmetadata.FieldCreatedAt:
		return m.CreatedAt()
	case cachedquestionmetadata.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CachedQuestionMetadataMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case cachedquestionmetadata.FieldKey:
		return m.OldKey(ctx)
	case cachedquestionmetadata.FieldType:
		return m.OldType(ctx)
	case cachedquestionmetadata.FieldSubject:
		return m.OldSubject(ctx)
	case cachedquestionmetadata.FieldExam:
		return m.OldExam(ctx)
	case cachedquestionmetadata.FieldIsProcessed:
		return m.OldIsProcessed(ctx)
	case cachedquestionmetadata.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case cachedquestionmetadata.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown CachedQuestionMetadata field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CachedQuestionMetadataMutation) SetField(name string, value ent.Value) error {
	switch name {
	case cachedquestionmetadata.FieldKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKey(v)
		return nil
	case cachedquestionmetadata.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case cachedquestionmetadata.FieldSubject:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubject(v)
		return nil
	case cachedquestionmetadata.FieldExam:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExam(v)
		return nil
	case cachedquestionmetadata.FieldIsProcessed:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsProcessed(v)
		return nil
	case cachedquestionmetadata.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case cachedquestionmetadata.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown CachedQuestionMetadata field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CachedQuestionMetadataMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CachedQuestionMetadataMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CachedQuestionMetadataMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CachedQuestionMetadata numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CachedQuestionMetadataMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CachedQuestionMetadataMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CachedQuestionMetadataMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CachedQuestionMetadata nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CachedQuestionMetadataMutation) ResetField(name string) error {
	switch name {
	case cachedquestionmetadata.FieldKey:
		m.ResetKey()
		return nil
	case cachedquestionmetadata.FieldType:
		m.ResetType()
		return nil
	case cachedquestionmetadata.FieldSubject:
		m.ResetSubject()
		return nil
	case cachedquestionmetadata.FieldExam:
		m.ResetExam()
		return nil
	case cachedquestionmetadata.FieldIsProcessed:
		m.ResetIsProcessed()
		return nil
	case cachedquestionmetadata.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case cachedquestionmetadata.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown CachedQuestionMetadata field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CachedQuestionMetadataMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CachedQuestionMetadataMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CachedQuestionMetadataMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CachedQuestionMetadataMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CachedQuestionMetadataMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CachedQuestionMetadataMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CachedQuestionMetadataMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CachedQuestionMetadata unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CachedQuestionMetadataMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CachedQuestionMetadata edge %s", name)
}
