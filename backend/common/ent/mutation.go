// Code generated by ent, DO NOT EDIT.

package ent

import (
	"common/ent/cachedexam"
	"common/ent/exam"
	"common/ent/examattempt"
	"common/ent/examcategory"
	"common/ent/examsetting"
	"common/ent/generatedexam"
	"common/ent/predicate"
	"common/ent/user"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCachedExam    = "CachedExam"
	TypeExam          = "Exam"
	TypeExamAttempt   = "ExamAttempt"
	TypeExamCategory  = "ExamCategory"
	TypeExamResult    = "ExamResult"
	TypeExamSetting   = "ExamSetting"
	TypeGeneratedExam = "GeneratedExam"
	TypeUser          = "User"
)

// CachedExamMutation represents an operation that mutates the CachedExam nodes in the graph.
type CachedExamMutation struct {
	config
	op            Op
	typ           string
	id            *int
	cache_uid     *string
	is_used       *bool
	expires_at    *time.Time
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	exam          *int
	clearedexam   bool
	done          bool
	oldValue      func(context.Context) (*CachedExam, error)
	predicates    []predicate.CachedExam
}

var _ ent.Mutation = (*CachedExamMutation)(nil)

// cachedexamOption allows management of the mutation configuration using functional options.
type cachedexamOption func(*CachedExamMutation)

// newCachedExamMutation creates new mutation for the CachedExam entity.
func newCachedExamMutation(c config, op Op, opts ...cachedexamOption) *CachedExamMutation {
	m := &CachedExamMutation{
		config:        c,
		op:            op,
		typ:           TypeCachedExam,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCachedExamID sets the ID field of the mutation.
func withCachedExamID(id int) cachedexamOption {
	return func(m *CachedExamMutation) {
		var (
			err   error
			once  sync.Once
			value *CachedExam
		)
		m.oldValue = func(ctx context.Context) (*CachedExam, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CachedExam.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCachedExam sets the old CachedExam of the mutation.
func withCachedExam(node *CachedExam) cachedexamOption {
	return func(m *CachedExamMutation) {
		m.oldValue = func(context.Context) (*CachedExam, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CachedExamMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CachedExamMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CachedExamMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CachedExamMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CachedExam.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCacheUID sets the "cache_uid" field.
func (m *CachedExamMutation) SetCacheUID(s string) {
	m.cache_uid = &s
}

// CacheUID returns the value of the "cache_uid" field in the mutation.
func (m *CachedExamMutation) CacheUID() (r string, exists bool) {
	v := m.cache_uid
	if v == nil {
		return
	}
	return *v, true
}

// OldCacheUID returns the old "cache_uid" field's value of the CachedExam entity.
// If the CachedExam object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CachedExamMutation) OldCacheUID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCacheUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCacheUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCacheUID: %w", err)
	}
	return oldValue.CacheUID, nil
}

// ResetCacheUID resets all changes to the "cache_uid" field.
func (m *CachedExamMutation) ResetCacheUID() {
	m.cache_uid = nil
}

// SetIsUsed sets the "is_used" field.
func (m *CachedExamMutation) SetIsUsed(b bool) {
	m.is_used = &b
}

// IsUsed returns the value of the "is_used" field in the mutation.
func (m *CachedExamMutation) IsUsed() (r bool, exists bool) {
	v := m.is_used
	if v == nil {
		return
	}
	return *v, true
}

// OldIsUsed returns the old "is_used" field's value of the CachedExam entity.
// If the CachedExam object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CachedExamMutation) OldIsUsed(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsUsed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsUsed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsUsed: %w", err)
	}
	return oldValue.IsUsed, nil
}

// ResetIsUsed resets all changes to the "is_used" field.
func (m *CachedExamMutation) ResetIsUsed() {
	m.is_used = nil
}

// SetExpiresAt sets the "expires_at" field.
func (m *CachedExamMutation) SetExpiresAt(t time.Time) {
	m.expires_at = &t
}

// ExpiresAt returns the value of the "expires_at" field in the mutation.
func (m *CachedExamMutation) ExpiresAt() (r time.Time, exists bool) {
	v := m.expires_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiresAt returns the old "expires_at" field's value of the CachedExam entity.
// If the CachedExam object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CachedExamMutation) OldExpiresAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiresAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiresAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiresAt: %w", err)
	}
	return oldValue.ExpiresAt, nil
}

// ResetExpiresAt resets all changes to the "expires_at" field.
func (m *CachedExamMutation) ResetExpiresAt() {
	m.expires_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CachedExamMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CachedExamMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CachedExam entity.
// If the CachedExam object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CachedExamMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CachedExamMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CachedExamMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CachedExamMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CachedExam entity.
// If the CachedExam object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CachedExamMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CachedExamMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetExamID sets the "exam" edge to the Exam entity by id.
func (m *CachedExamMutation) SetExamID(id int) {
	m.exam = &id
}

// ClearExam clears the "exam" edge to the Exam entity.
func (m *CachedExamMutation) ClearExam() {
	m.clearedexam = true
}

// ExamCleared reports if the "exam" edge to the Exam entity was cleared.
func (m *CachedExamMutation) ExamCleared() bool {
	return m.clearedexam
}

// ExamID returns the "exam" edge ID in the mutation.
func (m *CachedExamMutation) ExamID() (id int, exists bool) {
	if m.exam != nil {
		return *m.exam, true
	}
	return
}

// ExamIDs returns the "exam" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ExamID instead. It exists only for internal usage by the builders.
func (m *CachedExamMutation) ExamIDs() (ids []int) {
	if id := m.exam; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetExam resets all changes to the "exam" edge.
func (m *CachedExamMutation) ResetExam() {
	m.exam = nil
	m.clearedexam = false
}

// Where appends a list predicates to the CachedExamMutation builder.
func (m *CachedExamMutation) Where(ps ...predicate.CachedExam) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CachedExamMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CachedExamMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CachedExam, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CachedExamMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CachedExamMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CachedExam).
func (m *CachedExamMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CachedExamMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.cache_uid != nil {
		fields = append(fields, cachedexam.FieldCacheUID)
	}
	if m.is_used != nil {
		fields = append(fields, cachedexam.FieldIsUsed)
	}
	if m.expires_at != nil {
		fields = append(fields, cachedexam.FieldExpiresAt)
	}
	if m.created_at != nil {
		fields = append(fields, cachedexam.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, cachedexam.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CachedExamMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case cachedexam.FieldCacheUID:
		return m.CacheUID()
	case cachedexam.FieldIsUsed:
		return m.IsUsed()
	case cachedexam.FieldExpiresAt:
		return m.ExpiresAt()
	case cachedexam.FieldCreatedAt:
		return m.CreatedAt()
	case cachedexam.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CachedExamMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case cachedexam.FieldCacheUID:
		return m.OldCacheUID(ctx)
	case cachedexam.FieldIsUsed:
		return m.OldIsUsed(ctx)
	case cachedexam.FieldExpiresAt:
		return m.OldExpiresAt(ctx)
	case cachedexam.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case cachedexam.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown CachedExam field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CachedExamMutation) SetField(name string, value ent.Value) error {
	switch name {
	case cachedexam.FieldCacheUID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCacheUID(v)
		return nil
	case cachedexam.FieldIsUsed:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsUsed(v)
		return nil
	case cachedexam.FieldExpiresAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiresAt(v)
		return nil
	case cachedexam.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case cachedexam.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown CachedExam field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CachedExamMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CachedExamMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CachedExamMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CachedExam numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CachedExamMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CachedExamMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CachedExamMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CachedExam nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CachedExamMutation) ResetField(name string) error {
	switch name {
	case cachedexam.FieldCacheUID:
		m.ResetCacheUID()
		return nil
	case cachedexam.FieldIsUsed:
		m.ResetIsUsed()
		return nil
	case cachedexam.FieldExpiresAt:
		m.ResetExpiresAt()
		return nil
	case cachedexam.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case cachedexam.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown CachedExam field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CachedExamMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.exam != nil {
		edges = append(edges, cachedexam.EdgeExam)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CachedExamMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case cachedexam.EdgeExam:
		if id := m.exam; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CachedExamMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CachedExamMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CachedExamMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedexam {
		edges = append(edges, cachedexam.EdgeExam)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CachedExamMutation) EdgeCleared(name string) bool {
	switch name {
	case cachedexam.EdgeExam:
		return m.clearedexam
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CachedExamMutation) ClearEdge(name string) error {
	switch name {
	case cachedexam.EdgeExam:
		m.ClearExam()
		return nil
	}
	return fmt.Errorf("unknown CachedExam unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CachedExamMutation) ResetEdge(name string) error {
	switch name {
	case cachedexam.EdgeExam:
		m.ResetExam()
		return nil
	}
	return fmt.Errorf("unknown CachedExam edge %s", name)
}

// ExamMutation represents an operation that mutates the Exam nodes in the graph.
type ExamMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	name                  *string
	description           *string
	is_active             *bool
	created_at            *time.Time
	updated_at            *time.Time
	clearedFields         map[string]struct{}
	category              *int
	clearedcategory       bool
	setting               *int
	clearedsetting        bool
	cached_exam           map[int]struct{}
	removedcached_exam    map[int]struct{}
	clearedcached_exam    bool
	generatedexams        map[int]struct{}
	removedgeneratedexams map[int]struct{}
	clearedgeneratedexams bool
	done                  bool
	oldValue              func(context.Context) (*Exam, error)
	predicates            []predicate.Exam
}

var _ ent.Mutation = (*ExamMutation)(nil)

// examOption allows management of the mutation configuration using functional options.
type examOption func(*ExamMutation)

// newExamMutation creates new mutation for the Exam entity.
func newExamMutation(c config, op Op, opts ...examOption) *ExamMutation {
	m := &ExamMutation{
		config:        c,
		op:            op,
		typ:           TypeExam,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExamID sets the ID field of the mutation.
func withExamID(id int) examOption {
	return func(m *ExamMutation) {
		var (
			err   error
			once  sync.Once
			value *Exam
		)
		m.oldValue = func(ctx context.Context) (*Exam, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Exam.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withExam sets the old Exam of the mutation.
func withExam(node *Exam) examOption {
	return func(m *ExamMutation) {
		m.oldValue = func(context.Context) (*Exam, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExamMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExamMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ExamMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ExamMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Exam.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ExamMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ExamMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Exam entity.
// If the Exam object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ExamMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *ExamMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ExamMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Exam entity.
// If the Exam object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ExamMutation) ResetDescription() {
	m.description = nil
}

// SetIsActive sets the "is_active" field.
func (m *ExamMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *ExamMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the Exam entity.
// If the Exam object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *ExamMutation) ResetIsActive() {
	m.is_active = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ExamMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ExamMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Exam entity.
// If the Exam object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ExamMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ExamMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ExamMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Exam entity.
// If the Exam object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ExamMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCategoryID sets the "category" edge to the ExamCategory entity by id.
func (m *ExamMutation) SetCategoryID(id int) {
	m.category = &id
}

// ClearCategory clears the "category" edge to the ExamCategory entity.
func (m *ExamMutation) ClearCategory() {
	m.clearedcategory = true
}

// CategoryCleared reports if the "category" edge to the ExamCategory entity was cleared.
func (m *ExamMutation) CategoryCleared() bool {
	return m.clearedcategory
}

// CategoryID returns the "category" edge ID in the mutation.
func (m *ExamMutation) CategoryID() (id int, exists bool) {
	if m.category != nil {
		return *m.category, true
	}
	return
}

// CategoryIDs returns the "category" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CategoryID instead. It exists only for internal usage by the builders.
func (m *ExamMutation) CategoryIDs() (ids []int) {
	if id := m.category; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCategory resets all changes to the "category" edge.
func (m *ExamMutation) ResetCategory() {
	m.category = nil
	m.clearedcategory = false
}

// SetSettingID sets the "setting" edge to the ExamSetting entity by id.
func (m *ExamMutation) SetSettingID(id int) {
	m.setting = &id
}

// ClearSetting clears the "setting" edge to the ExamSetting entity.
func (m *ExamMutation) ClearSetting() {
	m.clearedsetting = true
}

// SettingCleared reports if the "setting" edge to the ExamSetting entity was cleared.
func (m *ExamMutation) SettingCleared() bool {
	return m.clearedsetting
}

// SettingID returns the "setting" edge ID in the mutation.
func (m *ExamMutation) SettingID() (id int, exists bool) {
	if m.setting != nil {
		return *m.setting, true
	}
	return
}

// SettingIDs returns the "setting" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SettingID instead. It exists only for internal usage by the builders.
func (m *ExamMutation) SettingIDs() (ids []int) {
	if id := m.setting; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSetting resets all changes to the "setting" edge.
func (m *ExamMutation) ResetSetting() {
	m.setting = nil
	m.clearedsetting = false
}

// AddCachedExamIDs adds the "cached_exam" edge to the CachedExam entity by ids.
func (m *ExamMutation) AddCachedExamIDs(ids ...int) {
	if m.cached_exam == nil {
		m.cached_exam = make(map[int]struct{})
	}
	for i := range ids {
		m.cached_exam[ids[i]] = struct{}{}
	}
}

// ClearCachedExam clears the "cached_exam" edge to the CachedExam entity.
func (m *ExamMutation) ClearCachedExam() {
	m.clearedcached_exam = true
}

// CachedExamCleared reports if the "cached_exam" edge to the CachedExam entity was cleared.
func (m *ExamMutation) CachedExamCleared() bool {
	return m.clearedcached_exam
}

// RemoveCachedExamIDs removes the "cached_exam" edge to the CachedExam entity by IDs.
func (m *ExamMutation) RemoveCachedExamIDs(ids ...int) {
	if m.removedcached_exam == nil {
		m.removedcached_exam = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.cached_exam, ids[i])
		m.removedcached_exam[ids[i]] = struct{}{}
	}
}

// RemovedCachedExam returns the removed IDs of the "cached_exam" edge to the CachedExam entity.
func (m *ExamMutation) RemovedCachedExamIDs() (ids []int) {
	for id := range m.removedcached_exam {
		ids = append(ids, id)
	}
	return
}

// CachedExamIDs returns the "cached_exam" edge IDs in the mutation.
func (m *ExamMutation) CachedExamIDs() (ids []int) {
	for id := range m.cached_exam {
		ids = append(ids, id)
	}
	return
}

// ResetCachedExam resets all changes to the "cached_exam" edge.
func (m *ExamMutation) ResetCachedExam() {
	m.cached_exam = nil
	m.clearedcached_exam = false
	m.removedcached_exam = nil
}

// AddGeneratedexamIDs adds the "generatedexams" edge to the GeneratedExam entity by ids.
func (m *ExamMutation) AddGeneratedexamIDs(ids ...int) {
	if m.generatedexams == nil {
		m.generatedexams = make(map[int]struct{})
	}
	for i := range ids {
		m.generatedexams[ids[i]] = struct{}{}
	}
}

// ClearGeneratedexams clears the "generatedexams" edge to the GeneratedExam entity.
func (m *ExamMutation) ClearGeneratedexams() {
	m.clearedgeneratedexams = true
}

// GeneratedexamsCleared reports if the "generatedexams" edge to the GeneratedExam entity was cleared.
func (m *ExamMutation) GeneratedexamsCleared() bool {
	return m.clearedgeneratedexams
}

// RemoveGeneratedexamIDs removes the "generatedexams" edge to the GeneratedExam entity by IDs.
func (m *ExamMutation) RemoveGeneratedexamIDs(ids ...int) {
	if m.removedgeneratedexams == nil {
		m.removedgeneratedexams = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.generatedexams, ids[i])
		m.removedgeneratedexams[ids[i]] = struct{}{}
	}
}

// RemovedGeneratedexams returns the removed IDs of the "generatedexams" edge to the GeneratedExam entity.
func (m *ExamMutation) RemovedGeneratedexamsIDs() (ids []int) {
	for id := range m.removedgeneratedexams {
		ids = append(ids, id)
	}
	return
}

// GeneratedexamsIDs returns the "generatedexams" edge IDs in the mutation.
func (m *ExamMutation) GeneratedexamsIDs() (ids []int) {
	for id := range m.generatedexams {
		ids = append(ids, id)
	}
	return
}

// ResetGeneratedexams resets all changes to the "generatedexams" edge.
func (m *ExamMutation) ResetGeneratedexams() {
	m.generatedexams = nil
	m.clearedgeneratedexams = false
	m.removedgeneratedexams = nil
}

// Where appends a list predicates to the ExamMutation builder.
func (m *ExamMutation) Where(ps ...predicate.Exam) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ExamMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ExamMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Exam, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ExamMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ExamMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Exam).
func (m *ExamMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ExamMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, exam.FieldName)
	}
	if m.description != nil {
		fields = append(fields, exam.FieldDescription)
	}
	if m.is_active != nil {
		fields = append(fields, exam.FieldIsActive)
	}
	if m.created_at != nil {
		fields = append(fields, exam.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, exam.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ExamMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case exam.FieldName:
		return m.Name()
	case exam.FieldDescription:
		return m.Description()
	case exam.FieldIsActive:
		return m.IsActive()
	case exam.FieldCreatedAt:
		return m.CreatedAt()
	case exam.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ExamMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case exam.FieldName:
		return m.OldName(ctx)
	case exam.FieldDescription:
		return m.OldDescription(ctx)
	case exam.FieldIsActive:
		return m.OldIsActive(ctx)
	case exam.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case exam.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Exam field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExamMutation) SetField(name string, value ent.Value) error {
	switch name {
	case exam.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case exam.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case exam.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case exam.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case exam.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Exam field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ExamMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ExamMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExamMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Exam numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ExamMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ExamMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExamMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Exam nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ExamMutation) ResetField(name string) error {
	switch name {
	case exam.FieldName:
		m.ResetName()
		return nil
	case exam.FieldDescription:
		m.ResetDescription()
		return nil
	case exam.FieldIsActive:
		m.ResetIsActive()
		return nil
	case exam.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case exam.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Exam field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ExamMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.category != nil {
		edges = append(edges, exam.EdgeCategory)
	}
	if m.setting != nil {
		edges = append(edges, exam.EdgeSetting)
	}
	if m.cached_exam != nil {
		edges = append(edges, exam.EdgeCachedExam)
	}
	if m.generatedexams != nil {
		edges = append(edges, exam.EdgeGeneratedexams)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ExamMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case exam.EdgeCategory:
		if id := m.category; id != nil {
			return []ent.Value{*id}
		}
	case exam.EdgeSetting:
		if id := m.setting; id != nil {
			return []ent.Value{*id}
		}
	case exam.EdgeCachedExam:
		ids := make([]ent.Value, 0, len(m.cached_exam))
		for id := range m.cached_exam {
			ids = append(ids, id)
		}
		return ids
	case exam.EdgeGeneratedexams:
		ids := make([]ent.Value, 0, len(m.generatedexams))
		for id := range m.generatedexams {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ExamMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedcached_exam != nil {
		edges = append(edges, exam.EdgeCachedExam)
	}
	if m.removedgeneratedexams != nil {
		edges = append(edges, exam.EdgeGeneratedexams)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ExamMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case exam.EdgeCachedExam:
		ids := make([]ent.Value, 0, len(m.removedcached_exam))
		for id := range m.removedcached_exam {
			ids = append(ids, id)
		}
		return ids
	case exam.EdgeGeneratedexams:
		ids := make([]ent.Value, 0, len(m.removedgeneratedexams))
		for id := range m.removedgeneratedexams {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ExamMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedcategory {
		edges = append(edges, exam.EdgeCategory)
	}
	if m.clearedsetting {
		edges = append(edges, exam.EdgeSetting)
	}
	if m.clearedcached_exam {
		edges = append(edges, exam.EdgeCachedExam)
	}
	if m.clearedgeneratedexams {
		edges = append(edges, exam.EdgeGeneratedexams)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ExamMutation) EdgeCleared(name string) bool {
	switch name {
	case exam.EdgeCategory:
		return m.clearedcategory
	case exam.EdgeSetting:
		return m.clearedsetting
	case exam.EdgeCachedExam:
		return m.clearedcached_exam
	case exam.EdgeGeneratedexams:
		return m.clearedgeneratedexams
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ExamMutation) ClearEdge(name string) error {
	switch name {
	case exam.EdgeCategory:
		m.ClearCategory()
		return nil
	case exam.EdgeSetting:
		m.ClearSetting()
		return nil
	}
	return fmt.Errorf("unknown Exam unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ExamMutation) ResetEdge(name string) error {
	switch name {
	case exam.EdgeCategory:
		m.ResetCategory()
		return nil
	case exam.EdgeSetting:
		m.ResetSetting()
		return nil
	case exam.EdgeCachedExam:
		m.ResetCachedExam()
		return nil
	case exam.EdgeGeneratedexams:
		m.ResetGeneratedexams()
		return nil
	}
	return fmt.Errorf("unknown Exam edge %s", name)
}

// ExamAttemptMutation represents an operation that mutates the ExamAttempt nodes in the graph.
type ExamAttemptMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	attempt_number       *int
	addattempt_number    *int
	created_at           *time.Time
	updated_at           *time.Time
	clearedFields        map[string]struct{}
	generatedexam        *int
	clearedgeneratedexam bool
	user                 *uuid.UUID
	cleareduser          bool
	done                 bool
	oldValue             func(context.Context) (*ExamAttempt, error)
	predicates           []predicate.ExamAttempt
}

var _ ent.Mutation = (*ExamAttemptMutation)(nil)

// examattemptOption allows management of the mutation configuration using functional options.
type examattemptOption func(*ExamAttemptMutation)

// newExamAttemptMutation creates new mutation for the ExamAttempt entity.
func newExamAttemptMutation(c config, op Op, opts ...examattemptOption) *ExamAttemptMutation {
	m := &ExamAttemptMutation{
		config:        c,
		op:            op,
		typ:           TypeExamAttempt,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExamAttemptID sets the ID field of the mutation.
func withExamAttemptID(id int) examattemptOption {
	return func(m *ExamAttemptMutation) {
		var (
			err   error
			once  sync.Once
			value *ExamAttempt
		)
		m.oldValue = func(ctx context.Context) (*ExamAttempt, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ExamAttempt.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withExamAttempt sets the old ExamAttempt of the mutation.
func withExamAttempt(node *ExamAttempt) examattemptOption {
	return func(m *ExamAttemptMutation) {
		m.oldValue = func(context.Context) (*ExamAttempt, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExamAttemptMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExamAttemptMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ExamAttemptMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ExamAttemptMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ExamAttempt.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAttemptNumber sets the "attempt_number" field.
func (m *ExamAttemptMutation) SetAttemptNumber(i int) {
	m.attempt_number = &i
	m.addattempt_number = nil
}

// AttemptNumber returns the value of the "attempt_number" field in the mutation.
func (m *ExamAttemptMutation) AttemptNumber() (r int, exists bool) {
	v := m.attempt_number
	if v == nil {
		return
	}
	return *v, true
}

// OldAttemptNumber returns the old "attempt_number" field's value of the ExamAttempt entity.
// If the ExamAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamAttemptMutation) OldAttemptNumber(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAttemptNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAttemptNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAttemptNumber: %w", err)
	}
	return oldValue.AttemptNumber, nil
}

// AddAttemptNumber adds i to the "attempt_number" field.
func (m *ExamAttemptMutation) AddAttemptNumber(i int) {
	if m.addattempt_number != nil {
		*m.addattempt_number += i
	} else {
		m.addattempt_number = &i
	}
}

// AddedAttemptNumber returns the value that was added to the "attempt_number" field in this mutation.
func (m *ExamAttemptMutation) AddedAttemptNumber() (r int, exists bool) {
	v := m.addattempt_number
	if v == nil {
		return
	}
	return *v, true
}

// ResetAttemptNumber resets all changes to the "attempt_number" field.
func (m *ExamAttemptMutation) ResetAttemptNumber() {
	m.attempt_number = nil
	m.addattempt_number = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ExamAttemptMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ExamAttemptMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ExamAttempt entity.
// If the ExamAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamAttemptMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ExamAttemptMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ExamAttemptMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ExamAttemptMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ExamAttempt entity.
// If the ExamAttempt object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamAttemptMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ExamAttemptMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetGeneratedexamID sets the "generatedexam" edge to the GeneratedExam entity by id.
func (m *ExamAttemptMutation) SetGeneratedexamID(id int) {
	m.generatedexam = &id
}

// ClearGeneratedexam clears the "generatedexam" edge to the GeneratedExam entity.
func (m *ExamAttemptMutation) ClearGeneratedexam() {
	m.clearedgeneratedexam = true
}

// GeneratedexamCleared reports if the "generatedexam" edge to the GeneratedExam entity was cleared.
func (m *ExamAttemptMutation) GeneratedexamCleared() bool {
	return m.clearedgeneratedexam
}

// GeneratedexamID returns the "generatedexam" edge ID in the mutation.
func (m *ExamAttemptMutation) GeneratedexamID() (id int, exists bool) {
	if m.generatedexam != nil {
		return *m.generatedexam, true
	}
	return
}

// GeneratedexamIDs returns the "generatedexam" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GeneratedexamID instead. It exists only for internal usage by the builders.
func (m *ExamAttemptMutation) GeneratedexamIDs() (ids []int) {
	if id := m.generatedexam; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGeneratedexam resets all changes to the "generatedexam" edge.
func (m *ExamAttemptMutation) ResetGeneratedexam() {
	m.generatedexam = nil
	m.clearedgeneratedexam = false
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *ExamAttemptMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *ExamAttemptMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *ExamAttemptMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *ExamAttemptMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ExamAttemptMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ExamAttemptMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the ExamAttemptMutation builder.
func (m *ExamAttemptMutation) Where(ps ...predicate.ExamAttempt) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ExamAttemptMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ExamAttemptMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ExamAttempt, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ExamAttemptMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ExamAttemptMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ExamAttempt).
func (m *ExamAttemptMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ExamAttemptMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.attempt_number != nil {
		fields = append(fields, examattempt.FieldAttemptNumber)
	}
	if m.created_at != nil {
		fields = append(fields, examattempt.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, examattempt.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ExamAttemptMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case examattempt.FieldAttemptNumber:
		return m.AttemptNumber()
	case examattempt.FieldCreatedAt:
		return m.CreatedAt()
	case examattempt.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ExamAttemptMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case examattempt.FieldAttemptNumber:
		return m.OldAttemptNumber(ctx)
	case examattempt.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case examattempt.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ExamAttempt field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExamAttemptMutation) SetField(name string, value ent.Value) error {
	switch name {
	case examattempt.FieldAttemptNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAttemptNumber(v)
		return nil
	case examattempt.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case examattempt.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ExamAttempt field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ExamAttemptMutation) AddedFields() []string {
	var fields []string
	if m.addattempt_number != nil {
		fields = append(fields, examattempt.FieldAttemptNumber)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ExamAttemptMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case examattempt.FieldAttemptNumber:
		return m.AddedAttemptNumber()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExamAttemptMutation) AddField(name string, value ent.Value) error {
	switch name {
	case examattempt.FieldAttemptNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAttemptNumber(v)
		return nil
	}
	return fmt.Errorf("unknown ExamAttempt numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ExamAttemptMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ExamAttemptMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExamAttemptMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ExamAttempt nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ExamAttemptMutation) ResetField(name string) error {
	switch name {
	case examattempt.FieldAttemptNumber:
		m.ResetAttemptNumber()
		return nil
	case examattempt.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case examattempt.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown ExamAttempt field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ExamAttemptMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.generatedexam != nil {
		edges = append(edges, examattempt.EdgeGeneratedexam)
	}
	if m.user != nil {
		edges = append(edges, examattempt.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ExamAttemptMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case examattempt.EdgeGeneratedexam:
		if id := m.generatedexam; id != nil {
			return []ent.Value{*id}
		}
	case examattempt.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ExamAttemptMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ExamAttemptMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ExamAttemptMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedgeneratedexam {
		edges = append(edges, examattempt.EdgeGeneratedexam)
	}
	if m.cleareduser {
		edges = append(edges, examattempt.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ExamAttemptMutation) EdgeCleared(name string) bool {
	switch name {
	case examattempt.EdgeGeneratedexam:
		return m.clearedgeneratedexam
	case examattempt.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ExamAttemptMutation) ClearEdge(name string) error {
	switch name {
	case examattempt.EdgeGeneratedexam:
		m.ClearGeneratedexam()
		return nil
	case examattempt.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown ExamAttempt unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ExamAttemptMutation) ResetEdge(name string) error {
	switch name {
	case examattempt.EdgeGeneratedexam:
		m.ResetGeneratedexam()
		return nil
	case examattempt.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown ExamAttempt edge %s", name)
}

// ExamCategoryMutation represents an operation that mutates the ExamCategory nodes in the graph.
type ExamCategoryMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	description   *string
	is_active     *bool
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	exams         map[int]struct{}
	removedexams  map[int]struct{}
	clearedexams  bool
	done          bool
	oldValue      func(context.Context) (*ExamCategory, error)
	predicates    []predicate.ExamCategory
}

var _ ent.Mutation = (*ExamCategoryMutation)(nil)

// examcategoryOption allows management of the mutation configuration using functional options.
type examcategoryOption func(*ExamCategoryMutation)

// newExamCategoryMutation creates new mutation for the ExamCategory entity.
func newExamCategoryMutation(c config, op Op, opts ...examcategoryOption) *ExamCategoryMutation {
	m := &ExamCategoryMutation{
		config:        c,
		op:            op,
		typ:           TypeExamCategory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExamCategoryID sets the ID field of the mutation.
func withExamCategoryID(id int) examcategoryOption {
	return func(m *ExamCategoryMutation) {
		var (
			err   error
			once  sync.Once
			value *ExamCategory
		)
		m.oldValue = func(ctx context.Context) (*ExamCategory, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ExamCategory.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withExamCategory sets the old ExamCategory of the mutation.
func withExamCategory(node *ExamCategory) examcategoryOption {
	return func(m *ExamCategoryMutation) {
		m.oldValue = func(context.Context) (*ExamCategory, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExamCategoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExamCategoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ExamCategoryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ExamCategoryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ExamCategory.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ExamCategoryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ExamCategoryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the ExamCategory entity.
// If the ExamCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamCategoryMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ExamCategoryMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *ExamCategoryMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ExamCategoryMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the ExamCategory entity.
// If the ExamCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamCategoryMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ExamCategoryMutation) ResetDescription() {
	m.description = nil
}

// SetIsActive sets the "is_active" field.
func (m *ExamCategoryMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *ExamCategoryMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the ExamCategory entity.
// If the ExamCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamCategoryMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *ExamCategoryMutation) ResetIsActive() {
	m.is_active = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ExamCategoryMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ExamCategoryMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ExamCategory entity.
// If the ExamCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamCategoryMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ExamCategoryMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ExamCategoryMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ExamCategoryMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ExamCategory entity.
// If the ExamCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamCategoryMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ExamCategoryMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddExamIDs adds the "exams" edge to the Exam entity by ids.
func (m *ExamCategoryMutation) AddExamIDs(ids ...int) {
	if m.exams == nil {
		m.exams = make(map[int]struct{})
	}
	for i := range ids {
		m.exams[ids[i]] = struct{}{}
	}
}

// ClearExams clears the "exams" edge to the Exam entity.
func (m *ExamCategoryMutation) ClearExams() {
	m.clearedexams = true
}

// ExamsCleared reports if the "exams" edge to the Exam entity was cleared.
func (m *ExamCategoryMutation) ExamsCleared() bool {
	return m.clearedexams
}

// RemoveExamIDs removes the "exams" edge to the Exam entity by IDs.
func (m *ExamCategoryMutation) RemoveExamIDs(ids ...int) {
	if m.removedexams == nil {
		m.removedexams = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.exams, ids[i])
		m.removedexams[ids[i]] = struct{}{}
	}
}

// RemovedExams returns the removed IDs of the "exams" edge to the Exam entity.
func (m *ExamCategoryMutation) RemovedExamsIDs() (ids []int) {
	for id := range m.removedexams {
		ids = append(ids, id)
	}
	return
}

// ExamsIDs returns the "exams" edge IDs in the mutation.
func (m *ExamCategoryMutation) ExamsIDs() (ids []int) {
	for id := range m.exams {
		ids = append(ids, id)
	}
	return
}

// ResetExams resets all changes to the "exams" edge.
func (m *ExamCategoryMutation) ResetExams() {
	m.exams = nil
	m.clearedexams = false
	m.removedexams = nil
}

// Where appends a list predicates to the ExamCategoryMutation builder.
func (m *ExamCategoryMutation) Where(ps ...predicate.ExamCategory) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ExamCategoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ExamCategoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ExamCategory, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ExamCategoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ExamCategoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ExamCategory).
func (m *ExamCategoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ExamCategoryMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, examcategory.FieldName)
	}
	if m.description != nil {
		fields = append(fields, examcategory.FieldDescription)
	}
	if m.is_active != nil {
		fields = append(fields, examcategory.FieldIsActive)
	}
	if m.created_at != nil {
		fields = append(fields, examcategory.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, examcategory.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ExamCategoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case examcategory.FieldName:
		return m.Name()
	case examcategory.FieldDescription:
		return m.Description()
	case examcategory.FieldIsActive:
		return m.IsActive()
	case examcategory.FieldCreatedAt:
		return m.CreatedAt()
	case examcategory.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ExamCategoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case examcategory.FieldName:
		return m.OldName(ctx)
	case examcategory.FieldDescription:
		return m.OldDescription(ctx)
	case examcategory.FieldIsActive:
		return m.OldIsActive(ctx)
	case examcategory.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case examcategory.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ExamCategory field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExamCategoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case examcategory.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case examcategory.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case examcategory.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case examcategory.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case examcategory.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ExamCategory field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ExamCategoryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ExamCategoryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExamCategoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ExamCategory numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ExamCategoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ExamCategoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExamCategoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ExamCategory nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ExamCategoryMutation) ResetField(name string) error {
	switch name {
	case examcategory.FieldName:
		m.ResetName()
		return nil
	case examcategory.FieldDescription:
		m.ResetDescription()
		return nil
	case examcategory.FieldIsActive:
		m.ResetIsActive()
		return nil
	case examcategory.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case examcategory.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown ExamCategory field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ExamCategoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.exams != nil {
		edges = append(edges, examcategory.EdgeExams)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ExamCategoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case examcategory.EdgeExams:
		ids := make([]ent.Value, 0, len(m.exams))
		for id := range m.exams {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ExamCategoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedexams != nil {
		edges = append(edges, examcategory.EdgeExams)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ExamCategoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case examcategory.EdgeExams:
		ids := make([]ent.Value, 0, len(m.removedexams))
		for id := range m.removedexams {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ExamCategoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedexams {
		edges = append(edges, examcategory.EdgeExams)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ExamCategoryMutation) EdgeCleared(name string) bool {
	switch name {
	case examcategory.EdgeExams:
		return m.clearedexams
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ExamCategoryMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown ExamCategory unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ExamCategoryMutation) ResetEdge(name string) error {
	switch name {
	case examcategory.EdgeExams:
		m.ResetExams()
		return nil
	}
	return fmt.Errorf("unknown ExamCategory edge %s", name)
}

// ExamResultMutation represents an operation that mutates the ExamResult nodes in the graph.
type ExamResultMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ExamResult, error)
	predicates    []predicate.ExamResult
}

var _ ent.Mutation = (*ExamResultMutation)(nil)

// examresultOption allows management of the mutation configuration using functional options.
type examresultOption func(*ExamResultMutation)

// newExamResultMutation creates new mutation for the ExamResult entity.
func newExamResultMutation(c config, op Op, opts ...examresultOption) *ExamResultMutation {
	m := &ExamResultMutation{
		config:        c,
		op:            op,
		typ:           TypeExamResult,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExamResultID sets the ID field of the mutation.
func withExamResultID(id int) examresultOption {
	return func(m *ExamResultMutation) {
		var (
			err   error
			once  sync.Once
			value *ExamResult
		)
		m.oldValue = func(ctx context.Context) (*ExamResult, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ExamResult.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withExamResult sets the old ExamResult of the mutation.
func withExamResult(node *ExamResult) examresultOption {
	return func(m *ExamResultMutation) {
		m.oldValue = func(context.Context) (*ExamResult, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExamResultMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExamResultMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ExamResultMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ExamResultMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ExamResult.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the ExamResultMutation builder.
func (m *ExamResultMutation) Where(ps ...predicate.ExamResult) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ExamResultMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ExamResultMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ExamResult, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ExamResultMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ExamResultMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ExamResult).
func (m *ExamResultMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ExamResultMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ExamResultMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ExamResultMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown ExamResult field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExamResultMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ExamResult field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ExamResultMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ExamResultMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExamResultMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown ExamResult numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ExamResultMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ExamResultMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExamResultMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ExamResult nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ExamResultMutation) ResetField(name string) error {
	return fmt.Errorf("unknown ExamResult field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ExamResultMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ExamResultMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ExamResultMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ExamResultMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ExamResultMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ExamResultMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ExamResultMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ExamResult unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ExamResultMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ExamResult edge %s", name)
}

// ExamSettingMutation represents an operation that mutates the ExamSetting nodes in the graph.
type ExamSettingMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	number_of_questions    *int
	addnumber_of_questions *int
	duration_minutes       *int
	addduration_minutes    *int
	negative_marking       *float64
	addnegative_marking    *float64
	ai_prompt              *string
	other_details          *map[string]interface{}
	max_attempts           *int
	addmax_attempts        *int
	evaluation_ai_prompt   *string
	created_at             *time.Time
	updated_at             *time.Time
	clearedFields          map[string]struct{}
	exam                   *int
	clearedexam            bool
	done                   bool
	oldValue               func(context.Context) (*ExamSetting, error)
	predicates             []predicate.ExamSetting
}

var _ ent.Mutation = (*ExamSettingMutation)(nil)

// examsettingOption allows management of the mutation configuration using functional options.
type examsettingOption func(*ExamSettingMutation)

// newExamSettingMutation creates new mutation for the ExamSetting entity.
func newExamSettingMutation(c config, op Op, opts ...examsettingOption) *ExamSettingMutation {
	m := &ExamSettingMutation{
		config:        c,
		op:            op,
		typ:           TypeExamSetting,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExamSettingID sets the ID field of the mutation.
func withExamSettingID(id int) examsettingOption {
	return func(m *ExamSettingMutation) {
		var (
			err   error
			once  sync.Once
			value *ExamSetting
		)
		m.oldValue = func(ctx context.Context) (*ExamSetting, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ExamSetting.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withExamSetting sets the old ExamSetting of the mutation.
func withExamSetting(node *ExamSetting) examsettingOption {
	return func(m *ExamSettingMutation) {
		m.oldValue = func(context.Context) (*ExamSetting, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExamSettingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExamSettingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ExamSettingMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ExamSettingMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ExamSetting.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetNumberOfQuestions sets the "number_of_questions" field.
func (m *ExamSettingMutation) SetNumberOfQuestions(i int) {
	m.number_of_questions = &i
	m.addnumber_of_questions = nil
}

// NumberOfQuestions returns the value of the "number_of_questions" field in the mutation.
func (m *ExamSettingMutation) NumberOfQuestions() (r int, exists bool) {
	v := m.number_of_questions
	if v == nil {
		return
	}
	return *v, true
}

// OldNumberOfQuestions returns the old "number_of_questions" field's value of the ExamSetting entity.
// If the ExamSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamSettingMutation) OldNumberOfQuestions(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumberOfQuestions is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumberOfQuestions requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumberOfQuestions: %w", err)
	}
	return oldValue.NumberOfQuestions, nil
}

// AddNumberOfQuestions adds i to the "number_of_questions" field.
func (m *ExamSettingMutation) AddNumberOfQuestions(i int) {
	if m.addnumber_of_questions != nil {
		*m.addnumber_of_questions += i
	} else {
		m.addnumber_of_questions = &i
	}
}

// AddedNumberOfQuestions returns the value that was added to the "number_of_questions" field in this mutation.
func (m *ExamSettingMutation) AddedNumberOfQuestions() (r int, exists bool) {
	v := m.addnumber_of_questions
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumberOfQuestions resets all changes to the "number_of_questions" field.
func (m *ExamSettingMutation) ResetNumberOfQuestions() {
	m.number_of_questions = nil
	m.addnumber_of_questions = nil
}

// SetDurationMinutes sets the "duration_minutes" field.
func (m *ExamSettingMutation) SetDurationMinutes(i int) {
	m.duration_minutes = &i
	m.addduration_minutes = nil
}

// DurationMinutes returns the value of the "duration_minutes" field in the mutation.
func (m *ExamSettingMutation) DurationMinutes() (r int, exists bool) {
	v := m.duration_minutes
	if v == nil {
		return
	}
	return *v, true
}

// OldDurationMinutes returns the old "duration_minutes" field's value of the ExamSetting entity.
// If the ExamSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamSettingMutation) OldDurationMinutes(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDurationMinutes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDurationMinutes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDurationMinutes: %w", err)
	}
	return oldValue.DurationMinutes, nil
}

// AddDurationMinutes adds i to the "duration_minutes" field.
func (m *ExamSettingMutation) AddDurationMinutes(i int) {
	if m.addduration_minutes != nil {
		*m.addduration_minutes += i
	} else {
		m.addduration_minutes = &i
	}
}

// AddedDurationMinutes returns the value that was added to the "duration_minutes" field in this mutation.
func (m *ExamSettingMutation) AddedDurationMinutes() (r int, exists bool) {
	v := m.addduration_minutes
	if v == nil {
		return
	}
	return *v, true
}

// ResetDurationMinutes resets all changes to the "duration_minutes" field.
func (m *ExamSettingMutation) ResetDurationMinutes() {
	m.duration_minutes = nil
	m.addduration_minutes = nil
}

// SetNegativeMarking sets the "negative_marking" field.
func (m *ExamSettingMutation) SetNegativeMarking(f float64) {
	m.negative_marking = &f
	m.addnegative_marking = nil
}

// NegativeMarking returns the value of the "negative_marking" field in the mutation.
func (m *ExamSettingMutation) NegativeMarking() (r float64, exists bool) {
	v := m.negative_marking
	if v == nil {
		return
	}
	return *v, true
}

// OldNegativeMarking returns the old "negative_marking" field's value of the ExamSetting entity.
// If the ExamSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamSettingMutation) OldNegativeMarking(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNegativeMarking is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNegativeMarking requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNegativeMarking: %w", err)
	}
	return oldValue.NegativeMarking, nil
}

// AddNegativeMarking adds f to the "negative_marking" field.
func (m *ExamSettingMutation) AddNegativeMarking(f float64) {
	if m.addnegative_marking != nil {
		*m.addnegative_marking += f
	} else {
		m.addnegative_marking = &f
	}
}

// AddedNegativeMarking returns the value that was added to the "negative_marking" field in this mutation.
func (m *ExamSettingMutation) AddedNegativeMarking() (r float64, exists bool) {
	v := m.addnegative_marking
	if v == nil {
		return
	}
	return *v, true
}

// ClearNegativeMarking clears the value of the "negative_marking" field.
func (m *ExamSettingMutation) ClearNegativeMarking() {
	m.negative_marking = nil
	m.addnegative_marking = nil
	m.clearedFields[examsetting.FieldNegativeMarking] = struct{}{}
}

// NegativeMarkingCleared returns if the "negative_marking" field was cleared in this mutation.
func (m *ExamSettingMutation) NegativeMarkingCleared() bool {
	_, ok := m.clearedFields[examsetting.FieldNegativeMarking]
	return ok
}

// ResetNegativeMarking resets all changes to the "negative_marking" field.
func (m *ExamSettingMutation) ResetNegativeMarking() {
	m.negative_marking = nil
	m.addnegative_marking = nil
	delete(m.clearedFields, examsetting.FieldNegativeMarking)
}

// SetAiPrompt sets the "ai_prompt" field.
func (m *ExamSettingMutation) SetAiPrompt(s string) {
	m.ai_prompt = &s
}

// AiPrompt returns the value of the "ai_prompt" field in the mutation.
func (m *ExamSettingMutation) AiPrompt() (r string, exists bool) {
	v := m.ai_prompt
	if v == nil {
		return
	}
	return *v, true
}

// OldAiPrompt returns the old "ai_prompt" field's value of the ExamSetting entity.
// If the ExamSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamSettingMutation) OldAiPrompt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAiPrompt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAiPrompt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAiPrompt: %w", err)
	}
	return oldValue.AiPrompt, nil
}

// ClearAiPrompt clears the value of the "ai_prompt" field.
func (m *ExamSettingMutation) ClearAiPrompt() {
	m.ai_prompt = nil
	m.clearedFields[examsetting.FieldAiPrompt] = struct{}{}
}

// AiPromptCleared returns if the "ai_prompt" field was cleared in this mutation.
func (m *ExamSettingMutation) AiPromptCleared() bool {
	_, ok := m.clearedFields[examsetting.FieldAiPrompt]
	return ok
}

// ResetAiPrompt resets all changes to the "ai_prompt" field.
func (m *ExamSettingMutation) ResetAiPrompt() {
	m.ai_prompt = nil
	delete(m.clearedFields, examsetting.FieldAiPrompt)
}

// SetOtherDetails sets the "other_details" field.
func (m *ExamSettingMutation) SetOtherDetails(value map[string]interface{}) {
	m.other_details = &value
}

// OtherDetails returns the value of the "other_details" field in the mutation.
func (m *ExamSettingMutation) OtherDetails() (r map[string]interface{}, exists bool) {
	v := m.other_details
	if v == nil {
		return
	}
	return *v, true
}

// OldOtherDetails returns the old "other_details" field's value of the ExamSetting entity.
// If the ExamSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamSettingMutation) OldOtherDetails(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOtherDetails is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOtherDetails requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOtherDetails: %w", err)
	}
	return oldValue.OtherDetails, nil
}

// ClearOtherDetails clears the value of the "other_details" field.
func (m *ExamSettingMutation) ClearOtherDetails() {
	m.other_details = nil
	m.clearedFields[examsetting.FieldOtherDetails] = struct{}{}
}

// OtherDetailsCleared returns if the "other_details" field was cleared in this mutation.
func (m *ExamSettingMutation) OtherDetailsCleared() bool {
	_, ok := m.clearedFields[examsetting.FieldOtherDetails]
	return ok
}

// ResetOtherDetails resets all changes to the "other_details" field.
func (m *ExamSettingMutation) ResetOtherDetails() {
	m.other_details = nil
	delete(m.clearedFields, examsetting.FieldOtherDetails)
}

// SetMaxAttempts sets the "max_attempts" field.
func (m *ExamSettingMutation) SetMaxAttempts(i int) {
	m.max_attempts = &i
	m.addmax_attempts = nil
}

// MaxAttempts returns the value of the "max_attempts" field in the mutation.
func (m *ExamSettingMutation) MaxAttempts() (r int, exists bool) {
	v := m.max_attempts
	if v == nil {
		return
	}
	return *v, true
}

// OldMaxAttempts returns the old "max_attempts" field's value of the ExamSetting entity.
// If the ExamSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamSettingMutation) OldMaxAttempts(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMaxAttempts is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMaxAttempts requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaxAttempts: %w", err)
	}
	return oldValue.MaxAttempts, nil
}

// AddMaxAttempts adds i to the "max_attempts" field.
func (m *ExamSettingMutation) AddMaxAttempts(i int) {
	if m.addmax_attempts != nil {
		*m.addmax_attempts += i
	} else {
		m.addmax_attempts = &i
	}
}

// AddedMaxAttempts returns the value that was added to the "max_attempts" field in this mutation.
func (m *ExamSettingMutation) AddedMaxAttempts() (r int, exists bool) {
	v := m.addmax_attempts
	if v == nil {
		return
	}
	return *v, true
}

// ResetMaxAttempts resets all changes to the "max_attempts" field.
func (m *ExamSettingMutation) ResetMaxAttempts() {
	m.max_attempts = nil
	m.addmax_attempts = nil
}

// SetEvaluationAiPrompt sets the "evaluation_ai_prompt" field.
func (m *ExamSettingMutation) SetEvaluationAiPrompt(s string) {
	m.evaluation_ai_prompt = &s
}

// EvaluationAiPrompt returns the value of the "evaluation_ai_prompt" field in the mutation.
func (m *ExamSettingMutation) EvaluationAiPrompt() (r string, exists bool) {
	v := m.evaluation_ai_prompt
	if v == nil {
		return
	}
	return *v, true
}

// OldEvaluationAiPrompt returns the old "evaluation_ai_prompt" field's value of the ExamSetting entity.
// If the ExamSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamSettingMutation) OldEvaluationAiPrompt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEvaluationAiPrompt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEvaluationAiPrompt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEvaluationAiPrompt: %w", err)
	}
	return oldValue.EvaluationAiPrompt, nil
}

// ClearEvaluationAiPrompt clears the value of the "evaluation_ai_prompt" field.
func (m *ExamSettingMutation) ClearEvaluationAiPrompt() {
	m.evaluation_ai_prompt = nil
	m.clearedFields[examsetting.FieldEvaluationAiPrompt] = struct{}{}
}

// EvaluationAiPromptCleared returns if the "evaluation_ai_prompt" field was cleared in this mutation.
func (m *ExamSettingMutation) EvaluationAiPromptCleared() bool {
	_, ok := m.clearedFields[examsetting.FieldEvaluationAiPrompt]
	return ok
}

// ResetEvaluationAiPrompt resets all changes to the "evaluation_ai_prompt" field.
func (m *ExamSettingMutation) ResetEvaluationAiPrompt() {
	m.evaluation_ai_prompt = nil
	delete(m.clearedFields, examsetting.FieldEvaluationAiPrompt)
}

// SetCreatedAt sets the "created_at" field.
func (m *ExamSettingMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ExamSettingMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ExamSetting entity.
// If the ExamSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamSettingMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ExamSettingMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ExamSettingMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ExamSettingMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ExamSetting entity.
// If the ExamSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExamSettingMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ExamSettingMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetExamID sets the "exam" edge to the Exam entity by id.
func (m *ExamSettingMutation) SetExamID(id int) {
	m.exam = &id
}

// ClearExam clears the "exam" edge to the Exam entity.
func (m *ExamSettingMutation) ClearExam() {
	m.clearedexam = true
}

// ExamCleared reports if the "exam" edge to the Exam entity was cleared.
func (m *ExamSettingMutation) ExamCleared() bool {
	return m.clearedexam
}

// ExamID returns the "exam" edge ID in the mutation.
func (m *ExamSettingMutation) ExamID() (id int, exists bool) {
	if m.exam != nil {
		return *m.exam, true
	}
	return
}

// ExamIDs returns the "exam" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ExamID instead. It exists only for internal usage by the builders.
func (m *ExamSettingMutation) ExamIDs() (ids []int) {
	if id := m.exam; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetExam resets all changes to the "exam" edge.
func (m *ExamSettingMutation) ResetExam() {
	m.exam = nil
	m.clearedexam = false
}

// Where appends a list predicates to the ExamSettingMutation builder.
func (m *ExamSettingMutation) Where(ps ...predicate.ExamSetting) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ExamSettingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ExamSettingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ExamSetting, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ExamSettingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ExamSettingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ExamSetting).
func (m *ExamSettingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ExamSettingMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.number_of_questions != nil {
		fields = append(fields, examsetting.FieldNumberOfQuestions)
	}
	if m.duration_minutes != nil {
		fields = append(fields, examsetting.FieldDurationMinutes)
	}
	if m.negative_marking != nil {
		fields = append(fields, examsetting.FieldNegativeMarking)
	}
	if m.ai_prompt != nil {
		fields = append(fields, examsetting.FieldAiPrompt)
	}
	if m.other_details != nil {
		fields = append(fields, examsetting.FieldOtherDetails)
	}
	if m.max_attempts != nil {
		fields = append(fields, examsetting.FieldMaxAttempts)
	}
	if m.evaluation_ai_prompt != nil {
		fields = append(fields, examsetting.FieldEvaluationAiPrompt)
	}
	if m.created_at != nil {
		fields = append(fields, examsetting.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, examsetting.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ExamSettingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case examsetting.FieldNumberOfQuestions:
		return m.NumberOfQuestions()
	case examsetting.FieldDurationMinutes:
		return m.DurationMinutes()
	case examsetting.FieldNegativeMarking:
		return m.NegativeMarking()
	case examsetting.FieldAiPrompt:
		return m.AiPrompt()
	case examsetting.FieldOtherDetails:
		return m.OtherDetails()
	case examsetting.FieldMaxAttempts:
		return m.MaxAttempts()
	case examsetting.FieldEvaluationAiPrompt:
		return m.EvaluationAiPrompt()
	case examsetting.FieldCreatedAt:
		return m.CreatedAt()
	case examsetting.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ExamSettingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case examsetting.FieldNumberOfQuestions:
		return m.OldNumberOfQuestions(ctx)
	case examsetting.FieldDurationMinutes:
		return m.OldDurationMinutes(ctx)
	case examsetting.FieldNegativeMarking:
		return m.OldNegativeMarking(ctx)
	case examsetting.FieldAiPrompt:
		return m.OldAiPrompt(ctx)
	case examsetting.FieldOtherDetails:
		return m.OldOtherDetails(ctx)
	case examsetting.FieldMaxAttempts:
		return m.OldMaxAttempts(ctx)
	case examsetting.FieldEvaluationAiPrompt:
		return m.OldEvaluationAiPrompt(ctx)
	case examsetting.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case examsetting.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ExamSetting field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExamSettingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case examsetting.FieldNumberOfQuestions:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumberOfQuestions(v)
		return nil
	case examsetting.FieldDurationMinutes:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDurationMinutes(v)
		return nil
	case examsetting.FieldNegativeMarking:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNegativeMarking(v)
		return nil
	case examsetting.FieldAiPrompt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAiPrompt(v)
		return nil
	case examsetting.FieldOtherDetails:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOtherDetails(v)
		return nil
	case examsetting.FieldMaxAttempts:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaxAttempts(v)
		return nil
	case examsetting.FieldEvaluationAiPrompt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEvaluationAiPrompt(v)
		return nil
	case examsetting.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case examsetting.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ExamSetting field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ExamSettingMutation) AddedFields() []string {
	var fields []string
	if m.addnumber_of_questions != nil {
		fields = append(fields, examsetting.FieldNumberOfQuestions)
	}
	if m.addduration_minutes != nil {
		fields = append(fields, examsetting.FieldDurationMinutes)
	}
	if m.addnegative_marking != nil {
		fields = append(fields, examsetting.FieldNegativeMarking)
	}
	if m.addmax_attempts != nil {
		fields = append(fields, examsetting.FieldMaxAttempts)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ExamSettingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case examsetting.FieldNumberOfQuestions:
		return m.AddedNumberOfQuestions()
	case examsetting.FieldDurationMinutes:
		return m.AddedDurationMinutes()
	case examsetting.FieldNegativeMarking:
		return m.AddedNegativeMarking()
	case examsetting.FieldMaxAttempts:
		return m.AddedMaxAttempts()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExamSettingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case examsetting.FieldNumberOfQuestions:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumberOfQuestions(v)
		return nil
	case examsetting.FieldDurationMinutes:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDurationMinutes(v)
		return nil
	case examsetting.FieldNegativeMarking:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNegativeMarking(v)
		return nil
	case examsetting.FieldMaxAttempts:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMaxAttempts(v)
		return nil
	}
	return fmt.Errorf("unknown ExamSetting numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ExamSettingMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(examsetting.FieldNegativeMarking) {
		fields = append(fields, examsetting.FieldNegativeMarking)
	}
	if m.FieldCleared(examsetting.FieldAiPrompt) {
		fields = append(fields, examsetting.FieldAiPrompt)
	}
	if m.FieldCleared(examsetting.FieldOtherDetails) {
		fields = append(fields, examsetting.FieldOtherDetails)
	}
	if m.FieldCleared(examsetting.FieldEvaluationAiPrompt) {
		fields = append(fields, examsetting.FieldEvaluationAiPrompt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ExamSettingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExamSettingMutation) ClearField(name string) error {
	switch name {
	case examsetting.FieldNegativeMarking:
		m.ClearNegativeMarking()
		return nil
	case examsetting.FieldAiPrompt:
		m.ClearAiPrompt()
		return nil
	case examsetting.FieldOtherDetails:
		m.ClearOtherDetails()
		return nil
	case examsetting.FieldEvaluationAiPrompt:
		m.ClearEvaluationAiPrompt()
		return nil
	}
	return fmt.Errorf("unknown ExamSetting nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ExamSettingMutation) ResetField(name string) error {
	switch name {
	case examsetting.FieldNumberOfQuestions:
		m.ResetNumberOfQuestions()
		return nil
	case examsetting.FieldDurationMinutes:
		m.ResetDurationMinutes()
		return nil
	case examsetting.FieldNegativeMarking:
		m.ResetNegativeMarking()
		return nil
	case examsetting.FieldAiPrompt:
		m.ResetAiPrompt()
		return nil
	case examsetting.FieldOtherDetails:
		m.ResetOtherDetails()
		return nil
	case examsetting.FieldMaxAttempts:
		m.ResetMaxAttempts()
		return nil
	case examsetting.FieldEvaluationAiPrompt:
		m.ResetEvaluationAiPrompt()
		return nil
	case examsetting.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case examsetting.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown ExamSetting field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ExamSettingMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.exam != nil {
		edges = append(edges, examsetting.EdgeExam)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ExamSettingMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case examsetting.EdgeExam:
		if id := m.exam; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ExamSettingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ExamSettingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ExamSettingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedexam {
		edges = append(edges, examsetting.EdgeExam)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ExamSettingMutation) EdgeCleared(name string) bool {
	switch name {
	case examsetting.EdgeExam:
		return m.clearedexam
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ExamSettingMutation) ClearEdge(name string) error {
	switch name {
	case examsetting.EdgeExam:
		m.ClearExam()
		return nil
	}
	return fmt.Errorf("unknown ExamSetting unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ExamSettingMutation) ResetEdge(name string) error {
	switch name {
	case examsetting.EdgeExam:
		m.ResetExam()
		return nil
	}
	return fmt.Errorf("unknown ExamSetting edge %s", name)
}

// GeneratedExamMutation represents an operation that mutates the GeneratedExam nodes in the graph.
type GeneratedExamMutation struct {
	config
	op              Op
	typ             string
	id              *int
	is_active       *bool
	raw_exam_data   *map[string]interface{}
	created_at      *time.Time
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	exam            *int
	clearedexam     bool
	attempts        map[int]struct{}
	removedattempts map[int]struct{}
	clearedattempts bool
	done            bool
	oldValue        func(context.Context) (*GeneratedExam, error)
	predicates      []predicate.GeneratedExam
}

var _ ent.Mutation = (*GeneratedExamMutation)(nil)

// generatedexamOption allows management of the mutation configuration using functional options.
type generatedexamOption func(*GeneratedExamMutation)

// newGeneratedExamMutation creates new mutation for the GeneratedExam entity.
func newGeneratedExamMutation(c config, op Op, opts ...generatedexamOption) *GeneratedExamMutation {
	m := &GeneratedExamMutation{
		config:        c,
		op:            op,
		typ:           TypeGeneratedExam,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGeneratedExamID sets the ID field of the mutation.
func withGeneratedExamID(id int) generatedexamOption {
	return func(m *GeneratedExamMutation) {
		var (
			err   error
			once  sync.Once
			value *GeneratedExam
		)
		m.oldValue = func(ctx context.Context) (*GeneratedExam, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GeneratedExam.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGeneratedExam sets the old GeneratedExam of the mutation.
func withGeneratedExam(node *GeneratedExam) generatedexamOption {
	return func(m *GeneratedExamMutation) {
		m.oldValue = func(context.Context) (*GeneratedExam, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GeneratedExamMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GeneratedExamMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GeneratedExamMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GeneratedExamMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GeneratedExam.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIsActive sets the "is_active" field.
func (m *GeneratedExamMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the value of the "is_active" field in the mutation.
func (m *GeneratedExamMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "is_active" field's value of the GeneratedExam entity.
// If the GeneratedExam object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GeneratedExamMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive resets all changes to the "is_active" field.
func (m *GeneratedExamMutation) ResetIsActive() {
	m.is_active = nil
}

// SetRawExamData sets the "raw_exam_data" field.
func (m *GeneratedExamMutation) SetRawExamData(value map[string]interface{}) {
	m.raw_exam_data = &value
}

// RawExamData returns the value of the "raw_exam_data" field in the mutation.
func (m *GeneratedExamMutation) RawExamData() (r map[string]interface{}, exists bool) {
	v := m.raw_exam_data
	if v == nil {
		return
	}
	return *v, true
}

// OldRawExamData returns the old "raw_exam_data" field's value of the GeneratedExam entity.
// If the GeneratedExam object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GeneratedExamMutation) OldRawExamData(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRawExamData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRawExamData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRawExamData: %w", err)
	}
	return oldValue.RawExamData, nil
}

// ClearRawExamData clears the value of the "raw_exam_data" field.
func (m *GeneratedExamMutation) ClearRawExamData() {
	m.raw_exam_data = nil
	m.clearedFields[generatedexam.FieldRawExamData] = struct{}{}
}

// RawExamDataCleared returns if the "raw_exam_data" field was cleared in this mutation.
func (m *GeneratedExamMutation) RawExamDataCleared() bool {
	_, ok := m.clearedFields[generatedexam.FieldRawExamData]
	return ok
}

// ResetRawExamData resets all changes to the "raw_exam_data" field.
func (m *GeneratedExamMutation) ResetRawExamData() {
	m.raw_exam_data = nil
	delete(m.clearedFields, generatedexam.FieldRawExamData)
}

// SetCreatedAt sets the "created_at" field.
func (m *GeneratedExamMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GeneratedExamMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the GeneratedExam entity.
// If the GeneratedExam object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GeneratedExamMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GeneratedExamMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *GeneratedExamMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *GeneratedExamMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the GeneratedExam entity.
// If the GeneratedExam object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GeneratedExamMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *GeneratedExamMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetExamID sets the "exam" edge to the Exam entity by id.
func (m *GeneratedExamMutation) SetExamID(id int) {
	m.exam = &id
}

// ClearExam clears the "exam" edge to the Exam entity.
func (m *GeneratedExamMutation) ClearExam() {
	m.clearedexam = true
}

// ExamCleared reports if the "exam" edge to the Exam entity was cleared.
func (m *GeneratedExamMutation) ExamCleared() bool {
	return m.clearedexam
}

// ExamID returns the "exam" edge ID in the mutation.
func (m *GeneratedExamMutation) ExamID() (id int, exists bool) {
	if m.exam != nil {
		return *m.exam, true
	}
	return
}

// ExamIDs returns the "exam" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ExamID instead. It exists only for internal usage by the builders.
func (m *GeneratedExamMutation) ExamIDs() (ids []int) {
	if id := m.exam; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetExam resets all changes to the "exam" edge.
func (m *GeneratedExamMutation) ResetExam() {
	m.exam = nil
	m.clearedexam = false
}

// AddAttemptIDs adds the "attempts" edge to the ExamAttempt entity by ids.
func (m *GeneratedExamMutation) AddAttemptIDs(ids ...int) {
	if m.attempts == nil {
		m.attempts = make(map[int]struct{})
	}
	for i := range ids {
		m.attempts[ids[i]] = struct{}{}
	}
}

// ClearAttempts clears the "attempts" edge to the ExamAttempt entity.
func (m *GeneratedExamMutation) ClearAttempts() {
	m.clearedattempts = true
}

// AttemptsCleared reports if the "attempts" edge to the ExamAttempt entity was cleared.
func (m *GeneratedExamMutation) AttemptsCleared() bool {
	return m.clearedattempts
}

// RemoveAttemptIDs removes the "attempts" edge to the ExamAttempt entity by IDs.
func (m *GeneratedExamMutation) RemoveAttemptIDs(ids ...int) {
	if m.removedattempts == nil {
		m.removedattempts = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.attempts, ids[i])
		m.removedattempts[ids[i]] = struct{}{}
	}
}

// RemovedAttempts returns the removed IDs of the "attempts" edge to the ExamAttempt entity.
func (m *GeneratedExamMutation) RemovedAttemptsIDs() (ids []int) {
	for id := range m.removedattempts {
		ids = append(ids, id)
	}
	return
}

// AttemptsIDs returns the "attempts" edge IDs in the mutation.
func (m *GeneratedExamMutation) AttemptsIDs() (ids []int) {
	for id := range m.attempts {
		ids = append(ids, id)
	}
	return
}

// ResetAttempts resets all changes to the "attempts" edge.
func (m *GeneratedExamMutation) ResetAttempts() {
	m.attempts = nil
	m.clearedattempts = false
	m.removedattempts = nil
}

// Where appends a list predicates to the GeneratedExamMutation builder.
func (m *GeneratedExamMutation) Where(ps ...predicate.GeneratedExam) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GeneratedExamMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GeneratedExamMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GeneratedExam, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GeneratedExamMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GeneratedExamMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GeneratedExam).
func (m *GeneratedExamMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GeneratedExamMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.is_active != nil {
		fields = append(fields, generatedexam.FieldIsActive)
	}
	if m.raw_exam_data != nil {
		fields = append(fields, generatedexam.FieldRawExamData)
	}
	if m.created_at != nil {
		fields = append(fields, generatedexam.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, generatedexam.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GeneratedExamMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case generatedexam.FieldIsActive:
		return m.IsActive()
	case generatedexam.FieldRawExamData:
		return m.RawExamData()
	case generatedexam.FieldCreatedAt:
		return m.CreatedAt()
	case generatedexam.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GeneratedExamMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case generatedexam.FieldIsActive:
		return m.OldIsActive(ctx)
	case generatedexam.FieldRawExamData:
		return m.OldRawExamData(ctx)
	case generatedexam.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case generatedexam.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown GeneratedExam field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GeneratedExamMutation) SetField(name string, value ent.Value) error {
	switch name {
	case generatedexam.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case generatedexam.FieldRawExamData:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRawExamData(v)
		return nil
	case generatedexam.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case generatedexam.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown GeneratedExam field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GeneratedExamMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GeneratedExamMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GeneratedExamMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown GeneratedExam numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GeneratedExamMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(generatedexam.FieldRawExamData) {
		fields = append(fields, generatedexam.FieldRawExamData)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GeneratedExamMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GeneratedExamMutation) ClearField(name string) error {
	switch name {
	case generatedexam.FieldRawExamData:
		m.ClearRawExamData()
		return nil
	}
	return fmt.Errorf("unknown GeneratedExam nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GeneratedExamMutation) ResetField(name string) error {
	switch name {
	case generatedexam.FieldIsActive:
		m.ResetIsActive()
		return nil
	case generatedexam.FieldRawExamData:
		m.ResetRawExamData()
		return nil
	case generatedexam.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case generatedexam.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown GeneratedExam field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GeneratedExamMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.exam != nil {
		edges = append(edges, generatedexam.EdgeExam)
	}
	if m.attempts != nil {
		edges = append(edges, generatedexam.EdgeAttempts)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GeneratedExamMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case generatedexam.EdgeExam:
		if id := m.exam; id != nil {
			return []ent.Value{*id}
		}
	case generatedexam.EdgeAttempts:
		ids := make([]ent.Value, 0, len(m.attempts))
		for id := range m.attempts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GeneratedExamMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedattempts != nil {
		edges = append(edges, generatedexam.EdgeAttempts)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GeneratedExamMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case generatedexam.EdgeAttempts:
		ids := make([]ent.Value, 0, len(m.removedattempts))
		for id := range m.removedattempts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GeneratedExamMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedexam {
		edges = append(edges, generatedexam.EdgeExam)
	}
	if m.clearedattempts {
		edges = append(edges, generatedexam.EdgeAttempts)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GeneratedExamMutation) EdgeCleared(name string) bool {
	switch name {
	case generatedexam.EdgeExam:
		return m.clearedexam
	case generatedexam.EdgeAttempts:
		return m.clearedattempts
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GeneratedExamMutation) ClearEdge(name string) error {
	switch name {
	case generatedexam.EdgeExam:
		m.ClearExam()
		return nil
	}
	return fmt.Errorf("unknown GeneratedExam unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GeneratedExamMutation) ResetEdge(name string) error {
	switch name {
	case generatedexam.EdgeExam:
		m.ResetExam()
		return nil
	case generatedexam.EdgeAttempts:
		m.ResetAttempts()
		return nil
	}
	return fmt.Errorf("unknown GeneratedExam edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	email           *string
	first_name      *string
	last_name       *string
	clearedFields   map[string]struct{}
	attempts        map[int]struct{}
	removedattempts map[int]struct{}
	clearedattempts bool
	done            bool
	oldValue        func(context.Context) (*User, error)
	predicates      []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetFirstName sets the "first_name" field.
func (m *UserMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *UserMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ClearFirstName clears the value of the "first_name" field.
func (m *UserMutation) ClearFirstName() {
	m.first_name = nil
	m.clearedFields[user.FieldFirstName] = struct{}{}
}

// FirstNameCleared returns if the "first_name" field was cleared in this mutation.
func (m *UserMutation) FirstNameCleared() bool {
	_, ok := m.clearedFields[user.FieldFirstName]
	return ok
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *UserMutation) ResetFirstName() {
	m.first_name = nil
	delete(m.clearedFields, user.FieldFirstName)
}

// SetLastName sets the "last_name" field.
func (m *UserMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *UserMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ClearLastName clears the value of the "last_name" field.
func (m *UserMutation) ClearLastName() {
	m.last_name = nil
	m.clearedFields[user.FieldLastName] = struct{}{}
}

// LastNameCleared returns if the "last_name" field was cleared in this mutation.
func (m *UserMutation) LastNameCleared() bool {
	_, ok := m.clearedFields[user.FieldLastName]
	return ok
}

// ResetLastName resets all changes to the "last_name" field.
func (m *UserMutation) ResetLastName() {
	m.last_name = nil
	delete(m.clearedFields, user.FieldLastName)
}

// AddAttemptIDs adds the "attempts" edge to the ExamAttempt entity by ids.
func (m *UserMutation) AddAttemptIDs(ids ...int) {
	if m.attempts == nil {
		m.attempts = make(map[int]struct{})
	}
	for i := range ids {
		m.attempts[ids[i]] = struct{}{}
	}
}

// ClearAttempts clears the "attempts" edge to the ExamAttempt entity.
func (m *UserMutation) ClearAttempts() {
	m.clearedattempts = true
}

// AttemptsCleared reports if the "attempts" edge to the ExamAttempt entity was cleared.
func (m *UserMutation) AttemptsCleared() bool {
	return m.clearedattempts
}

// RemoveAttemptIDs removes the "attempts" edge to the ExamAttempt entity by IDs.
func (m *UserMutation) RemoveAttemptIDs(ids ...int) {
	if m.removedattempts == nil {
		m.removedattempts = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.attempts, ids[i])
		m.removedattempts[ids[i]] = struct{}{}
	}
}

// RemovedAttempts returns the removed IDs of the "attempts" edge to the ExamAttempt entity.
func (m *UserMutation) RemovedAttemptsIDs() (ids []int) {
	for id := range m.removedattempts {
		ids = append(ids, id)
	}
	return
}

// AttemptsIDs returns the "attempts" edge IDs in the mutation.
func (m *UserMutation) AttemptsIDs() (ids []int) {
	for id := range m.attempts {
		ids = append(ids, id)
	}
	return
}

// ResetAttempts resets all changes to the "attempts" edge.
func (m *UserMutation) ResetAttempts() {
	m.attempts = nil
	m.clearedattempts = false
	m.removedattempts = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.first_name != nil {
		fields = append(fields, user.FieldFirstName)
	}
	if m.last_name != nil {
		fields = append(fields, user.FieldLastName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldEmail:
		return m.Email()
	case user.FieldFirstName:
		return m.FirstName()
	case user.FieldLastName:
		return m.LastName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldFirstName:
		return m.OldFirstName(ctx)
	case user.FieldLastName:
		return m.OldLastName(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case user.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldFirstName) {
		fields = append(fields, user.FieldFirstName)
	}
	if m.FieldCleared(user.FieldLastName) {
		fields = append(fields, user.FieldLastName)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldFirstName:
		m.ClearFirstName()
		return nil
	case user.FieldLastName:
		m.ClearLastName()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldFirstName:
		m.ResetFirstName()
		return nil
	case user.FieldLastName:
		m.ResetLastName()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.attempts != nil {
		edges = append(edges, user.EdgeAttempts)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeAttempts:
		ids := make([]ent.Value, 0, len(m.attempts))
		for id := range m.attempts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedattempts != nil {
		edges = append(edges, user.EdgeAttempts)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeAttempts:
		ids := make([]ent.Value, 0, len(m.removedattempts))
		for id := range m.removedattempts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedattempts {
		edges = append(edges, user.EdgeAttempts)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeAttempts:
		return m.clearedattempts
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeAttempts:
		m.ResetAttempts()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
