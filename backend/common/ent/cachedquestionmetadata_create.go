// Code generated by ent, DO NOT EDIT.

package ent

import (
	"common/ent/cachedquestionmetadata"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CachedQuestionMetadataCreate is the builder for creating a CachedQuestionMetadata entity.
type CachedQuestionMetadataCreate struct {
	config
	mutation *CachedQuestionMetadataMutation
	hooks    []Hook
}

// SetKey sets the "key" field.
func (cqmc *CachedQuestionMetadataCreate) SetKey(s string) *CachedQuestionMetadataCreate {
	cqmc.mutation.SetKey(s)
	return cqmc
}

// SetType sets the "type" field.
func (cqmc *CachedQuestionMetadataCreate) SetType(s string) *CachedQuestionMetadataCreate {
	cqmc.mutation.SetType(s)
	return cqmc
}

// SetSubject sets the "subject" field.
func (cqmc *CachedQuestionMetadataCreate) SetSubject(s string) *CachedQuestionMetadataCreate {
	cqmc.mutation.SetSubject(s)
	return cqmc
}

// SetExam sets the "exam" field.
func (cqmc *CachedQuestionMetadataCreate) SetExam(s string) *CachedQuestionMetadataCreate {
	cqmc.mutation.SetExam(s)
	return cqmc
}

// SetIsProcessed sets the "is_processed" field.
func (cqmc *CachedQuestionMetadataCreate) SetIsProcessed(b bool) *CachedQuestionMetadataCreate {
	cqmc.mutation.SetIsProcessed(b)
	return cqmc
}

// SetNillableIsProcessed sets the "is_processed" field if the given value is not nil.
func (cqmc *CachedQuestionMetadataCreate) SetNillableIsProcessed(b *bool) *CachedQuestionMetadataCreate {
	if b != nil {
		cqmc.SetIsProcessed(*b)
	}
	return cqmc
}

// SetCreatedAt sets the "created_at" field.
func (cqmc *CachedQuestionMetadataCreate) SetCreatedAt(t time.Time) *CachedQuestionMetadataCreate {
	cqmc.mutation.SetCreatedAt(t)
	return cqmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cqmc *CachedQuestionMetadataCreate) SetNillableCreatedAt(t *time.Time) *CachedQuestionMetadataCreate {
	if t != nil {
		cqmc.SetCreatedAt(*t)
	}
	return cqmc
}

// SetUpdatedAt sets the "updated_at" field.
func (cqmc *CachedQuestionMetadataCreate) SetUpdatedAt(t time.Time) *CachedQuestionMetadataCreate {
	cqmc.mutation.SetUpdatedAt(t)
	return cqmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cqmc *CachedQuestionMetadataCreate) SetNillableUpdatedAt(t *time.Time) *CachedQuestionMetadataCreate {
	if t != nil {
		cqmc.SetUpdatedAt(*t)
	}
	return cqmc
}

// Mutation returns the CachedQuestionMetadataMutation object of the builder.
func (cqmc *CachedQuestionMetadataCreate) Mutation() *CachedQuestionMetadataMutation {
	return cqmc.mutation
}

// Save creates the CachedQuestionMetadata in the database.
func (cqmc *CachedQuestionMetadataCreate) Save(ctx context.Context) (*CachedQuestionMetadata, error) {
	cqmc.defaults()
	return withHooks(ctx, cqmc.sqlSave, cqmc.mutation, cqmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cqmc *CachedQuestionMetadataCreate) SaveX(ctx context.Context) *CachedQuestionMetadata {
	v, err := cqmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cqmc *CachedQuestionMetadataCreate) Exec(ctx context.Context) error {
	_, err := cqmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cqmc *CachedQuestionMetadataCreate) ExecX(ctx context.Context) {
	if err := cqmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cqmc *CachedQuestionMetadataCreate) defaults() {
	if _, ok := cqmc.mutation.IsProcessed(); !ok {
		v := cachedquestionmetadata.DefaultIsProcessed
		cqmc.mutation.SetIsProcessed(v)
	}
	if _, ok := cqmc.mutation.CreatedAt(); !ok {
		v := cachedquestionmetadata.DefaultCreatedAt()
		cqmc.mutation.SetCreatedAt(v)
	}
	if _, ok := cqmc.mutation.UpdatedAt(); !ok {
		v := cachedquestionmetadata.DefaultUpdatedAt()
		cqmc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cqmc *CachedQuestionMetadataCreate) check() error {
	if _, ok := cqmc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "CachedQuestionMetadata.key"`)}
	}
	if _, ok := cqmc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "CachedQuestionMetadata.type"`)}
	}
	if _, ok := cqmc.mutation.Subject(); !ok {
		return &ValidationError{Name: "subject", err: errors.New(`ent: missing required field "CachedQuestionMetadata.subject"`)}
	}
	if _, ok := cqmc.mutation.Exam(); !ok {
		return &ValidationError{Name: "exam", err: errors.New(`ent: missing required field "CachedQuestionMetadata.exam"`)}
	}
	if _, ok := cqmc.mutation.IsProcessed(); !ok {
		return &ValidationError{Name: "is_processed", err: errors.New(`ent: missing required field "CachedQuestionMetadata.is_processed"`)}
	}
	if _, ok := cqmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CachedQuestionMetadata.created_at"`)}
	}
	if _, ok := cqmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CachedQuestionMetadata.updated_at"`)}
	}
	return nil
}

func (cqmc *CachedQuestionMetadataCreate) sqlSave(ctx context.Context) (*CachedQuestionMetadata, error) {
	if err := cqmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cqmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cqmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cqmc.mutation.id = &_node.ID
	cqmc.mutation.done = true
	return _node, nil
}

func (cqmc *CachedQuestionMetadataCreate) createSpec() (*CachedQuestionMetadata, *sqlgraph.CreateSpec) {
	var (
		_node = &CachedQuestionMetadata{config: cqmc.config}
		_spec = sqlgraph.NewCreateSpec(cachedquestionmetadata.Table, sqlgraph.NewFieldSpec(cachedquestionmetadata.FieldID, field.TypeInt))
	)
	if value, ok := cqmc.mutation.Key(); ok {
		_spec.SetField(cachedquestionmetadata.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := cqmc.mutation.GetType(); ok {
		_spec.SetField(cachedquestionmetadata.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := cqmc.mutation.Subject(); ok {
		_spec.SetField(cachedquestionmetadata.FieldSubject, field.TypeString, value)
		_node.Subject = value
	}
	if value, ok := cqmc.mutation.Exam(); ok {
		_spec.SetField(cachedquestionmetadata.FieldExam, field.TypeString, value)
		_node.Exam = value
	}
	if value, ok := cqmc.mutation.IsProcessed(); ok {
		_spec.SetField(cachedquestionmetadata.FieldIsProcessed, field.TypeBool, value)
		_node.IsProcessed = value
	}
	if value, ok := cqmc.mutation.CreatedAt(); ok {
		_spec.SetField(cachedquestionmetadata.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cqmc.mutation.UpdatedAt(); ok {
		_spec.SetField(cachedquestionmetadata.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// CachedQuestionMetadataCreateBulk is the builder for creating many CachedQuestionMetadata entities in bulk.
type CachedQuestionMetadataCreateBulk struct {
	config
	err      error
	builders []*CachedQuestionMetadataCreate
}

// Save creates the CachedQuestionMetadata entities in the database.
func (cqmcb *CachedQuestionMetadataCreateBulk) Save(ctx context.Context) ([]*CachedQuestionMetadata, error) {
	if cqmcb.err != nil {
		return nil, cqmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cqmcb.builders))
	nodes := make([]*CachedQuestionMetadata, len(cqmcb.builders))
	mutators := make([]Mutator, len(cqmcb.builders))
	for i := range cqmcb.builders {
		func(i int, root context.Context) {
			builder := cqmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CachedQuestionMetadataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cqmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cqmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cqmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cqmcb *CachedQuestionMetadataCreateBulk) SaveX(ctx context.Context) []*CachedQuestionMetadata {
	v, err := cqmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cqmcb *CachedQuestionMetadataCreateBulk) Exec(ctx context.Context) error {
	_, err := cqmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cqmcb *CachedQuestionMetadataCreateBulk) ExecX(ctx context.Context) {
	if err := cqmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
