// Code generated by ent, DO NOT EDIT.

package ent

import (
	"common/ent/cachedquestionmetadata"
	"common/ent/exam"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CachedQuestionMetaDataCreate is the builder for creating a CachedQuestionMetaData entity.
type CachedQuestionMetaDataCreate struct {
	config
	mutation *CachedQuestionMetaDataMutation
	hooks    []Hook
}

// SetCacheUID sets the "cache_uid" field.
func (cqmdc *CachedQuestionMetaDataCreate) SetCacheUID(s string) *CachedQuestionMetaDataCreate {
	cqmdc.mutation.SetCacheUID(s)
	return cqmdc
}

// SetIsUsed sets the "is_used" field.
func (cqmdc *CachedQuestionMetaDataCreate) SetIsUsed(b bool) *CachedQuestionMetaDataCreate {
	cqmdc.mutation.SetIsUsed(b)
	return cqmdc
}

// SetNillableIsUsed sets the "is_used" field if the given value is not nil.
func (cqmdc *CachedQuestionMetaDataCreate) SetNillableIsUsed(b *bool) *CachedQuestionMetaDataCreate {
	if b != nil {
		cqmdc.SetIsUsed(*b)
	}
	return cqmdc
}

// SetExpiresAt sets the "expires_at" field.
func (cqmdc *CachedQuestionMetaDataCreate) SetExpiresAt(t time.Time) *CachedQuestionMetaDataCreate {
	cqmdc.mutation.SetExpiresAt(t)
	return cqmdc
}

// SetCreatedAt sets the "created_at" field.
func (cqmdc *CachedQuestionMetaDataCreate) SetCreatedAt(t time.Time) *CachedQuestionMetaDataCreate {
	cqmdc.mutation.SetCreatedAt(t)
	return cqmdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cqmdc *CachedQuestionMetaDataCreate) SetNillableCreatedAt(t *time.Time) *CachedQuestionMetaDataCreate {
	if t != nil {
		cqmdc.SetCreatedAt(*t)
	}
	return cqmdc
}

// SetUpdatedAt sets the "updated_at" field.
func (cqmdc *CachedQuestionMetaDataCreate) SetUpdatedAt(t time.Time) *CachedQuestionMetaDataCreate {
	cqmdc.mutation.SetUpdatedAt(t)
	return cqmdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cqmdc *CachedQuestionMetaDataCreate) SetNillableUpdatedAt(t *time.Time) *CachedQuestionMetaDataCreate {
	if t != nil {
		cqmdc.SetUpdatedAt(*t)
	}
	return cqmdc
}

// SetExamID sets the "exam" edge to the Exam entity by ID.
func (cqmdc *CachedQuestionMetaDataCreate) SetExamID(id int) *CachedQuestionMetaDataCreate {
	cqmdc.mutation.SetExamID(id)
	return cqmdc
}

// SetExam sets the "exam" edge to the Exam entity.
func (cqmdc *CachedQuestionMetaDataCreate) SetExam(e *Exam) *CachedQuestionMetaDataCreate {
	return cqmdc.SetExamID(e.ID)
}

// Mutation returns the CachedQuestionMetaDataMutation object of the builder.
func (cqmdc *CachedQuestionMetaDataCreate) Mutation() *CachedQuestionMetaDataMutation {
	return cqmdc.mutation
}

// Save creates the CachedQuestionMetaData in the database.
func (cqmdc *CachedQuestionMetaDataCreate) Save(ctx context.Context) (*CachedQuestionMetaData, error) {
	cqmdc.defaults()
	return withHooks(ctx, cqmdc.sqlSave, cqmdc.mutation, cqmdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cqmdc *CachedQuestionMetaDataCreate) SaveX(ctx context.Context) *CachedQuestionMetaData {
	v, err := cqmdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cqmdc *CachedQuestionMetaDataCreate) Exec(ctx context.Context) error {
	_, err := cqmdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cqmdc *CachedQuestionMetaDataCreate) ExecX(ctx context.Context) {
	if err := cqmdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cqmdc *CachedQuestionMetaDataCreate) defaults() {
	if _, ok := cqmdc.mutation.IsUsed(); !ok {
		v := cachedquestionmetadata.DefaultIsUsed
		cqmdc.mutation.SetIsUsed(v)
	}
	if _, ok := cqmdc.mutation.CreatedAt(); !ok {
		v := cachedquestionmetadata.DefaultCreatedAt()
		cqmdc.mutation.SetCreatedAt(v)
	}
	if _, ok := cqmdc.mutation.UpdatedAt(); !ok {
		v := cachedquestionmetadata.DefaultUpdatedAt()
		cqmdc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cqmdc *CachedQuestionMetaDataCreate) check() error {
	if _, ok := cqmdc.mutation.CacheUID(); !ok {
		return &ValidationError{Name: "cache_uid", err: errors.New(`ent: missing required field "CachedQuestionMetaData.cache_uid"`)}
	}
	if _, ok := cqmdc.mutation.IsUsed(); !ok {
		return &ValidationError{Name: "is_used", err: errors.New(`ent: missing required field "CachedQuestionMetaData.is_used"`)}
	}
	if _, ok := cqmdc.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`ent: missing required field "CachedQuestionMetaData.expires_at"`)}
	}
	if _, ok := cqmdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CachedQuestionMetaData.created_at"`)}
	}
	if _, ok := cqmdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CachedQuestionMetaData.updated_at"`)}
	}
	if len(cqmdc.mutation.ExamIDs()) == 0 {
		return &ValidationError{Name: "exam", err: errors.New(`ent: missing required edge "CachedQuestionMetaData.exam"`)}
	}
	return nil
}

func (cqmdc *CachedQuestionMetaDataCreate) sqlSave(ctx context.Context) (*CachedQuestionMetaData, error) {
	if err := cqmdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cqmdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cqmdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cqmdc.mutation.id = &_node.ID
	cqmdc.mutation.done = true
	return _node, nil
}

func (cqmdc *CachedQuestionMetaDataCreate) createSpec() (*CachedQuestionMetaData, *sqlgraph.CreateSpec) {
	var (
		_node = &CachedQuestionMetaData{config: cqmdc.config}
		_spec = sqlgraph.NewCreateSpec(cachedquestionmetadata.Table, sqlgraph.NewFieldSpec(cachedquestionmetadata.FieldID, field.TypeInt))
	)
	if value, ok := cqmdc.mutation.CacheUID(); ok {
		_spec.SetField(cachedquestionmetadata.FieldCacheUID, field.TypeString, value)
		_node.CacheUID = value
	}
	if value, ok := cqmdc.mutation.IsUsed(); ok {
		_spec.SetField(cachedquestionmetadata.FieldIsUsed, field.TypeBool, value)
		_node.IsUsed = value
	}
	if value, ok := cqmdc.mutation.ExpiresAt(); ok {
		_spec.SetField(cachedquestionmetadata.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := cqmdc.mutation.CreatedAt(); ok {
		_spec.SetField(cachedquestionmetadata.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cqmdc.mutation.UpdatedAt(); ok {
		_spec.SetField(cachedquestionmetadata.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := cqmdc.mutation.ExamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cachedquestionmetadata.ExamTable,
			Columns: []string{cachedquestionmetadata.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.exam_cached_question_metadata = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CachedQuestionMetaDataCreateBulk is the builder for creating many CachedQuestionMetaData entities in bulk.
type CachedQuestionMetaDataCreateBulk struct {
	config
	err      error
	builders []*CachedQuestionMetaDataCreate
}

// Save creates the CachedQuestionMetaData entities in the database.
func (cqmdcb *CachedQuestionMetaDataCreateBulk) Save(ctx context.Context) ([]*CachedQuestionMetaData, error) {
	if cqmdcb.err != nil {
		return nil, cqmdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cqmdcb.builders))
	nodes := make([]*CachedQuestionMetaData, len(cqmdcb.builders))
	mutators := make([]Mutator, len(cqmdcb.builders))
	for i := range cqmdcb.builders {
		func(i int, root context.Context) {
			builder := cqmdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CachedQuestionMetaDataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cqmdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cqmdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cqmdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cqmdcb *CachedQuestionMetaDataCreateBulk) SaveX(ctx context.Context) []*CachedQuestionMetaData {
	v, err := cqmdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cqmdcb *CachedQuestionMetaDataCreateBulk) Exec(ctx context.Context) error {
	_, err := cqmdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cqmdcb *CachedQuestionMetaDataCreateBulk) ExecX(ctx context.Context) {
	if err := cqmdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
