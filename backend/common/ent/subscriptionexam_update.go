// Code generated by ent, DO NOT EDIT.

package ent

import (
	"common/ent/exam"
	"common/ent/predicate"
	"common/ent/subscription"
	"common/ent/subscriptionexam"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubscriptionExamUpdate is the builder for updating SubscriptionExam entities.
type SubscriptionExamUpdate struct {
	config
	hooks    []Hook
	mutation *SubscriptionExamMutation
}

// Where appends a list predicates to the SubscriptionExamUpdate builder.
func (seu *SubscriptionExamUpdate) Where(ps ...predicate.SubscriptionExam) *SubscriptionExamUpdate {
	seu.mutation.Where(ps...)
	return seu
}

// SetUpdatedAt sets the "updated_at" field.
func (seu *SubscriptionExamUpdate) SetUpdatedAt(t time.Time) *SubscriptionExamUpdate {
	seu.mutation.SetUpdatedAt(t)
	return seu
}

// SetSubscriptionID sets the "subscription" edge to the Subscription entity by ID.
func (seu *SubscriptionExamUpdate) SetSubscriptionID(id int) *SubscriptionExamUpdate {
	seu.mutation.SetSubscriptionID(id)
	return seu
}

// SetNillableSubscriptionID sets the "subscription" edge to the Subscription entity by ID if the given value is not nil.
func (seu *SubscriptionExamUpdate) SetNillableSubscriptionID(id *int) *SubscriptionExamUpdate {
	if id != nil {
		seu = seu.SetSubscriptionID(*id)
	}
	return seu
}

// SetSubscription sets the "subscription" edge to the Subscription entity.
func (seu *SubscriptionExamUpdate) SetSubscription(s *Subscription) *SubscriptionExamUpdate {
	return seu.SetSubscriptionID(s.ID)
}

// SetExamID sets the "exam" edge to the Exam entity by ID.
func (seu *SubscriptionExamUpdate) SetExamID(id int) *SubscriptionExamUpdate {
	seu.mutation.SetExamID(id)
	return seu
}

// SetNillableExamID sets the "exam" edge to the Exam entity by ID if the given value is not nil.
func (seu *SubscriptionExamUpdate) SetNillableExamID(id *int) *SubscriptionExamUpdate {
	if id != nil {
		seu = seu.SetExamID(*id)
	}
	return seu
}

// SetExam sets the "exam" edge to the Exam entity.
func (seu *SubscriptionExamUpdate) SetExam(e *Exam) *SubscriptionExamUpdate {
	return seu.SetExamID(e.ID)
}

// Mutation returns the SubscriptionExamMutation object of the builder.
func (seu *SubscriptionExamUpdate) Mutation() *SubscriptionExamMutation {
	return seu.mutation
}

// ClearSubscription clears the "subscription" edge to the Subscription entity.
func (seu *SubscriptionExamUpdate) ClearSubscription() *SubscriptionExamUpdate {
	seu.mutation.ClearSubscription()
	return seu
}

// ClearExam clears the "exam" edge to the Exam entity.
func (seu *SubscriptionExamUpdate) ClearExam() *SubscriptionExamUpdate {
	seu.mutation.ClearExam()
	return seu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (seu *SubscriptionExamUpdate) Save(ctx context.Context) (int, error) {
	seu.defaults()
	return withHooks(ctx, seu.sqlSave, seu.mutation, seu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (seu *SubscriptionExamUpdate) SaveX(ctx context.Context) int {
	affected, err := seu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (seu *SubscriptionExamUpdate) Exec(ctx context.Context) error {
	_, err := seu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seu *SubscriptionExamUpdate) ExecX(ctx context.Context) {
	if err := seu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (seu *SubscriptionExamUpdate) defaults() {
	if _, ok := seu.mutation.UpdatedAt(); !ok {
		v := subscriptionexam.UpdateDefaultUpdatedAt()
		seu.mutation.SetUpdatedAt(v)
	}
}

func (seu *SubscriptionExamUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(subscriptionexam.Table, subscriptionexam.Columns, sqlgraph.NewFieldSpec(subscriptionexam.FieldID, field.TypeInt))
	if ps := seu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seu.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionexam.FieldUpdatedAt, field.TypeTime, value)
	}
	if seu.mutation.SubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriptionexam.SubscriptionTable,
			Columns: []string{subscriptionexam.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seu.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriptionexam.SubscriptionTable,
			Columns: []string{subscriptionexam.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if seu.mutation.ExamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriptionexam.ExamTable,
			Columns: []string{subscriptionexam.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seu.mutation.ExamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriptionexam.ExamTable,
			Columns: []string{subscriptionexam.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, seu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionexam.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	seu.mutation.done = true
	return n, nil
}

// SubscriptionExamUpdateOne is the builder for updating a single SubscriptionExam entity.
type SubscriptionExamUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubscriptionExamMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (seuo *SubscriptionExamUpdateOne) SetUpdatedAt(t time.Time) *SubscriptionExamUpdateOne {
	seuo.mutation.SetUpdatedAt(t)
	return seuo
}

// SetSubscriptionID sets the "subscription" edge to the Subscription entity by ID.
func (seuo *SubscriptionExamUpdateOne) SetSubscriptionID(id int) *SubscriptionExamUpdateOne {
	seuo.mutation.SetSubscriptionID(id)
	return seuo
}

// SetNillableSubscriptionID sets the "subscription" edge to the Subscription entity by ID if the given value is not nil.
func (seuo *SubscriptionExamUpdateOne) SetNillableSubscriptionID(id *int) *SubscriptionExamUpdateOne {
	if id != nil {
		seuo = seuo.SetSubscriptionID(*id)
	}
	return seuo
}

// SetSubscription sets the "subscription" edge to the Subscription entity.
func (seuo *SubscriptionExamUpdateOne) SetSubscription(s *Subscription) *SubscriptionExamUpdateOne {
	return seuo.SetSubscriptionID(s.ID)
}

// SetExamID sets the "exam" edge to the Exam entity by ID.
func (seuo *SubscriptionExamUpdateOne) SetExamID(id int) *SubscriptionExamUpdateOne {
	seuo.mutation.SetExamID(id)
	return seuo
}

// SetNillableExamID sets the "exam" edge to the Exam entity by ID if the given value is not nil.
func (seuo *SubscriptionExamUpdateOne) SetNillableExamID(id *int) *SubscriptionExamUpdateOne {
	if id != nil {
		seuo = seuo.SetExamID(*id)
	}
	return seuo
}

// SetExam sets the "exam" edge to the Exam entity.
func (seuo *SubscriptionExamUpdateOne) SetExam(e *Exam) *SubscriptionExamUpdateOne {
	return seuo.SetExamID(e.ID)
}

// Mutation returns the SubscriptionExamMutation object of the builder.
func (seuo *SubscriptionExamUpdateOne) Mutation() *SubscriptionExamMutation {
	return seuo.mutation
}

// ClearSubscription clears the "subscription" edge to the Subscription entity.
func (seuo *SubscriptionExamUpdateOne) ClearSubscription() *SubscriptionExamUpdateOne {
	seuo.mutation.ClearSubscription()
	return seuo
}

// ClearExam clears the "exam" edge to the Exam entity.
func (seuo *SubscriptionExamUpdateOne) ClearExam() *SubscriptionExamUpdateOne {
	seuo.mutation.ClearExam()
	return seuo
}

// Where appends a list predicates to the SubscriptionExamUpdate builder.
func (seuo *SubscriptionExamUpdateOne) Where(ps ...predicate.SubscriptionExam) *SubscriptionExamUpdateOne {
	seuo.mutation.Where(ps...)
	return seuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (seuo *SubscriptionExamUpdateOne) Select(field string, fields ...string) *SubscriptionExamUpdateOne {
	seuo.fields = append([]string{field}, fields...)
	return seuo
}

// Save executes the query and returns the updated SubscriptionExam entity.
func (seuo *SubscriptionExamUpdateOne) Save(ctx context.Context) (*SubscriptionExam, error) {
	seuo.defaults()
	return withHooks(ctx, seuo.sqlSave, seuo.mutation, seuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (seuo *SubscriptionExamUpdateOne) SaveX(ctx context.Context) *SubscriptionExam {
	node, err := seuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (seuo *SubscriptionExamUpdateOne) Exec(ctx context.Context) error {
	_, err := seuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seuo *SubscriptionExamUpdateOne) ExecX(ctx context.Context) {
	if err := seuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (seuo *SubscriptionExamUpdateOne) defaults() {
	if _, ok := seuo.mutation.UpdatedAt(); !ok {
		v := subscriptionexam.UpdateDefaultUpdatedAt()
		seuo.mutation.SetUpdatedAt(v)
	}
}

func (seuo *SubscriptionExamUpdateOne) sqlSave(ctx context.Context) (_node *SubscriptionExam, err error) {
	_spec := sqlgraph.NewUpdateSpec(subscriptionexam.Table, subscriptionexam.Columns, sqlgraph.NewFieldSpec(subscriptionexam.FieldID, field.TypeInt))
	id, ok := seuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SubscriptionExam.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := seuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscriptionexam.FieldID)
		for _, f := range fields {
			if !subscriptionexam.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subscriptionexam.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := seuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seuo.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionexam.FieldUpdatedAt, field.TypeTime, value)
	}
	if seuo.mutation.SubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriptionexam.SubscriptionTable,
			Columns: []string{subscriptionexam.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seuo.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriptionexam.SubscriptionTable,
			Columns: []string{subscriptionexam.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if seuo.mutation.ExamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriptionexam.ExamTable,
			Columns: []string{subscriptionexam.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := seuo.mutation.ExamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriptionexam.ExamTable,
			Columns: []string{subscriptionexam.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SubscriptionExam{config: seuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, seuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionexam.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	seuo.mutation.done = true
	return _node, nil
}
