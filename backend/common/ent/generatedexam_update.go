// Code generated by ent, DO NOT EDIT.

package ent

import (
	"common/ent/exam"
	"common/ent/examattempt"
	"common/ent/generatedexam"
	"common/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GeneratedExamUpdate is the builder for updating GeneratedExam entities.
type GeneratedExamUpdate struct {
	config
	hooks    []Hook
	mutation *GeneratedExamMutation
}

// Where appends a list predicates to the GeneratedExamUpdate builder.
func (geu *GeneratedExamUpdate) Where(ps ...predicate.GeneratedExam) *GeneratedExamUpdate {
	geu.mutation.Where(ps...)
	return geu
}

// SetIsActive sets the "is_active" field.
func (geu *GeneratedExamUpdate) SetIsActive(b bool) *GeneratedExamUpdate {
	geu.mutation.SetIsActive(b)
	return geu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (geu *GeneratedExamUpdate) SetNillableIsActive(b *bool) *GeneratedExamUpdate {
	if b != nil {
		geu.SetIsActive(*b)
	}
	return geu
}

// SetRawExamData sets the "raw_exam_data" field.
func (geu *GeneratedExamUpdate) SetRawExamData(m map[string]interface{}) *GeneratedExamUpdate {
	geu.mutation.SetRawExamData(m)
	return geu
}

// ClearRawExamData clears the value of the "raw_exam_data" field.
func (geu *GeneratedExamUpdate) ClearRawExamData() *GeneratedExamUpdate {
	geu.mutation.ClearRawExamData()
	return geu
}

// SetIsOpen sets the "is_open" field.
func (geu *GeneratedExamUpdate) SetIsOpen(b bool) *GeneratedExamUpdate {
	geu.mutation.SetIsOpen(b)
	return geu
}

// SetNillableIsOpen sets the "is_open" field if the given value is not nil.
func (geu *GeneratedExamUpdate) SetNillableIsOpen(b *bool) *GeneratedExamUpdate {
	if b != nil {
		geu.SetIsOpen(*b)
	}
	return geu
}

// SetUpdatedAt sets the "updated_at" field.
func (geu *GeneratedExamUpdate) SetUpdatedAt(t time.Time) *GeneratedExamUpdate {
	geu.mutation.SetUpdatedAt(t)
	return geu
}

// SetExamID sets the "exam" edge to the Exam entity by ID.
func (geu *GeneratedExamUpdate) SetExamID(id int) *GeneratedExamUpdate {
	geu.mutation.SetExamID(id)
	return geu
}

// SetNillableExamID sets the "exam" edge to the Exam entity by ID if the given value is not nil.
func (geu *GeneratedExamUpdate) SetNillableExamID(id *int) *GeneratedExamUpdate {
	if id != nil {
		geu = geu.SetExamID(*id)
	}
	return geu
}

// SetExam sets the "exam" edge to the Exam entity.
func (geu *GeneratedExamUpdate) SetExam(e *Exam) *GeneratedExamUpdate {
	return geu.SetExamID(e.ID)
}

// AddAttemptIDs adds the "attempts" edge to the ExamAttempt entity by IDs.
func (geu *GeneratedExamUpdate) AddAttemptIDs(ids ...int) *GeneratedExamUpdate {
	geu.mutation.AddAttemptIDs(ids...)
	return geu
}

// AddAttempts adds the "attempts" edges to the ExamAttempt entity.
func (geu *GeneratedExamUpdate) AddAttempts(e ...*ExamAttempt) *GeneratedExamUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return geu.AddAttemptIDs(ids...)
}

// Mutation returns the GeneratedExamMutation object of the builder.
func (geu *GeneratedExamUpdate) Mutation() *GeneratedExamMutation {
	return geu.mutation
}

// ClearExam clears the "exam" edge to the Exam entity.
func (geu *GeneratedExamUpdate) ClearExam() *GeneratedExamUpdate {
	geu.mutation.ClearExam()
	return geu
}

// ClearAttempts clears all "attempts" edges to the ExamAttempt entity.
func (geu *GeneratedExamUpdate) ClearAttempts() *GeneratedExamUpdate {
	geu.mutation.ClearAttempts()
	return geu
}

// RemoveAttemptIDs removes the "attempts" edge to ExamAttempt entities by IDs.
func (geu *GeneratedExamUpdate) RemoveAttemptIDs(ids ...int) *GeneratedExamUpdate {
	geu.mutation.RemoveAttemptIDs(ids...)
	return geu
}

// RemoveAttempts removes "attempts" edges to ExamAttempt entities.
func (geu *GeneratedExamUpdate) RemoveAttempts(e ...*ExamAttempt) *GeneratedExamUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return geu.RemoveAttemptIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (geu *GeneratedExamUpdate) Save(ctx context.Context) (int, error) {
	geu.defaults()
	return withHooks(ctx, geu.sqlSave, geu.mutation, geu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (geu *GeneratedExamUpdate) SaveX(ctx context.Context) int {
	affected, err := geu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (geu *GeneratedExamUpdate) Exec(ctx context.Context) error {
	_, err := geu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (geu *GeneratedExamUpdate) ExecX(ctx context.Context) {
	if err := geu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (geu *GeneratedExamUpdate) defaults() {
	if _, ok := geu.mutation.UpdatedAt(); !ok {
		v := generatedexam.UpdateDefaultUpdatedAt()
		geu.mutation.SetUpdatedAt(v)
	}
}

func (geu *GeneratedExamUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(generatedexam.Table, generatedexam.Columns, sqlgraph.NewFieldSpec(generatedexam.FieldID, field.TypeInt))
	if ps := geu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := geu.mutation.IsActive(); ok {
		_spec.SetField(generatedexam.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := geu.mutation.RawExamData(); ok {
		_spec.SetField(generatedexam.FieldRawExamData, field.TypeJSON, value)
	}
	if geu.mutation.RawExamDataCleared() {
		_spec.ClearField(generatedexam.FieldRawExamData, field.TypeJSON)
	}
	if value, ok := geu.mutation.IsOpen(); ok {
		_spec.SetField(generatedexam.FieldIsOpen, field.TypeBool, value)
	}
	if value, ok := geu.mutation.UpdatedAt(); ok {
		_spec.SetField(generatedexam.FieldUpdatedAt, field.TypeTime, value)
	}
	if geu.mutation.ExamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generatedexam.ExamTable,
			Columns: []string{generatedexam.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := geu.mutation.ExamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generatedexam.ExamTable,
			Columns: []string{generatedexam.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if geu.mutation.AttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   generatedexam.AttemptsTable,
			Columns: []string{generatedexam.AttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examattempt.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := geu.mutation.RemovedAttemptsIDs(); len(nodes) > 0 && !geu.mutation.AttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   generatedexam.AttemptsTable,
			Columns: []string{generatedexam.AttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := geu.mutation.AttemptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   generatedexam.AttemptsTable,
			Columns: []string{generatedexam.AttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, geu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{generatedexam.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	geu.mutation.done = true
	return n, nil
}

// GeneratedExamUpdateOne is the builder for updating a single GeneratedExam entity.
type GeneratedExamUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GeneratedExamMutation
}

// SetIsActive sets the "is_active" field.
func (geuo *GeneratedExamUpdateOne) SetIsActive(b bool) *GeneratedExamUpdateOne {
	geuo.mutation.SetIsActive(b)
	return geuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (geuo *GeneratedExamUpdateOne) SetNillableIsActive(b *bool) *GeneratedExamUpdateOne {
	if b != nil {
		geuo.SetIsActive(*b)
	}
	return geuo
}

// SetRawExamData sets the "raw_exam_data" field.
func (geuo *GeneratedExamUpdateOne) SetRawExamData(m map[string]interface{}) *GeneratedExamUpdateOne {
	geuo.mutation.SetRawExamData(m)
	return geuo
}

// ClearRawExamData clears the value of the "raw_exam_data" field.
func (geuo *GeneratedExamUpdateOne) ClearRawExamData() *GeneratedExamUpdateOne {
	geuo.mutation.ClearRawExamData()
	return geuo
}

// SetIsOpen sets the "is_open" field.
func (geuo *GeneratedExamUpdateOne) SetIsOpen(b bool) *GeneratedExamUpdateOne {
	geuo.mutation.SetIsOpen(b)
	return geuo
}

// SetNillableIsOpen sets the "is_open" field if the given value is not nil.
func (geuo *GeneratedExamUpdateOne) SetNillableIsOpen(b *bool) *GeneratedExamUpdateOne {
	if b != nil {
		geuo.SetIsOpen(*b)
	}
	return geuo
}

// SetUpdatedAt sets the "updated_at" field.
func (geuo *GeneratedExamUpdateOne) SetUpdatedAt(t time.Time) *GeneratedExamUpdateOne {
	geuo.mutation.SetUpdatedAt(t)
	return geuo
}

// SetExamID sets the "exam" edge to the Exam entity by ID.
func (geuo *GeneratedExamUpdateOne) SetExamID(id int) *GeneratedExamUpdateOne {
	geuo.mutation.SetExamID(id)
	return geuo
}

// SetNillableExamID sets the "exam" edge to the Exam entity by ID if the given value is not nil.
func (geuo *GeneratedExamUpdateOne) SetNillableExamID(id *int) *GeneratedExamUpdateOne {
	if id != nil {
		geuo = geuo.SetExamID(*id)
	}
	return geuo
}

// SetExam sets the "exam" edge to the Exam entity.
func (geuo *GeneratedExamUpdateOne) SetExam(e *Exam) *GeneratedExamUpdateOne {
	return geuo.SetExamID(e.ID)
}

// AddAttemptIDs adds the "attempts" edge to the ExamAttempt entity by IDs.
func (geuo *GeneratedExamUpdateOne) AddAttemptIDs(ids ...int) *GeneratedExamUpdateOne {
	geuo.mutation.AddAttemptIDs(ids...)
	return geuo
}

// AddAttempts adds the "attempts" edges to the ExamAttempt entity.
func (geuo *GeneratedExamUpdateOne) AddAttempts(e ...*ExamAttempt) *GeneratedExamUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return geuo.AddAttemptIDs(ids...)
}

// Mutation returns the GeneratedExamMutation object of the builder.
func (geuo *GeneratedExamUpdateOne) Mutation() *GeneratedExamMutation {
	return geuo.mutation
}

// ClearExam clears the "exam" edge to the Exam entity.
func (geuo *GeneratedExamUpdateOne) ClearExam() *GeneratedExamUpdateOne {
	geuo.mutation.ClearExam()
	return geuo
}

// ClearAttempts clears all "attempts" edges to the ExamAttempt entity.
func (geuo *GeneratedExamUpdateOne) ClearAttempts() *GeneratedExamUpdateOne {
	geuo.mutation.ClearAttempts()
	return geuo
}

// RemoveAttemptIDs removes the "attempts" edge to ExamAttempt entities by IDs.
func (geuo *GeneratedExamUpdateOne) RemoveAttemptIDs(ids ...int) *GeneratedExamUpdateOne {
	geuo.mutation.RemoveAttemptIDs(ids...)
	return geuo
}

// RemoveAttempts removes "attempts" edges to ExamAttempt entities.
func (geuo *GeneratedExamUpdateOne) RemoveAttempts(e ...*ExamAttempt) *GeneratedExamUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return geuo.RemoveAttemptIDs(ids...)
}

// Where appends a list predicates to the GeneratedExamUpdate builder.
func (geuo *GeneratedExamUpdateOne) Where(ps ...predicate.GeneratedExam) *GeneratedExamUpdateOne {
	geuo.mutation.Where(ps...)
	return geuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (geuo *GeneratedExamUpdateOne) Select(field string, fields ...string) *GeneratedExamUpdateOne {
	geuo.fields = append([]string{field}, fields...)
	return geuo
}

// Save executes the query and returns the updated GeneratedExam entity.
func (geuo *GeneratedExamUpdateOne) Save(ctx context.Context) (*GeneratedExam, error) {
	geuo.defaults()
	return withHooks(ctx, geuo.sqlSave, geuo.mutation, geuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (geuo *GeneratedExamUpdateOne) SaveX(ctx context.Context) *GeneratedExam {
	node, err := geuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (geuo *GeneratedExamUpdateOne) Exec(ctx context.Context) error {
	_, err := geuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (geuo *GeneratedExamUpdateOne) ExecX(ctx context.Context) {
	if err := geuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (geuo *GeneratedExamUpdateOne) defaults() {
	if _, ok := geuo.mutation.UpdatedAt(); !ok {
		v := generatedexam.UpdateDefaultUpdatedAt()
		geuo.mutation.SetUpdatedAt(v)
	}
}

func (geuo *GeneratedExamUpdateOne) sqlSave(ctx context.Context) (_node *GeneratedExam, err error) {
	_spec := sqlgraph.NewUpdateSpec(generatedexam.Table, generatedexam.Columns, sqlgraph.NewFieldSpec(generatedexam.FieldID, field.TypeInt))
	id, ok := geuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GeneratedExam.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := geuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, generatedexam.FieldID)
		for _, f := range fields {
			if !generatedexam.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != generatedexam.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := geuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := geuo.mutation.IsActive(); ok {
		_spec.SetField(generatedexam.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := geuo.mutation.RawExamData(); ok {
		_spec.SetField(generatedexam.FieldRawExamData, field.TypeJSON, value)
	}
	if geuo.mutation.RawExamDataCleared() {
		_spec.ClearField(generatedexam.FieldRawExamData, field.TypeJSON)
	}
	if value, ok := geuo.mutation.IsOpen(); ok {
		_spec.SetField(generatedexam.FieldIsOpen, field.TypeBool, value)
	}
	if value, ok := geuo.mutation.UpdatedAt(); ok {
		_spec.SetField(generatedexam.FieldUpdatedAt, field.TypeTime, value)
	}
	if geuo.mutation.ExamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generatedexam.ExamTable,
			Columns: []string{generatedexam.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := geuo.mutation.ExamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   generatedexam.ExamTable,
			Columns: []string{generatedexam.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if geuo.mutation.AttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   generatedexam.AttemptsTable,
			Columns: []string{generatedexam.AttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examattempt.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := geuo.mutation.RemovedAttemptsIDs(); len(nodes) > 0 && !geuo.mutation.AttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   generatedexam.AttemptsTable,
			Columns: []string{generatedexam.AttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := geuo.mutation.AttemptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   generatedexam.AttemptsTable,
			Columns: []string{generatedexam.AttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GeneratedExam{config: geuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, geuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{generatedexam.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	geuo.mutation.done = true
	return _node, nil
}
