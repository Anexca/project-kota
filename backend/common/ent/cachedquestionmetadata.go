// Code generated by ent, DO NOT EDIT.

package ent

import (
	"common/ent/cachedquestionmetadata"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CachedQuestionMetadata is the model entity for the CachedQuestionMetadata schema.
type CachedQuestionMetadata struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Subject holds the value of the "subject" field.
	Subject string `json:"subject,omitempty"`
	// Exam holds the value of the "exam" field.
	Exam string `json:"exam,omitempty"`
	// IsProcessed holds the value of the "is_processed" field.
	IsProcessed bool `json:"is_processed,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CachedQuestionMetadata) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cachedquestionmetadata.FieldIsProcessed:
			values[i] = new(sql.NullBool)
		case cachedquestionmetadata.FieldID:
			values[i] = new(sql.NullInt64)
		case cachedquestionmetadata.FieldKey, cachedquestionmetadata.FieldType, cachedquestionmetadata.FieldSubject, cachedquestionmetadata.FieldExam:
			values[i] = new(sql.NullString)
		case cachedquestionmetadata.FieldCreatedAt, cachedquestionmetadata.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CachedQuestionMetadata fields.
func (cqm *CachedQuestionMetadata) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cachedquestionmetadata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cqm.ID = int(value.Int64)
		case cachedquestionmetadata.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				cqm.Key = value.String
			}
		case cachedquestionmetadata.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				cqm.Type = value.String
			}
		case cachedquestionmetadata.FieldSubject:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject", values[i])
			} else if value.Valid {
				cqm.Subject = value.String
			}
		case cachedquestionmetadata.FieldExam:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field exam", values[i])
			} else if value.Valid {
				cqm.Exam = value.String
			}
		case cachedquestionmetadata.FieldIsProcessed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_processed", values[i])
			} else if value.Valid {
				cqm.IsProcessed = value.Bool
			}
		case cachedquestionmetadata.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cqm.CreatedAt = value.Time
			}
		case cachedquestionmetadata.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cqm.UpdatedAt = value.Time
			}
		default:
			cqm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CachedQuestionMetadata.
// This includes values selected through modifiers, order, etc.
func (cqm *CachedQuestionMetadata) Value(name string) (ent.Value, error) {
	return cqm.selectValues.Get(name)
}

// Update returns a builder for updating this CachedQuestionMetadata.
// Note that you need to call CachedQuestionMetadata.Unwrap() before calling this method if this CachedQuestionMetadata
// was returned from a transaction, and the transaction was committed or rolled back.
func (cqm *CachedQuestionMetadata) Update() *CachedQuestionMetadataUpdateOne {
	return NewCachedQuestionMetadataClient(cqm.config).UpdateOne(cqm)
}

// Unwrap unwraps the CachedQuestionMetadata entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cqm *CachedQuestionMetadata) Unwrap() *CachedQuestionMetadata {
	_tx, ok := cqm.config.driver.(*txDriver)
	if !ok {
		panic("ent: CachedQuestionMetadata is not a transactional entity")
	}
	cqm.config.driver = _tx.drv
	return cqm
}

// String implements the fmt.Stringer.
func (cqm *CachedQuestionMetadata) String() string {
	var builder strings.Builder
	builder.WriteString("CachedQuestionMetadata(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cqm.ID))
	builder.WriteString("key=")
	builder.WriteString(cqm.Key)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(cqm.Type)
	builder.WriteString(", ")
	builder.WriteString("subject=")
	builder.WriteString(cqm.Subject)
	builder.WriteString(", ")
	builder.WriteString("exam=")
	builder.WriteString(cqm.Exam)
	builder.WriteString(", ")
	builder.WriteString("is_processed=")
	builder.WriteString(fmt.Sprintf("%v", cqm.IsProcessed))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cqm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cqm.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CachedQuestionMetadataSlice is a parsable slice of CachedQuestionMetadata.
type CachedQuestionMetadataSlice []*CachedQuestionMetadata
