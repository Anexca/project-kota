// Code generated by ent, DO NOT EDIT.

package ent

import (
	"common/ent/cachedquestionmetadata"
	"common/ent/exam"
	"common/ent/examattempt"
	"common/ent/examcategory"
	"common/ent/examsetting"
	"common/ent/generatedexam"
	"common/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamUpdate is the builder for updating Exam entities.
type ExamUpdate struct {
	config
	hooks    []Hook
	mutation *ExamMutation
}

// Where appends a list predicates to the ExamUpdate builder.
func (eu *ExamUpdate) Where(ps ...predicate.Exam) *ExamUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetName sets the "name" field.
func (eu *ExamUpdate) SetName(s string) *ExamUpdate {
	eu.mutation.SetName(s)
	return eu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (eu *ExamUpdate) SetNillableName(s *string) *ExamUpdate {
	if s != nil {
		eu.SetName(*s)
	}
	return eu
}

// SetDescription sets the "description" field.
func (eu *ExamUpdate) SetDescription(s string) *ExamUpdate {
	eu.mutation.SetDescription(s)
	return eu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (eu *ExamUpdate) SetNillableDescription(s *string) *ExamUpdate {
	if s != nil {
		eu.SetDescription(*s)
	}
	return eu
}

// SetIsActive sets the "is_active" field.
func (eu *ExamUpdate) SetIsActive(b bool) *ExamUpdate {
	eu.mutation.SetIsActive(b)
	return eu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (eu *ExamUpdate) SetNillableIsActive(b *bool) *ExamUpdate {
	if b != nil {
		eu.SetIsActive(*b)
	}
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *ExamUpdate) SetUpdatedAt(t time.Time) *ExamUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetCategoryID sets the "category" edge to the ExamCategory entity by ID.
func (eu *ExamUpdate) SetCategoryID(id int) *ExamUpdate {
	eu.mutation.SetCategoryID(id)
	return eu
}

// SetNillableCategoryID sets the "category" edge to the ExamCategory entity by ID if the given value is not nil.
func (eu *ExamUpdate) SetNillableCategoryID(id *int) *ExamUpdate {
	if id != nil {
		eu = eu.SetCategoryID(*id)
	}
	return eu
}

// SetCategory sets the "category" edge to the ExamCategory entity.
func (eu *ExamUpdate) SetCategory(e *ExamCategory) *ExamUpdate {
	return eu.SetCategoryID(e.ID)
}

// SetSettingID sets the "setting" edge to the ExamSetting entity by ID.
func (eu *ExamUpdate) SetSettingID(id int) *ExamUpdate {
	eu.mutation.SetSettingID(id)
	return eu
}

// SetNillableSettingID sets the "setting" edge to the ExamSetting entity by ID if the given value is not nil.
func (eu *ExamUpdate) SetNillableSettingID(id *int) *ExamUpdate {
	if id != nil {
		eu = eu.SetSettingID(*id)
	}
	return eu
}

// SetSetting sets the "setting" edge to the ExamSetting entity.
func (eu *ExamUpdate) SetSetting(e *ExamSetting) *ExamUpdate {
	return eu.SetSettingID(e.ID)
}

// AddAttemptIDs adds the "attempts" edge to the ExamAttempt entity by IDs.
func (eu *ExamUpdate) AddAttemptIDs(ids ...int) *ExamUpdate {
	eu.mutation.AddAttemptIDs(ids...)
	return eu
}

// AddAttempts adds the "attempts" edges to the ExamAttempt entity.
func (eu *ExamUpdate) AddAttempts(e ...*ExamAttempt) *ExamUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddAttemptIDs(ids...)
}

// AddCachedQuestionMetadatumIDs adds the "cached_question_metadata" edge to the CachedQuestionMetaData entity by IDs.
func (eu *ExamUpdate) AddCachedQuestionMetadatumIDs(ids ...int) *ExamUpdate {
	eu.mutation.AddCachedQuestionMetadatumIDs(ids...)
	return eu
}

// AddCachedQuestionMetadata adds the "cached_question_metadata" edges to the CachedQuestionMetaData entity.
func (eu *ExamUpdate) AddCachedQuestionMetadata(c ...*CachedQuestionMetaData) *ExamUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.AddCachedQuestionMetadatumIDs(ids...)
}

// AddGeneratedexamIDs adds the "generatedexams" edge to the GeneratedExam entity by IDs.
func (eu *ExamUpdate) AddGeneratedexamIDs(ids ...int) *ExamUpdate {
	eu.mutation.AddGeneratedexamIDs(ids...)
	return eu
}

// AddGeneratedexams adds the "generatedexams" edges to the GeneratedExam entity.
func (eu *ExamUpdate) AddGeneratedexams(g ...*GeneratedExam) *ExamUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return eu.AddGeneratedexamIDs(ids...)
}

// Mutation returns the ExamMutation object of the builder.
func (eu *ExamUpdate) Mutation() *ExamMutation {
	return eu.mutation
}

// ClearCategory clears the "category" edge to the ExamCategory entity.
func (eu *ExamUpdate) ClearCategory() *ExamUpdate {
	eu.mutation.ClearCategory()
	return eu
}

// ClearSetting clears the "setting" edge to the ExamSetting entity.
func (eu *ExamUpdate) ClearSetting() *ExamUpdate {
	eu.mutation.ClearSetting()
	return eu
}

// ClearAttempts clears all "attempts" edges to the ExamAttempt entity.
func (eu *ExamUpdate) ClearAttempts() *ExamUpdate {
	eu.mutation.ClearAttempts()
	return eu
}

// RemoveAttemptIDs removes the "attempts" edge to ExamAttempt entities by IDs.
func (eu *ExamUpdate) RemoveAttemptIDs(ids ...int) *ExamUpdate {
	eu.mutation.RemoveAttemptIDs(ids...)
	return eu
}

// RemoveAttempts removes "attempts" edges to ExamAttempt entities.
func (eu *ExamUpdate) RemoveAttempts(e ...*ExamAttempt) *ExamUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveAttemptIDs(ids...)
}

// ClearCachedQuestionMetadata clears all "cached_question_metadata" edges to the CachedQuestionMetaData entity.
func (eu *ExamUpdate) ClearCachedQuestionMetadata() *ExamUpdate {
	eu.mutation.ClearCachedQuestionMetadata()
	return eu
}

// RemoveCachedQuestionMetadatumIDs removes the "cached_question_metadata" edge to CachedQuestionMetaData entities by IDs.
func (eu *ExamUpdate) RemoveCachedQuestionMetadatumIDs(ids ...int) *ExamUpdate {
	eu.mutation.RemoveCachedQuestionMetadatumIDs(ids...)
	return eu
}

// RemoveCachedQuestionMetadata removes "cached_question_metadata" edges to CachedQuestionMetaData entities.
func (eu *ExamUpdate) RemoveCachedQuestionMetadata(c ...*CachedQuestionMetaData) *ExamUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.RemoveCachedQuestionMetadatumIDs(ids...)
}

// ClearGeneratedexams clears all "generatedexams" edges to the GeneratedExam entity.
func (eu *ExamUpdate) ClearGeneratedexams() *ExamUpdate {
	eu.mutation.ClearGeneratedexams()
	return eu
}

// RemoveGeneratedexamIDs removes the "generatedexams" edge to GeneratedExam entities by IDs.
func (eu *ExamUpdate) RemoveGeneratedexamIDs(ids ...int) *ExamUpdate {
	eu.mutation.RemoveGeneratedexamIDs(ids...)
	return eu
}

// RemoveGeneratedexams removes "generatedexams" edges to GeneratedExam entities.
func (eu *ExamUpdate) RemoveGeneratedexams(g ...*GeneratedExam) *ExamUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return eu.RemoveGeneratedexamIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *ExamUpdate) Save(ctx context.Context) (int, error) {
	eu.defaults()
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ExamUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ExamUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ExamUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *ExamUpdate) defaults() {
	if _, ok := eu.mutation.UpdatedAt(); !ok {
		v := exam.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
}

func (eu *ExamUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(exam.Table, exam.Columns, sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.SetField(exam.FieldName, field.TypeString, value)
	}
	if value, ok := eu.mutation.Description(); ok {
		_spec.SetField(exam.FieldDescription, field.TypeString, value)
	}
	if value, ok := eu.mutation.IsActive(); ok {
		_spec.SetField(exam.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(exam.FieldUpdatedAt, field.TypeTime, value)
	}
	if eu.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam.CategoryTable,
			Columns: []string{exam.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam.CategoryTable,
			Columns: []string{exam.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.SettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   exam.SettingTable,
			Columns: []string{exam.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examsetting.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.SettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   exam.SettingTable,
			Columns: []string{exam.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examsetting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.AttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.AttemptsTable,
			Columns: []string{exam.AttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examattempt.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedAttemptsIDs(); len(nodes) > 0 && !eu.mutation.AttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.AttemptsTable,
			Columns: []string{exam.AttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.AttemptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.AttemptsTable,
			Columns: []string{exam.AttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.CachedQuestionMetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.CachedQuestionMetadataTable,
			Columns: []string{exam.CachedQuestionMetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cachedquestionmetadata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedCachedQuestionMetadataIDs(); len(nodes) > 0 && !eu.mutation.CachedQuestionMetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.CachedQuestionMetadataTable,
			Columns: []string{exam.CachedQuestionMetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cachedquestionmetadata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.CachedQuestionMetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.CachedQuestionMetadataTable,
			Columns: []string{exam.CachedQuestionMetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cachedquestionmetadata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.GeneratedexamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.GeneratedexamsTable,
			Columns: []string{exam.GeneratedexamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generatedexam.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedGeneratedexamsIDs(); len(nodes) > 0 && !eu.mutation.GeneratedexamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.GeneratedexamsTable,
			Columns: []string{exam.GeneratedexamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generatedexam.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.GeneratedexamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.GeneratedexamsTable,
			Columns: []string{exam.GeneratedexamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generatedexam.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exam.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// ExamUpdateOne is the builder for updating a single Exam entity.
type ExamUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExamMutation
}

// SetName sets the "name" field.
func (euo *ExamUpdateOne) SetName(s string) *ExamUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableName(s *string) *ExamUpdateOne {
	if s != nil {
		euo.SetName(*s)
	}
	return euo
}

// SetDescription sets the "description" field.
func (euo *ExamUpdateOne) SetDescription(s string) *ExamUpdateOne {
	euo.mutation.SetDescription(s)
	return euo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableDescription(s *string) *ExamUpdateOne {
	if s != nil {
		euo.SetDescription(*s)
	}
	return euo
}

// SetIsActive sets the "is_active" field.
func (euo *ExamUpdateOne) SetIsActive(b bool) *ExamUpdateOne {
	euo.mutation.SetIsActive(b)
	return euo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableIsActive(b *bool) *ExamUpdateOne {
	if b != nil {
		euo.SetIsActive(*b)
	}
	return euo
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *ExamUpdateOne) SetUpdatedAt(t time.Time) *ExamUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetCategoryID sets the "category" edge to the ExamCategory entity by ID.
func (euo *ExamUpdateOne) SetCategoryID(id int) *ExamUpdateOne {
	euo.mutation.SetCategoryID(id)
	return euo
}

// SetNillableCategoryID sets the "category" edge to the ExamCategory entity by ID if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableCategoryID(id *int) *ExamUpdateOne {
	if id != nil {
		euo = euo.SetCategoryID(*id)
	}
	return euo
}

// SetCategory sets the "category" edge to the ExamCategory entity.
func (euo *ExamUpdateOne) SetCategory(e *ExamCategory) *ExamUpdateOne {
	return euo.SetCategoryID(e.ID)
}

// SetSettingID sets the "setting" edge to the ExamSetting entity by ID.
func (euo *ExamUpdateOne) SetSettingID(id int) *ExamUpdateOne {
	euo.mutation.SetSettingID(id)
	return euo
}

// SetNillableSettingID sets the "setting" edge to the ExamSetting entity by ID if the given value is not nil.
func (euo *ExamUpdateOne) SetNillableSettingID(id *int) *ExamUpdateOne {
	if id != nil {
		euo = euo.SetSettingID(*id)
	}
	return euo
}

// SetSetting sets the "setting" edge to the ExamSetting entity.
func (euo *ExamUpdateOne) SetSetting(e *ExamSetting) *ExamUpdateOne {
	return euo.SetSettingID(e.ID)
}

// AddAttemptIDs adds the "attempts" edge to the ExamAttempt entity by IDs.
func (euo *ExamUpdateOne) AddAttemptIDs(ids ...int) *ExamUpdateOne {
	euo.mutation.AddAttemptIDs(ids...)
	return euo
}

// AddAttempts adds the "attempts" edges to the ExamAttempt entity.
func (euo *ExamUpdateOne) AddAttempts(e ...*ExamAttempt) *ExamUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddAttemptIDs(ids...)
}

// AddCachedQuestionMetadatumIDs adds the "cached_question_metadata" edge to the CachedQuestionMetaData entity by IDs.
func (euo *ExamUpdateOne) AddCachedQuestionMetadatumIDs(ids ...int) *ExamUpdateOne {
	euo.mutation.AddCachedQuestionMetadatumIDs(ids...)
	return euo
}

// AddCachedQuestionMetadata adds the "cached_question_metadata" edges to the CachedQuestionMetaData entity.
func (euo *ExamUpdateOne) AddCachedQuestionMetadata(c ...*CachedQuestionMetaData) *ExamUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.AddCachedQuestionMetadatumIDs(ids...)
}

// AddGeneratedexamIDs adds the "generatedexams" edge to the GeneratedExam entity by IDs.
func (euo *ExamUpdateOne) AddGeneratedexamIDs(ids ...int) *ExamUpdateOne {
	euo.mutation.AddGeneratedexamIDs(ids...)
	return euo
}

// AddGeneratedexams adds the "generatedexams" edges to the GeneratedExam entity.
func (euo *ExamUpdateOne) AddGeneratedexams(g ...*GeneratedExam) *ExamUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return euo.AddGeneratedexamIDs(ids...)
}

// Mutation returns the ExamMutation object of the builder.
func (euo *ExamUpdateOne) Mutation() *ExamMutation {
	return euo.mutation
}

// ClearCategory clears the "category" edge to the ExamCategory entity.
func (euo *ExamUpdateOne) ClearCategory() *ExamUpdateOne {
	euo.mutation.ClearCategory()
	return euo
}

// ClearSetting clears the "setting" edge to the ExamSetting entity.
func (euo *ExamUpdateOne) ClearSetting() *ExamUpdateOne {
	euo.mutation.ClearSetting()
	return euo
}

// ClearAttempts clears all "attempts" edges to the ExamAttempt entity.
func (euo *ExamUpdateOne) ClearAttempts() *ExamUpdateOne {
	euo.mutation.ClearAttempts()
	return euo
}

// RemoveAttemptIDs removes the "attempts" edge to ExamAttempt entities by IDs.
func (euo *ExamUpdateOne) RemoveAttemptIDs(ids ...int) *ExamUpdateOne {
	euo.mutation.RemoveAttemptIDs(ids...)
	return euo
}

// RemoveAttempts removes "attempts" edges to ExamAttempt entities.
func (euo *ExamUpdateOne) RemoveAttempts(e ...*ExamAttempt) *ExamUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveAttemptIDs(ids...)
}

// ClearCachedQuestionMetadata clears all "cached_question_metadata" edges to the CachedQuestionMetaData entity.
func (euo *ExamUpdateOne) ClearCachedQuestionMetadata() *ExamUpdateOne {
	euo.mutation.ClearCachedQuestionMetadata()
	return euo
}

// RemoveCachedQuestionMetadatumIDs removes the "cached_question_metadata" edge to CachedQuestionMetaData entities by IDs.
func (euo *ExamUpdateOne) RemoveCachedQuestionMetadatumIDs(ids ...int) *ExamUpdateOne {
	euo.mutation.RemoveCachedQuestionMetadatumIDs(ids...)
	return euo
}

// RemoveCachedQuestionMetadata removes "cached_question_metadata" edges to CachedQuestionMetaData entities.
func (euo *ExamUpdateOne) RemoveCachedQuestionMetadata(c ...*CachedQuestionMetaData) *ExamUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.RemoveCachedQuestionMetadatumIDs(ids...)
}

// ClearGeneratedexams clears all "generatedexams" edges to the GeneratedExam entity.
func (euo *ExamUpdateOne) ClearGeneratedexams() *ExamUpdateOne {
	euo.mutation.ClearGeneratedexams()
	return euo
}

// RemoveGeneratedexamIDs removes the "generatedexams" edge to GeneratedExam entities by IDs.
func (euo *ExamUpdateOne) RemoveGeneratedexamIDs(ids ...int) *ExamUpdateOne {
	euo.mutation.RemoveGeneratedexamIDs(ids...)
	return euo
}

// RemoveGeneratedexams removes "generatedexams" edges to GeneratedExam entities.
func (euo *ExamUpdateOne) RemoveGeneratedexams(g ...*GeneratedExam) *ExamUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return euo.RemoveGeneratedexamIDs(ids...)
}

// Where appends a list predicates to the ExamUpdate builder.
func (euo *ExamUpdateOne) Where(ps ...predicate.Exam) *ExamUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *ExamUpdateOne) Select(field string, fields ...string) *ExamUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Exam entity.
func (euo *ExamUpdateOne) Save(ctx context.Context) (*Exam, error) {
	euo.defaults()
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ExamUpdateOne) SaveX(ctx context.Context) *Exam {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *ExamUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ExamUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *ExamUpdateOne) defaults() {
	if _, ok := euo.mutation.UpdatedAt(); !ok {
		v := exam.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
}

func (euo *ExamUpdateOne) sqlSave(ctx context.Context) (_node *Exam, err error) {
	_spec := sqlgraph.NewUpdateSpec(exam.Table, exam.Columns, sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Exam.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exam.FieldID)
		for _, f := range fields {
			if !exam.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != exam.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Name(); ok {
		_spec.SetField(exam.FieldName, field.TypeString, value)
	}
	if value, ok := euo.mutation.Description(); ok {
		_spec.SetField(exam.FieldDescription, field.TypeString, value)
	}
	if value, ok := euo.mutation.IsActive(); ok {
		_spec.SetField(exam.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(exam.FieldUpdatedAt, field.TypeTime, value)
	}
	if euo.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam.CategoryTable,
			Columns: []string{exam.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exam.CategoryTable,
			Columns: []string{exam.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.SettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   exam.SettingTable,
			Columns: []string{exam.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examsetting.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.SettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   exam.SettingTable,
			Columns: []string{exam.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examsetting.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.AttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.AttemptsTable,
			Columns: []string{exam.AttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examattempt.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedAttemptsIDs(); len(nodes) > 0 && !euo.mutation.AttemptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.AttemptsTable,
			Columns: []string{exam.AttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.AttemptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.AttemptsTable,
			Columns: []string{exam.AttemptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.CachedQuestionMetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.CachedQuestionMetadataTable,
			Columns: []string{exam.CachedQuestionMetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cachedquestionmetadata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedCachedQuestionMetadataIDs(); len(nodes) > 0 && !euo.mutation.CachedQuestionMetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.CachedQuestionMetadataTable,
			Columns: []string{exam.CachedQuestionMetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cachedquestionmetadata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.CachedQuestionMetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.CachedQuestionMetadataTable,
			Columns: []string{exam.CachedQuestionMetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cachedquestionmetadata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.GeneratedexamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.GeneratedexamsTable,
			Columns: []string{exam.GeneratedexamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generatedexam.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedGeneratedexamsIDs(); len(nodes) > 0 && !euo.mutation.GeneratedexamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.GeneratedexamsTable,
			Columns: []string{exam.GeneratedexamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generatedexam.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.GeneratedexamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   exam.GeneratedexamsTable,
			Columns: []string{exam.GeneratedexamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(generatedexam.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Exam{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exam.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
