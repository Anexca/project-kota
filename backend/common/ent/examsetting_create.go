// Code generated by ent, DO NOT EDIT.

package ent

import (
	"common/ent/exam"
	"common/ent/examsetting"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamSettingCreate is the builder for creating a ExamSetting entity.
type ExamSettingCreate struct {
	config
	mutation *ExamSettingMutation
	hooks    []Hook
}

// SetNumberOfQuestions sets the "number_of_questions" field.
func (esc *ExamSettingCreate) SetNumberOfQuestions(i int) *ExamSettingCreate {
	esc.mutation.SetNumberOfQuestions(i)
	return esc
}

// SetDurationMinutes sets the "duration_minutes" field.
func (esc *ExamSettingCreate) SetDurationMinutes(i int) *ExamSettingCreate {
	esc.mutation.SetDurationMinutes(i)
	return esc
}

// SetNegativeMarking sets the "negative_marking" field.
func (esc *ExamSettingCreate) SetNegativeMarking(f float64) *ExamSettingCreate {
	esc.mutation.SetNegativeMarking(f)
	return esc
}

// SetNillableNegativeMarking sets the "negative_marking" field if the given value is not nil.
func (esc *ExamSettingCreate) SetNillableNegativeMarking(f *float64) *ExamSettingCreate {
	if f != nil {
		esc.SetNegativeMarking(*f)
	}
	return esc
}

// SetAiPrompt sets the "ai_prompt" field.
func (esc *ExamSettingCreate) SetAiPrompt(s string) *ExamSettingCreate {
	esc.mutation.SetAiPrompt(s)
	return esc
}

// SetNillableAiPrompt sets the "ai_prompt" field if the given value is not nil.
func (esc *ExamSettingCreate) SetNillableAiPrompt(s *string) *ExamSettingCreate {
	if s != nil {
		esc.SetAiPrompt(*s)
	}
	return esc
}

// SetOtherDetails sets the "other_details" field.
func (esc *ExamSettingCreate) SetOtherDetails(m map[string]interface{}) *ExamSettingCreate {
	esc.mutation.SetOtherDetails(m)
	return esc
}

// SetMaxAttempts sets the "max_attempts" field.
func (esc *ExamSettingCreate) SetMaxAttempts(i int) *ExamSettingCreate {
	esc.mutation.SetMaxAttempts(i)
	return esc
}

// SetNillableMaxAttempts sets the "max_attempts" field if the given value is not nil.
func (esc *ExamSettingCreate) SetNillableMaxAttempts(i *int) *ExamSettingCreate {
	if i != nil {
		esc.SetMaxAttempts(*i)
	}
	return esc
}

// SetEvaluationAiPrompt sets the "evaluation_ai_prompt" field.
func (esc *ExamSettingCreate) SetEvaluationAiPrompt(s string) *ExamSettingCreate {
	esc.mutation.SetEvaluationAiPrompt(s)
	return esc
}

// SetNillableEvaluationAiPrompt sets the "evaluation_ai_prompt" field if the given value is not nil.
func (esc *ExamSettingCreate) SetNillableEvaluationAiPrompt(s *string) *ExamSettingCreate {
	if s != nil {
		esc.SetEvaluationAiPrompt(*s)
	}
	return esc
}

// SetCreatedAt sets the "created_at" field.
func (esc *ExamSettingCreate) SetCreatedAt(t time.Time) *ExamSettingCreate {
	esc.mutation.SetCreatedAt(t)
	return esc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (esc *ExamSettingCreate) SetNillableCreatedAt(t *time.Time) *ExamSettingCreate {
	if t != nil {
		esc.SetCreatedAt(*t)
	}
	return esc
}

// SetUpdatedAt sets the "updated_at" field.
func (esc *ExamSettingCreate) SetUpdatedAt(t time.Time) *ExamSettingCreate {
	esc.mutation.SetUpdatedAt(t)
	return esc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (esc *ExamSettingCreate) SetNillableUpdatedAt(t *time.Time) *ExamSettingCreate {
	if t != nil {
		esc.SetUpdatedAt(*t)
	}
	return esc
}

// SetExamID sets the "exam" edge to the Exam entity by ID.
func (esc *ExamSettingCreate) SetExamID(id int) *ExamSettingCreate {
	esc.mutation.SetExamID(id)
	return esc
}

// SetNillableExamID sets the "exam" edge to the Exam entity by ID if the given value is not nil.
func (esc *ExamSettingCreate) SetNillableExamID(id *int) *ExamSettingCreate {
	if id != nil {
		esc = esc.SetExamID(*id)
	}
	return esc
}

// SetExam sets the "exam" edge to the Exam entity.
func (esc *ExamSettingCreate) SetExam(e *Exam) *ExamSettingCreate {
	return esc.SetExamID(e.ID)
}

// Mutation returns the ExamSettingMutation object of the builder.
func (esc *ExamSettingCreate) Mutation() *ExamSettingMutation {
	return esc.mutation
}

// Save creates the ExamSetting in the database.
func (esc *ExamSettingCreate) Save(ctx context.Context) (*ExamSetting, error) {
	esc.defaults()
	return withHooks(ctx, esc.sqlSave, esc.mutation, esc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (esc *ExamSettingCreate) SaveX(ctx context.Context) *ExamSetting {
	v, err := esc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (esc *ExamSettingCreate) Exec(ctx context.Context) error {
	_, err := esc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esc *ExamSettingCreate) ExecX(ctx context.Context) {
	if err := esc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (esc *ExamSettingCreate) defaults() {
	if _, ok := esc.mutation.MaxAttempts(); !ok {
		v := examsetting.DefaultMaxAttempts
		esc.mutation.SetMaxAttempts(v)
	}
	if _, ok := esc.mutation.CreatedAt(); !ok {
		v := examsetting.DefaultCreatedAt()
		esc.mutation.SetCreatedAt(v)
	}
	if _, ok := esc.mutation.UpdatedAt(); !ok {
		v := examsetting.DefaultUpdatedAt()
		esc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (esc *ExamSettingCreate) check() error {
	if _, ok := esc.mutation.NumberOfQuestions(); !ok {
		return &ValidationError{Name: "number_of_questions", err: errors.New(`ent: missing required field "ExamSetting.number_of_questions"`)}
	}
	if _, ok := esc.mutation.DurationMinutes(); !ok {
		return &ValidationError{Name: "duration_minutes", err: errors.New(`ent: missing required field "ExamSetting.duration_minutes"`)}
	}
	if _, ok := esc.mutation.MaxAttempts(); !ok {
		return &ValidationError{Name: "max_attempts", err: errors.New(`ent: missing required field "ExamSetting.max_attempts"`)}
	}
	if _, ok := esc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ExamSetting.created_at"`)}
	}
	if _, ok := esc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ExamSetting.updated_at"`)}
	}
	return nil
}

func (esc *ExamSettingCreate) sqlSave(ctx context.Context) (*ExamSetting, error) {
	if err := esc.check(); err != nil {
		return nil, err
	}
	_node, _spec := esc.createSpec()
	if err := sqlgraph.CreateNode(ctx, esc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	esc.mutation.id = &_node.ID
	esc.mutation.done = true
	return _node, nil
}

func (esc *ExamSettingCreate) createSpec() (*ExamSetting, *sqlgraph.CreateSpec) {
	var (
		_node = &ExamSetting{config: esc.config}
		_spec = sqlgraph.NewCreateSpec(examsetting.Table, sqlgraph.NewFieldSpec(examsetting.FieldID, field.TypeInt))
	)
	if value, ok := esc.mutation.NumberOfQuestions(); ok {
		_spec.SetField(examsetting.FieldNumberOfQuestions, field.TypeInt, value)
		_node.NumberOfQuestions = value
	}
	if value, ok := esc.mutation.DurationMinutes(); ok {
		_spec.SetField(examsetting.FieldDurationMinutes, field.TypeInt, value)
		_node.DurationMinutes = value
	}
	if value, ok := esc.mutation.NegativeMarking(); ok {
		_spec.SetField(examsetting.FieldNegativeMarking, field.TypeFloat64, value)
		_node.NegativeMarking = value
	}
	if value, ok := esc.mutation.AiPrompt(); ok {
		_spec.SetField(examsetting.FieldAiPrompt, field.TypeString, value)
		_node.AiPrompt = value
	}
	if value, ok := esc.mutation.OtherDetails(); ok {
		_spec.SetField(examsetting.FieldOtherDetails, field.TypeJSON, value)
		_node.OtherDetails = value
	}
	if value, ok := esc.mutation.MaxAttempts(); ok {
		_spec.SetField(examsetting.FieldMaxAttempts, field.TypeInt, value)
		_node.MaxAttempts = value
	}
	if value, ok := esc.mutation.EvaluationAiPrompt(); ok {
		_spec.SetField(examsetting.FieldEvaluationAiPrompt, field.TypeString, value)
		_node.EvaluationAiPrompt = value
	}
	if value, ok := esc.mutation.CreatedAt(); ok {
		_spec.SetField(examsetting.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := esc.mutation.UpdatedAt(); ok {
		_spec.SetField(examsetting.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := esc.mutation.ExamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   examsetting.ExamTable,
			Columns: []string{examsetting.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.exam_setting = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ExamSettingCreateBulk is the builder for creating many ExamSetting entities in bulk.
type ExamSettingCreateBulk struct {
	config
	err      error
	builders []*ExamSettingCreate
}

// Save creates the ExamSetting entities in the database.
func (escb *ExamSettingCreateBulk) Save(ctx context.Context) ([]*ExamSetting, error) {
	if escb.err != nil {
		return nil, escb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(escb.builders))
	nodes := make([]*ExamSetting, len(escb.builders))
	mutators := make([]Mutator, len(escb.builders))
	for i := range escb.builders {
		func(i int, root context.Context) {
			builder := escb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExamSettingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, escb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, escb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, escb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (escb *ExamSettingCreateBulk) SaveX(ctx context.Context) []*ExamSetting {
	v, err := escb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (escb *ExamSettingCreateBulk) Exec(ctx context.Context) error {
	_, err := escb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (escb *ExamSettingCreateBulk) ExecX(ctx context.Context) {
	if err := escb.Exec(ctx); err != nil {
		panic(err)
	}
}
