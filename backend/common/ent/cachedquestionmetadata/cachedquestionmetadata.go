// Code generated by ent, DO NOT EDIT.

package cachedquestionmetadata

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the cachedquestionmetadata type in the database.
	Label = "cached_question_metadata"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldSubject holds the string denoting the subject field in the database.
	FieldSubject = "subject"
	// FieldExam holds the string denoting the exam field in the database.
	FieldExam = "exam"
	// FieldIsProcessed holds the string denoting the is_processed field in the database.
	FieldIsProcessed = "is_processed"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the cachedquestionmetadata in the database.
	Table = "cached_question_metadata"
)

// Columns holds all SQL columns for cachedquestionmetadata fields.
var Columns = []string{
	FieldID,
	FieldKey,
	FieldType,
	FieldSubject,
	FieldExam,
	FieldIsProcessed,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsProcessed holds the default value on creation for the "is_processed" field.
	DefaultIsProcessed bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the CachedQuestionMetadata queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByKey orders the results by the key field.
func ByKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKey, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// BySubject orders the results by the subject field.
func BySubject(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubject, opts...).ToFunc()
}

// ByExam orders the results by the exam field.
func ByExam(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExam, opts...).ToFunc()
}

// ByIsProcessed orders the results by the is_processed field.
func ByIsProcessed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsProcessed, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
