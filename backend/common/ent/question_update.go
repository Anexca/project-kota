// Code generated by ent, DO NOT EDIT.

package ent

import (
	"common/ent/exam"
	"common/ent/predicate"
	"common/ent/question"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QuestionUpdate is the builder for updating Question entities.
type QuestionUpdate struct {
	config
	hooks    []Hook
	mutation *QuestionMutation
}

// Where appends a list predicates to the QuestionUpdate builder.
func (qu *QuestionUpdate) Where(ps ...predicate.Question) *QuestionUpdate {
	qu.mutation.Where(ps...)
	return qu
}

// SetIsActive sets the "is_active" field.
func (qu *QuestionUpdate) SetIsActive(b bool) *QuestionUpdate {
	qu.mutation.SetIsActive(b)
	return qu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableIsActive(b *bool) *QuestionUpdate {
	if b != nil {
		qu.SetIsActive(*b)
	}
	return qu
}

// SetRawQuestionData sets the "raw_question_data" field.
func (qu *QuestionUpdate) SetRawQuestionData(m map[string]interface{}) *QuestionUpdate {
	qu.mutation.SetRawQuestionData(m)
	return qu
}

// ClearRawQuestionData clears the value of the "raw_question_data" field.
func (qu *QuestionUpdate) ClearRawQuestionData() *QuestionUpdate {
	qu.mutation.ClearRawQuestionData()
	return qu
}

// SetUpdatedAt sets the "updated_at" field.
func (qu *QuestionUpdate) SetUpdatedAt(t time.Time) *QuestionUpdate {
	qu.mutation.SetUpdatedAt(t)
	return qu
}

// SetExamID sets the "exam" edge to the Exam entity by ID.
func (qu *QuestionUpdate) SetExamID(id int) *QuestionUpdate {
	qu.mutation.SetExamID(id)
	return qu
}

// SetNillableExamID sets the "exam" edge to the Exam entity by ID if the given value is not nil.
func (qu *QuestionUpdate) SetNillableExamID(id *int) *QuestionUpdate {
	if id != nil {
		qu = qu.SetExamID(*id)
	}
	return qu
}

// SetExam sets the "exam" edge to the Exam entity.
func (qu *QuestionUpdate) SetExam(e *Exam) *QuestionUpdate {
	return qu.SetExamID(e.ID)
}

// Mutation returns the QuestionMutation object of the builder.
func (qu *QuestionUpdate) Mutation() *QuestionMutation {
	return qu.mutation
}

// ClearExam clears the "exam" edge to the Exam entity.
func (qu *QuestionUpdate) ClearExam() *QuestionUpdate {
	qu.mutation.ClearExam()
	return qu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qu *QuestionUpdate) Save(ctx context.Context) (int, error) {
	qu.defaults()
	return withHooks(ctx, qu.sqlSave, qu.mutation, qu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qu *QuestionUpdate) SaveX(ctx context.Context) int {
	affected, err := qu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qu *QuestionUpdate) Exec(ctx context.Context) error {
	_, err := qu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qu *QuestionUpdate) ExecX(ctx context.Context) {
	if err := qu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qu *QuestionUpdate) defaults() {
	if _, ok := qu.mutation.UpdatedAt(); !ok {
		v := question.UpdateDefaultUpdatedAt()
		qu.mutation.SetUpdatedAt(v)
	}
}

func (qu *QuestionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(question.Table, question.Columns, sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt))
	if ps := qu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qu.mutation.IsActive(); ok {
		_spec.SetField(question.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := qu.mutation.RawQuestionData(); ok {
		_spec.SetField(question.FieldRawQuestionData, field.TypeJSON, value)
	}
	if qu.mutation.RawQuestionDataCleared() {
		_spec.ClearField(question.FieldRawQuestionData, field.TypeJSON)
	}
	if value, ok := qu.mutation.UpdatedAt(); ok {
		_spec.SetField(question.FieldUpdatedAt, field.TypeTime, value)
	}
	if qu.mutation.ExamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.ExamTable,
			Columns: []string{question.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.ExamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.ExamTable,
			Columns: []string{question.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{question.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qu.mutation.done = true
	return n, nil
}

// QuestionUpdateOne is the builder for updating a single Question entity.
type QuestionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QuestionMutation
}

// SetIsActive sets the "is_active" field.
func (quo *QuestionUpdateOne) SetIsActive(b bool) *QuestionUpdateOne {
	quo.mutation.SetIsActive(b)
	return quo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableIsActive(b *bool) *QuestionUpdateOne {
	if b != nil {
		quo.SetIsActive(*b)
	}
	return quo
}

// SetRawQuestionData sets the "raw_question_data" field.
func (quo *QuestionUpdateOne) SetRawQuestionData(m map[string]interface{}) *QuestionUpdateOne {
	quo.mutation.SetRawQuestionData(m)
	return quo
}

// ClearRawQuestionData clears the value of the "raw_question_data" field.
func (quo *QuestionUpdateOne) ClearRawQuestionData() *QuestionUpdateOne {
	quo.mutation.ClearRawQuestionData()
	return quo
}

// SetUpdatedAt sets the "updated_at" field.
func (quo *QuestionUpdateOne) SetUpdatedAt(t time.Time) *QuestionUpdateOne {
	quo.mutation.SetUpdatedAt(t)
	return quo
}

// SetExamID sets the "exam" edge to the Exam entity by ID.
func (quo *QuestionUpdateOne) SetExamID(id int) *QuestionUpdateOne {
	quo.mutation.SetExamID(id)
	return quo
}

// SetNillableExamID sets the "exam" edge to the Exam entity by ID if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableExamID(id *int) *QuestionUpdateOne {
	if id != nil {
		quo = quo.SetExamID(*id)
	}
	return quo
}

// SetExam sets the "exam" edge to the Exam entity.
func (quo *QuestionUpdateOne) SetExam(e *Exam) *QuestionUpdateOne {
	return quo.SetExamID(e.ID)
}

// Mutation returns the QuestionMutation object of the builder.
func (quo *QuestionUpdateOne) Mutation() *QuestionMutation {
	return quo.mutation
}

// ClearExam clears the "exam" edge to the Exam entity.
func (quo *QuestionUpdateOne) ClearExam() *QuestionUpdateOne {
	quo.mutation.ClearExam()
	return quo
}

// Where appends a list predicates to the QuestionUpdate builder.
func (quo *QuestionUpdateOne) Where(ps ...predicate.Question) *QuestionUpdateOne {
	quo.mutation.Where(ps...)
	return quo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (quo *QuestionUpdateOne) Select(field string, fields ...string) *QuestionUpdateOne {
	quo.fields = append([]string{field}, fields...)
	return quo
}

// Save executes the query and returns the updated Question entity.
func (quo *QuestionUpdateOne) Save(ctx context.Context) (*Question, error) {
	quo.defaults()
	return withHooks(ctx, quo.sqlSave, quo.mutation, quo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (quo *QuestionUpdateOne) SaveX(ctx context.Context) *Question {
	node, err := quo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (quo *QuestionUpdateOne) Exec(ctx context.Context) error {
	_, err := quo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (quo *QuestionUpdateOne) ExecX(ctx context.Context) {
	if err := quo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (quo *QuestionUpdateOne) defaults() {
	if _, ok := quo.mutation.UpdatedAt(); !ok {
		v := question.UpdateDefaultUpdatedAt()
		quo.mutation.SetUpdatedAt(v)
	}
}

func (quo *QuestionUpdateOne) sqlSave(ctx context.Context) (_node *Question, err error) {
	_spec := sqlgraph.NewUpdateSpec(question.Table, question.Columns, sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt))
	id, ok := quo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Question.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := quo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, question.FieldID)
		for _, f := range fields {
			if !question.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != question.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := quo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := quo.mutation.IsActive(); ok {
		_spec.SetField(question.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := quo.mutation.RawQuestionData(); ok {
		_spec.SetField(question.FieldRawQuestionData, field.TypeJSON, value)
	}
	if quo.mutation.RawQuestionDataCleared() {
		_spec.ClearField(question.FieldRawQuestionData, field.TypeJSON)
	}
	if value, ok := quo.mutation.UpdatedAt(); ok {
		_spec.SetField(question.FieldUpdatedAt, field.TypeTime, value)
	}
	if quo.mutation.ExamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.ExamTable,
			Columns: []string{question.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.ExamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.ExamTable,
			Columns: []string{question.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Question{config: quo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, quo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{question.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	quo.mutation.done = true
	return _node, nil
}
