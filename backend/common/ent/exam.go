// Code generated by ent, DO NOT EDIT.

package ent

import (
	"common/ent/exam"
	"common/ent/examcategory"
	"common/ent/examgroup"
	"common/ent/examsetting"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Exam is the model entity for the Exam schema.
type Exam struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Type holds the value of the "type" field.
	Type exam.Type `json:"type,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// LogoURL holds the value of the "logo_url" field.
	//
	// Deprecated: Field "logo_url" was marked as deprecated in the schema.
	LogoURL string `json:"logo_url,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExamQuery when eager-loading is set.
	Edges               ExamEdges `json:"edges"`
	exam_category_exams *int
	exam_group_exams    *int
	selectValues        sql.SelectValues
}

// ExamEdges holds the relations/edges for other nodes in the graph.
type ExamEdges struct {
	// Category holds the value of the category edge.
	Category *ExamCategory `json:"category,omitempty"`
	// Group holds the value of the group edge.
	Group *ExamGroup `json:"group,omitempty"`
	// Subscriptions holds the value of the subscriptions edge.
	Subscriptions []*SubscriptionExam `json:"subscriptions,omitempty"`
	// Setting holds the value of the setting edge.
	Setting *ExamSetting `json:"setting,omitempty"`
	// CachedExam holds the value of the cached_exam edge.
	CachedExam []*CachedExam `json:"cached_exam,omitempty"`
	// Generatedexams holds the value of the generatedexams edge.
	Generatedexams []*GeneratedExam `json:"generatedexams,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// CategoryOrErr returns the Category value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExamEdges) CategoryOrErr() (*ExamCategory, error) {
	if e.Category != nil {
		return e.Category, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: examcategory.Label}
	}
	return nil, &NotLoadedError{edge: "category"}
}

// GroupOrErr returns the Group value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExamEdges) GroupOrErr() (*ExamGroup, error) {
	if e.Group != nil {
		return e.Group, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: examgroup.Label}
	}
	return nil, &NotLoadedError{edge: "group"}
}

// SubscriptionsOrErr returns the Subscriptions value or an error if the edge
// was not loaded in eager-loading.
func (e ExamEdges) SubscriptionsOrErr() ([]*SubscriptionExam, error) {
	if e.loadedTypes[2] {
		return e.Subscriptions, nil
	}
	return nil, &NotLoadedError{edge: "subscriptions"}
}

// SettingOrErr returns the Setting value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExamEdges) SettingOrErr() (*ExamSetting, error) {
	if e.Setting != nil {
		return e.Setting, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: examsetting.Label}
	}
	return nil, &NotLoadedError{edge: "setting"}
}

// CachedExamOrErr returns the CachedExam value or an error if the edge
// was not loaded in eager-loading.
func (e ExamEdges) CachedExamOrErr() ([]*CachedExam, error) {
	if e.loadedTypes[4] {
		return e.CachedExam, nil
	}
	return nil, &NotLoadedError{edge: "cached_exam"}
}

// GeneratedexamsOrErr returns the Generatedexams value or an error if the edge
// was not loaded in eager-loading.
func (e ExamEdges) GeneratedexamsOrErr() ([]*GeneratedExam, error) {
	if e.loadedTypes[5] {
		return e.Generatedexams, nil
	}
	return nil, &NotLoadedError{edge: "generatedexams"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Exam) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case exam.FieldIsActive:
			values[i] = new(sql.NullBool)
		case exam.FieldID:
			values[i] = new(sql.NullInt64)
		case exam.FieldName, exam.FieldDescription, exam.FieldType, exam.FieldLogoURL:
			values[i] = new(sql.NullString)
		case exam.FieldCreatedAt, exam.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case exam.ForeignKeys[0]: // exam_category_exams
			values[i] = new(sql.NullInt64)
		case exam.ForeignKeys[1]: // exam_group_exams
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Exam fields.
func (e *Exam) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case exam.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case exam.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				e.Name = value.String
			}
		case exam.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				e.Description = value.String
			}
		case exam.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				e.Type = exam.Type(value.String)
			}
		case exam.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				e.IsActive = value.Bool
			}
		case exam.FieldLogoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo_url", values[i])
			} else if value.Valid {
				e.LogoURL = value.String
			}
		case exam.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		case exam.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				e.UpdatedAt = value.Time
			}
		case exam.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field exam_category_exams", value)
			} else if value.Valid {
				e.exam_category_exams = new(int)
				*e.exam_category_exams = int(value.Int64)
			}
		case exam.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field exam_group_exams", value)
			} else if value.Valid {
				e.exam_group_exams = new(int)
				*e.exam_group_exams = int(value.Int64)
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Exam.
// This includes values selected through modifiers, order, etc.
func (e *Exam) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryCategory queries the "category" edge of the Exam entity.
func (e *Exam) QueryCategory() *ExamCategoryQuery {
	return NewExamClient(e.config).QueryCategory(e)
}

// QueryGroup queries the "group" edge of the Exam entity.
func (e *Exam) QueryGroup() *ExamGroupQuery {
	return NewExamClient(e.config).QueryGroup(e)
}

// QuerySubscriptions queries the "subscriptions" edge of the Exam entity.
func (e *Exam) QuerySubscriptions() *SubscriptionExamQuery {
	return NewExamClient(e.config).QuerySubscriptions(e)
}

// QuerySetting queries the "setting" edge of the Exam entity.
func (e *Exam) QuerySetting() *ExamSettingQuery {
	return NewExamClient(e.config).QuerySetting(e)
}

// QueryCachedExam queries the "cached_exam" edge of the Exam entity.
func (e *Exam) QueryCachedExam() *CachedExamQuery {
	return NewExamClient(e.config).QueryCachedExam(e)
}

// QueryGeneratedexams queries the "generatedexams" edge of the Exam entity.
func (e *Exam) QueryGeneratedexams() *GeneratedExamQuery {
	return NewExamClient(e.config).QueryGeneratedexams(e)
}

// Update returns a builder for updating this Exam.
// Note that you need to call Exam.Unwrap() before calling this method if this Exam
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Exam) Update() *ExamUpdateOne {
	return NewExamClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Exam entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Exam) Unwrap() *Exam {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Exam is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Exam) String() string {
	var builder strings.Builder
	builder.WriteString("Exam(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("name=")
	builder.WriteString(e.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(e.Description)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", e.Type))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", e.IsActive))
	builder.WriteString(", ")
	builder.WriteString("logo_url=")
	builder.WriteString(e.LogoURL)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(e.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Exams is a parsable slice of Exam.
type Exams []*Exam
