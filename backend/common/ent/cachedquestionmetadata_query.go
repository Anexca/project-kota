// Code generated by ent, DO NOT EDIT.

package ent

import (
	"common/ent/cachedquestionmetadata"
	"common/ent/exam"
	"common/ent/predicate"
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CachedQuestionMetaDataQuery is the builder for querying CachedQuestionMetaData entities.
type CachedQuestionMetaDataQuery struct {
	config
	ctx        *QueryContext
	order      []cachedquestionmetadata.OrderOption
	inters     []Interceptor
	predicates []predicate.CachedQuestionMetaData
	withExam   *ExamQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CachedQuestionMetaDataQuery builder.
func (cqmdq *CachedQuestionMetaDataQuery) Where(ps ...predicate.CachedQuestionMetaData) *CachedQuestionMetaDataQuery {
	cqmdq.predicates = append(cqmdq.predicates, ps...)
	return cqmdq
}

// Limit the number of records to be returned by this query.
func (cqmdq *CachedQuestionMetaDataQuery) Limit(limit int) *CachedQuestionMetaDataQuery {
	cqmdq.ctx.Limit = &limit
	return cqmdq
}

// Offset to start from.
func (cqmdq *CachedQuestionMetaDataQuery) Offset(offset int) *CachedQuestionMetaDataQuery {
	cqmdq.ctx.Offset = &offset
	return cqmdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cqmdq *CachedQuestionMetaDataQuery) Unique(unique bool) *CachedQuestionMetaDataQuery {
	cqmdq.ctx.Unique = &unique
	return cqmdq
}

// Order specifies how the records should be ordered.
func (cqmdq *CachedQuestionMetaDataQuery) Order(o ...cachedquestionmetadata.OrderOption) *CachedQuestionMetaDataQuery {
	cqmdq.order = append(cqmdq.order, o...)
	return cqmdq
}

// QueryExam chains the current query on the "exam" edge.
func (cqmdq *CachedQuestionMetaDataQuery) QueryExam() *ExamQuery {
	query := (&ExamClient{config: cqmdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cqmdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cqmdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(cachedquestionmetadata.Table, cachedquestionmetadata.FieldID, selector),
			sqlgraph.To(exam.Table, exam.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, cachedquestionmetadata.ExamTable, cachedquestionmetadata.ExamPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cqmdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CachedQuestionMetaData entity from the query.
// Returns a *NotFoundError when no CachedQuestionMetaData was found.
func (cqmdq *CachedQuestionMetaDataQuery) First(ctx context.Context) (*CachedQuestionMetaData, error) {
	nodes, err := cqmdq.Limit(1).All(setContextOp(ctx, cqmdq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{cachedquestionmetadata.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cqmdq *CachedQuestionMetaDataQuery) FirstX(ctx context.Context) *CachedQuestionMetaData {
	node, err := cqmdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CachedQuestionMetaData ID from the query.
// Returns a *NotFoundError when no CachedQuestionMetaData ID was found.
func (cqmdq *CachedQuestionMetaDataQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cqmdq.Limit(1).IDs(setContextOp(ctx, cqmdq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{cachedquestionmetadata.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cqmdq *CachedQuestionMetaDataQuery) FirstIDX(ctx context.Context) int {
	id, err := cqmdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CachedQuestionMetaData entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CachedQuestionMetaData entity is found.
// Returns a *NotFoundError when no CachedQuestionMetaData entities are found.
func (cqmdq *CachedQuestionMetaDataQuery) Only(ctx context.Context) (*CachedQuestionMetaData, error) {
	nodes, err := cqmdq.Limit(2).All(setContextOp(ctx, cqmdq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{cachedquestionmetadata.Label}
	default:
		return nil, &NotSingularError{cachedquestionmetadata.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cqmdq *CachedQuestionMetaDataQuery) OnlyX(ctx context.Context) *CachedQuestionMetaData {
	node, err := cqmdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CachedQuestionMetaData ID in the query.
// Returns a *NotSingularError when more than one CachedQuestionMetaData ID is found.
// Returns a *NotFoundError when no entities are found.
func (cqmdq *CachedQuestionMetaDataQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cqmdq.Limit(2).IDs(setContextOp(ctx, cqmdq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{cachedquestionmetadata.Label}
	default:
		err = &NotSingularError{cachedquestionmetadata.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cqmdq *CachedQuestionMetaDataQuery) OnlyIDX(ctx context.Context) int {
	id, err := cqmdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CachedQuestionMetaDataSlice.
func (cqmdq *CachedQuestionMetaDataQuery) All(ctx context.Context) ([]*CachedQuestionMetaData, error) {
	ctx = setContextOp(ctx, cqmdq.ctx, ent.OpQueryAll)
	if err := cqmdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CachedQuestionMetaData, *CachedQuestionMetaDataQuery]()
	return withInterceptors[[]*CachedQuestionMetaData](ctx, cqmdq, qr, cqmdq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cqmdq *CachedQuestionMetaDataQuery) AllX(ctx context.Context) []*CachedQuestionMetaData {
	nodes, err := cqmdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CachedQuestionMetaData IDs.
func (cqmdq *CachedQuestionMetaDataQuery) IDs(ctx context.Context) (ids []int, err error) {
	if cqmdq.ctx.Unique == nil && cqmdq.path != nil {
		cqmdq.Unique(true)
	}
	ctx = setContextOp(ctx, cqmdq.ctx, ent.OpQueryIDs)
	if err = cqmdq.Select(cachedquestionmetadata.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cqmdq *CachedQuestionMetaDataQuery) IDsX(ctx context.Context) []int {
	ids, err := cqmdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cqmdq *CachedQuestionMetaDataQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cqmdq.ctx, ent.OpQueryCount)
	if err := cqmdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cqmdq, querierCount[*CachedQuestionMetaDataQuery](), cqmdq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cqmdq *CachedQuestionMetaDataQuery) CountX(ctx context.Context) int {
	count, err := cqmdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cqmdq *CachedQuestionMetaDataQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cqmdq.ctx, ent.OpQueryExist)
	switch _, err := cqmdq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cqmdq *CachedQuestionMetaDataQuery) ExistX(ctx context.Context) bool {
	exist, err := cqmdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CachedQuestionMetaDataQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cqmdq *CachedQuestionMetaDataQuery) Clone() *CachedQuestionMetaDataQuery {
	if cqmdq == nil {
		return nil
	}
	return &CachedQuestionMetaDataQuery{
		config:     cqmdq.config,
		ctx:        cqmdq.ctx.Clone(),
		order:      append([]cachedquestionmetadata.OrderOption{}, cqmdq.order...),
		inters:     append([]Interceptor{}, cqmdq.inters...),
		predicates: append([]predicate.CachedQuestionMetaData{}, cqmdq.predicates...),
		withExam:   cqmdq.withExam.Clone(),
		// clone intermediate query.
		sql:  cqmdq.sql.Clone(),
		path: cqmdq.path,
	}
}

// WithExam tells the query-builder to eager-load the nodes that are connected to
// the "exam" edge. The optional arguments are used to configure the query builder of the edge.
func (cqmdq *CachedQuestionMetaDataQuery) WithExam(opts ...func(*ExamQuery)) *CachedQuestionMetaDataQuery {
	query := (&ExamClient{config: cqmdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cqmdq.withExam = query
	return cqmdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CacheUID string `json:"cache_uid,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CachedQuestionMetaData.Query().
//		GroupBy(cachedquestionmetadata.FieldCacheUID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cqmdq *CachedQuestionMetaDataQuery) GroupBy(field string, fields ...string) *CachedQuestionMetaDataGroupBy {
	cqmdq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CachedQuestionMetaDataGroupBy{build: cqmdq}
	grbuild.flds = &cqmdq.ctx.Fields
	grbuild.label = cachedquestionmetadata.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CacheUID string `json:"cache_uid,omitempty"`
//	}
//
//	client.CachedQuestionMetaData.Query().
//		Select(cachedquestionmetadata.FieldCacheUID).
//		Scan(ctx, &v)
func (cqmdq *CachedQuestionMetaDataQuery) Select(fields ...string) *CachedQuestionMetaDataSelect {
	cqmdq.ctx.Fields = append(cqmdq.ctx.Fields, fields...)
	sbuild := &CachedQuestionMetaDataSelect{CachedQuestionMetaDataQuery: cqmdq}
	sbuild.label = cachedquestionmetadata.Label
	sbuild.flds, sbuild.scan = &cqmdq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CachedQuestionMetaDataSelect configured with the given aggregations.
func (cqmdq *CachedQuestionMetaDataQuery) Aggregate(fns ...AggregateFunc) *CachedQuestionMetaDataSelect {
	return cqmdq.Select().Aggregate(fns...)
}

func (cqmdq *CachedQuestionMetaDataQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cqmdq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cqmdq); err != nil {
				return err
			}
		}
	}
	for _, f := range cqmdq.ctx.Fields {
		if !cachedquestionmetadata.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cqmdq.path != nil {
		prev, err := cqmdq.path(ctx)
		if err != nil {
			return err
		}
		cqmdq.sql = prev
	}
	return nil
}

func (cqmdq *CachedQuestionMetaDataQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CachedQuestionMetaData, error) {
	var (
		nodes       = []*CachedQuestionMetaData{}
		_spec       = cqmdq.querySpec()
		loadedTypes = [1]bool{
			cqmdq.withExam != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CachedQuestionMetaData).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CachedQuestionMetaData{config: cqmdq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cqmdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cqmdq.withExam; query != nil {
		if err := cqmdq.loadExam(ctx, query, nodes,
			func(n *CachedQuestionMetaData) { n.Edges.Exam = []*Exam{} },
			func(n *CachedQuestionMetaData, e *Exam) { n.Edges.Exam = append(n.Edges.Exam, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cqmdq *CachedQuestionMetaDataQuery) loadExam(ctx context.Context, query *ExamQuery, nodes []*CachedQuestionMetaData, init func(*CachedQuestionMetaData), assign func(*CachedQuestionMetaData, *Exam)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*CachedQuestionMetaData)
	nids := make(map[int]map[*CachedQuestionMetaData]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(cachedquestionmetadata.ExamTable)
		s.Join(joinT).On(s.C(exam.FieldID), joinT.C(cachedquestionmetadata.ExamPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(cachedquestionmetadata.ExamPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(cachedquestionmetadata.ExamPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*CachedQuestionMetaData]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Exam](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "exam" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (cqmdq *CachedQuestionMetaDataQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cqmdq.querySpec()
	_spec.Node.Columns = cqmdq.ctx.Fields
	if len(cqmdq.ctx.Fields) > 0 {
		_spec.Unique = cqmdq.ctx.Unique != nil && *cqmdq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cqmdq.driver, _spec)
}

func (cqmdq *CachedQuestionMetaDataQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(cachedquestionmetadata.Table, cachedquestionmetadata.Columns, sqlgraph.NewFieldSpec(cachedquestionmetadata.FieldID, field.TypeInt))
	_spec.From = cqmdq.sql
	if unique := cqmdq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cqmdq.path != nil {
		_spec.Unique = true
	}
	if fields := cqmdq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cachedquestionmetadata.FieldID)
		for i := range fields {
			if fields[i] != cachedquestionmetadata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cqmdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cqmdq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cqmdq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cqmdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cqmdq *CachedQuestionMetaDataQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cqmdq.driver.Dialect())
	t1 := builder.Table(cachedquestionmetadata.Table)
	columns := cqmdq.ctx.Fields
	if len(columns) == 0 {
		columns = cachedquestionmetadata.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cqmdq.sql != nil {
		selector = cqmdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cqmdq.ctx.Unique != nil && *cqmdq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range cqmdq.predicates {
		p(selector)
	}
	for _, p := range cqmdq.order {
		p(selector)
	}
	if offset := cqmdq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cqmdq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CachedQuestionMetaDataGroupBy is the group-by builder for CachedQuestionMetaData entities.
type CachedQuestionMetaDataGroupBy struct {
	selector
	build *CachedQuestionMetaDataQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cqmdgb *CachedQuestionMetaDataGroupBy) Aggregate(fns ...AggregateFunc) *CachedQuestionMetaDataGroupBy {
	cqmdgb.fns = append(cqmdgb.fns, fns...)
	return cqmdgb
}

// Scan applies the selector query and scans the result into the given value.
func (cqmdgb *CachedQuestionMetaDataGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cqmdgb.build.ctx, ent.OpQueryGroupBy)
	if err := cqmdgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CachedQuestionMetaDataQuery, *CachedQuestionMetaDataGroupBy](ctx, cqmdgb.build, cqmdgb, cqmdgb.build.inters, v)
}

func (cqmdgb *CachedQuestionMetaDataGroupBy) sqlScan(ctx context.Context, root *CachedQuestionMetaDataQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cqmdgb.fns))
	for _, fn := range cqmdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cqmdgb.flds)+len(cqmdgb.fns))
		for _, f := range *cqmdgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cqmdgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cqmdgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CachedQuestionMetaDataSelect is the builder for selecting fields of CachedQuestionMetaData entities.
type CachedQuestionMetaDataSelect struct {
	*CachedQuestionMetaDataQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cqmds *CachedQuestionMetaDataSelect) Aggregate(fns ...AggregateFunc) *CachedQuestionMetaDataSelect {
	cqmds.fns = append(cqmds.fns, fns...)
	return cqmds
}

// Scan applies the selector query and scans the result into the given value.
func (cqmds *CachedQuestionMetaDataSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cqmds.ctx, ent.OpQuerySelect)
	if err := cqmds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CachedQuestionMetaDataQuery, *CachedQuestionMetaDataSelect](ctx, cqmds.CachedQuestionMetaDataQuery, cqmds, cqmds.inters, v)
}

func (cqmds *CachedQuestionMetaDataSelect) sqlScan(ctx context.Context, root *CachedQuestionMetaDataQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cqmds.fns))
	for _, fn := range cqmds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cqmds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cqmds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
