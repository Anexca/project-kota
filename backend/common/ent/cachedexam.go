// Code generated by ent, DO NOT EDIT.

package ent

import (
	"common/ent/cachedexam"
	"common/ent/exam"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CachedExam is the model entity for the CachedExam schema.
type CachedExam struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CacheUID holds the value of the "cache_uid" field.
	CacheUID string `json:"cache_uid,omitempty"`
	// IsUsed holds the value of the "is_used" field.
	IsUsed bool `json:"is_used,omitempty"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CachedExamQuery when eager-loading is set.
	Edges            CachedExamEdges `json:"edges"`
	exam_cached_exam *int
	selectValues     sql.SelectValues
}

// CachedExamEdges holds the relations/edges for other nodes in the graph.
type CachedExamEdges struct {
	// Exam holds the value of the exam edge.
	Exam *Exam `json:"exam,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ExamOrErr returns the Exam value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CachedExamEdges) ExamOrErr() (*Exam, error) {
	if e.Exam != nil {
		return e.Exam, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: exam.Label}
	}
	return nil, &NotLoadedError{edge: "exam"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CachedExam) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cachedexam.FieldIsUsed:
			values[i] = new(sql.NullBool)
		case cachedexam.FieldID:
			values[i] = new(sql.NullInt64)
		case cachedexam.FieldCacheUID:
			values[i] = new(sql.NullString)
		case cachedexam.FieldExpiresAt, cachedexam.FieldCreatedAt, cachedexam.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case cachedexam.ForeignKeys[0]: // exam_cached_exam
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CachedExam fields.
func (ce *CachedExam) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cachedexam.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ce.ID = int(value.Int64)
		case cachedexam.FieldCacheUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cache_uid", values[i])
			} else if value.Valid {
				ce.CacheUID = value.String
			}
		case cachedexam.FieldIsUsed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_used", values[i])
			} else if value.Valid {
				ce.IsUsed = value.Bool
			}
		case cachedexam.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				ce.ExpiresAt = value.Time
			}
		case cachedexam.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ce.CreatedAt = value.Time
			}
		case cachedexam.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ce.UpdatedAt = value.Time
			}
		case cachedexam.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field exam_cached_exam", value)
			} else if value.Valid {
				ce.exam_cached_exam = new(int)
				*ce.exam_cached_exam = int(value.Int64)
			}
		default:
			ce.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CachedExam.
// This includes values selected through modifiers, order, etc.
func (ce *CachedExam) Value(name string) (ent.Value, error) {
	return ce.selectValues.Get(name)
}

// QueryExam queries the "exam" edge of the CachedExam entity.
func (ce *CachedExam) QueryExam() *ExamQuery {
	return NewCachedExamClient(ce.config).QueryExam(ce)
}

// Update returns a builder for updating this CachedExam.
// Note that you need to call CachedExam.Unwrap() before calling this method if this CachedExam
// was returned from a transaction, and the transaction was committed or rolled back.
func (ce *CachedExam) Update() *CachedExamUpdateOne {
	return NewCachedExamClient(ce.config).UpdateOne(ce)
}

// Unwrap unwraps the CachedExam entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ce *CachedExam) Unwrap() *CachedExam {
	_tx, ok := ce.config.driver.(*txDriver)
	if !ok {
		panic("ent: CachedExam is not a transactional entity")
	}
	ce.config.driver = _tx.drv
	return ce
}

// String implements the fmt.Stringer.
func (ce *CachedExam) String() string {
	var builder strings.Builder
	builder.WriteString("CachedExam(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ce.ID))
	builder.WriteString("cache_uid=")
	builder.WriteString(ce.CacheUID)
	builder.WriteString(", ")
	builder.WriteString("is_used=")
	builder.WriteString(fmt.Sprintf("%v", ce.IsUsed))
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(ce.ExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ce.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ce.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CachedExams is a parsable slice of CachedExam.
type CachedExams []*CachedExam
