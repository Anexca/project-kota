// Code generated by ent, DO NOT EDIT.

package ent

import (
	"common/ent/examattempt"
	"common/ent/predicate"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamAttemptDelete is the builder for deleting a ExamAttempt entity.
type ExamAttemptDelete struct {
	config
	hooks    []Hook
	mutation *ExamAttemptMutation
}

// Where appends a list predicates to the ExamAttemptDelete builder.
func (ead *ExamAttemptDelete) Where(ps ...predicate.ExamAttempt) *ExamAttemptDelete {
	ead.mutation.Where(ps...)
	return ead
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ead *ExamAttemptDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ead.sqlExec, ead.mutation, ead.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ead *ExamAttemptDelete) ExecX(ctx context.Context) int {
	n, err := ead.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ead *ExamAttemptDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(examattempt.Table, sqlgraph.NewFieldSpec(examattempt.FieldID, field.TypeInt))
	if ps := ead.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ead.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ead.mutation.done = true
	return affected, err
}

// ExamAttemptDeleteOne is the builder for deleting a single ExamAttempt entity.
type ExamAttemptDeleteOne struct {
	ead *ExamAttemptDelete
}

// Where appends a list predicates to the ExamAttemptDelete builder.
func (eado *ExamAttemptDeleteOne) Where(ps ...predicate.ExamAttempt) *ExamAttemptDeleteOne {
	eado.ead.mutation.Where(ps...)
	return eado
}

// Exec executes the deletion query.
func (eado *ExamAttemptDeleteOne) Exec(ctx context.Context) error {
	n, err := eado.ead.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{examattempt.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (eado *ExamAttemptDeleteOne) ExecX(ctx context.Context) {
	if err := eado.Exec(ctx); err != nil {
		panic(err)
	}
}
