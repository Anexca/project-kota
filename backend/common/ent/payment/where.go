// Code generated by ent, DO NOT EDIT.

package payment

import (
	"common/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Payment {
	return predicate.Payment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Payment {
	return predicate.Payment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Payment {
	return predicate.Payment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Payment {
	return predicate.Payment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Payment {
	return predicate.Payment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Payment {
	return predicate.Payment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Payment {
	return predicate.Payment(sql.FieldLTE(FieldID, id))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v int) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldAmount, v))
}

// PaymentDate applies equality check predicate on the "payment_date" field. It's identical to PaymentDateEQ.
func PaymentDate(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldPaymentDate, v))
}

// PaymentMethod applies equality check predicate on the "payment_method" field. It's identical to PaymentMethodEQ.
func PaymentMethod(v string) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldPaymentMethod, v))
}

// ProviderPaymentID applies equality check predicate on the "provider_payment_id" field. It's identical to ProviderPaymentIDEQ.
func ProviderPaymentID(v string) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldProviderPaymentID, v))
}

// ReceiptID applies equality check predicate on the "receipt_id" field. It's identical to ReceiptIDEQ.
func ReceiptID(v string) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldReceiptID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldUpdatedAt, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v int) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v int) predicate.Payment {
	return predicate.Payment(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...int) predicate.Payment {
	return predicate.Payment(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...int) predicate.Payment {
	return predicate.Payment(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v int) predicate.Payment {
	return predicate.Payment(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v int) predicate.Payment {
	return predicate.Payment(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v int) predicate.Payment {
	return predicate.Payment(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v int) predicate.Payment {
	return predicate.Payment(sql.FieldLTE(FieldAmount, v))
}

// PaymentDateEQ applies the EQ predicate on the "payment_date" field.
func PaymentDateEQ(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldPaymentDate, v))
}

// PaymentDateNEQ applies the NEQ predicate on the "payment_date" field.
func PaymentDateNEQ(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldNEQ(FieldPaymentDate, v))
}

// PaymentDateIn applies the In predicate on the "payment_date" field.
func PaymentDateIn(vs ...time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldIn(FieldPaymentDate, vs...))
}

// PaymentDateNotIn applies the NotIn predicate on the "payment_date" field.
func PaymentDateNotIn(vs ...time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldNotIn(FieldPaymentDate, vs...))
}

// PaymentDateGT applies the GT predicate on the "payment_date" field.
func PaymentDateGT(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldGT(FieldPaymentDate, v))
}

// PaymentDateGTE applies the GTE predicate on the "payment_date" field.
func PaymentDateGTE(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldGTE(FieldPaymentDate, v))
}

// PaymentDateLT applies the LT predicate on the "payment_date" field.
func PaymentDateLT(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldLT(FieldPaymentDate, v))
}

// PaymentDateLTE applies the LTE predicate on the "payment_date" field.
func PaymentDateLTE(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldLTE(FieldPaymentDate, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Payment {
	return predicate.Payment(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Payment {
	return predicate.Payment(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Payment {
	return predicate.Payment(sql.FieldNotIn(FieldStatus, vs...))
}

// PaymentMethodEQ applies the EQ predicate on the "payment_method" field.
func PaymentMethodEQ(v string) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldPaymentMethod, v))
}

// PaymentMethodNEQ applies the NEQ predicate on the "payment_method" field.
func PaymentMethodNEQ(v string) predicate.Payment {
	return predicate.Payment(sql.FieldNEQ(FieldPaymentMethod, v))
}

// PaymentMethodIn applies the In predicate on the "payment_method" field.
func PaymentMethodIn(vs ...string) predicate.Payment {
	return predicate.Payment(sql.FieldIn(FieldPaymentMethod, vs...))
}

// PaymentMethodNotIn applies the NotIn predicate on the "payment_method" field.
func PaymentMethodNotIn(vs ...string) predicate.Payment {
	return predicate.Payment(sql.FieldNotIn(FieldPaymentMethod, vs...))
}

// PaymentMethodGT applies the GT predicate on the "payment_method" field.
func PaymentMethodGT(v string) predicate.Payment {
	return predicate.Payment(sql.FieldGT(FieldPaymentMethod, v))
}

// PaymentMethodGTE applies the GTE predicate on the "payment_method" field.
func PaymentMethodGTE(v string) predicate.Payment {
	return predicate.Payment(sql.FieldGTE(FieldPaymentMethod, v))
}

// PaymentMethodLT applies the LT predicate on the "payment_method" field.
func PaymentMethodLT(v string) predicate.Payment {
	return predicate.Payment(sql.FieldLT(FieldPaymentMethod, v))
}

// PaymentMethodLTE applies the LTE predicate on the "payment_method" field.
func PaymentMethodLTE(v string) predicate.Payment {
	return predicate.Payment(sql.FieldLTE(FieldPaymentMethod, v))
}

// PaymentMethodContains applies the Contains predicate on the "payment_method" field.
func PaymentMethodContains(v string) predicate.Payment {
	return predicate.Payment(sql.FieldContains(FieldPaymentMethod, v))
}

// PaymentMethodHasPrefix applies the HasPrefix predicate on the "payment_method" field.
func PaymentMethodHasPrefix(v string) predicate.Payment {
	return predicate.Payment(sql.FieldHasPrefix(FieldPaymentMethod, v))
}

// PaymentMethodHasSuffix applies the HasSuffix predicate on the "payment_method" field.
func PaymentMethodHasSuffix(v string) predicate.Payment {
	return predicate.Payment(sql.FieldHasSuffix(FieldPaymentMethod, v))
}

// PaymentMethodEqualFold applies the EqualFold predicate on the "payment_method" field.
func PaymentMethodEqualFold(v string) predicate.Payment {
	return predicate.Payment(sql.FieldEqualFold(FieldPaymentMethod, v))
}

// PaymentMethodContainsFold applies the ContainsFold predicate on the "payment_method" field.
func PaymentMethodContainsFold(v string) predicate.Payment {
	return predicate.Payment(sql.FieldContainsFold(FieldPaymentMethod, v))
}

// ProviderPaymentIDEQ applies the EQ predicate on the "provider_payment_id" field.
func ProviderPaymentIDEQ(v string) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldProviderPaymentID, v))
}

// ProviderPaymentIDNEQ applies the NEQ predicate on the "provider_payment_id" field.
func ProviderPaymentIDNEQ(v string) predicate.Payment {
	return predicate.Payment(sql.FieldNEQ(FieldProviderPaymentID, v))
}

// ProviderPaymentIDIn applies the In predicate on the "provider_payment_id" field.
func ProviderPaymentIDIn(vs ...string) predicate.Payment {
	return predicate.Payment(sql.FieldIn(FieldProviderPaymentID, vs...))
}

// ProviderPaymentIDNotIn applies the NotIn predicate on the "provider_payment_id" field.
func ProviderPaymentIDNotIn(vs ...string) predicate.Payment {
	return predicate.Payment(sql.FieldNotIn(FieldProviderPaymentID, vs...))
}

// ProviderPaymentIDGT applies the GT predicate on the "provider_payment_id" field.
func ProviderPaymentIDGT(v string) predicate.Payment {
	return predicate.Payment(sql.FieldGT(FieldProviderPaymentID, v))
}

// ProviderPaymentIDGTE applies the GTE predicate on the "provider_payment_id" field.
func ProviderPaymentIDGTE(v string) predicate.Payment {
	return predicate.Payment(sql.FieldGTE(FieldProviderPaymentID, v))
}

// ProviderPaymentIDLT applies the LT predicate on the "provider_payment_id" field.
func ProviderPaymentIDLT(v string) predicate.Payment {
	return predicate.Payment(sql.FieldLT(FieldProviderPaymentID, v))
}

// ProviderPaymentIDLTE applies the LTE predicate on the "provider_payment_id" field.
func ProviderPaymentIDLTE(v string) predicate.Payment {
	return predicate.Payment(sql.FieldLTE(FieldProviderPaymentID, v))
}

// ProviderPaymentIDContains applies the Contains predicate on the "provider_payment_id" field.
func ProviderPaymentIDContains(v string) predicate.Payment {
	return predicate.Payment(sql.FieldContains(FieldProviderPaymentID, v))
}

// ProviderPaymentIDHasPrefix applies the HasPrefix predicate on the "provider_payment_id" field.
func ProviderPaymentIDHasPrefix(v string) predicate.Payment {
	return predicate.Payment(sql.FieldHasPrefix(FieldProviderPaymentID, v))
}

// ProviderPaymentIDHasSuffix applies the HasSuffix predicate on the "provider_payment_id" field.
func ProviderPaymentIDHasSuffix(v string) predicate.Payment {
	return predicate.Payment(sql.FieldHasSuffix(FieldProviderPaymentID, v))
}

// ProviderPaymentIDEqualFold applies the EqualFold predicate on the "provider_payment_id" field.
func ProviderPaymentIDEqualFold(v string) predicate.Payment {
	return predicate.Payment(sql.FieldEqualFold(FieldProviderPaymentID, v))
}

// ProviderPaymentIDContainsFold applies the ContainsFold predicate on the "provider_payment_id" field.
func ProviderPaymentIDContainsFold(v string) predicate.Payment {
	return predicate.Payment(sql.FieldContainsFold(FieldProviderPaymentID, v))
}

// ReceiptIDEQ applies the EQ predicate on the "receipt_id" field.
func ReceiptIDEQ(v string) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldReceiptID, v))
}

// ReceiptIDNEQ applies the NEQ predicate on the "receipt_id" field.
func ReceiptIDNEQ(v string) predicate.Payment {
	return predicate.Payment(sql.FieldNEQ(FieldReceiptID, v))
}

// ReceiptIDIn applies the In predicate on the "receipt_id" field.
func ReceiptIDIn(vs ...string) predicate.Payment {
	return predicate.Payment(sql.FieldIn(FieldReceiptID, vs...))
}

// ReceiptIDNotIn applies the NotIn predicate on the "receipt_id" field.
func ReceiptIDNotIn(vs ...string) predicate.Payment {
	return predicate.Payment(sql.FieldNotIn(FieldReceiptID, vs...))
}

// ReceiptIDGT applies the GT predicate on the "receipt_id" field.
func ReceiptIDGT(v string) predicate.Payment {
	return predicate.Payment(sql.FieldGT(FieldReceiptID, v))
}

// ReceiptIDGTE applies the GTE predicate on the "receipt_id" field.
func ReceiptIDGTE(v string) predicate.Payment {
	return predicate.Payment(sql.FieldGTE(FieldReceiptID, v))
}

// ReceiptIDLT applies the LT predicate on the "receipt_id" field.
func ReceiptIDLT(v string) predicate.Payment {
	return predicate.Payment(sql.FieldLT(FieldReceiptID, v))
}

// ReceiptIDLTE applies the LTE predicate on the "receipt_id" field.
func ReceiptIDLTE(v string) predicate.Payment {
	return predicate.Payment(sql.FieldLTE(FieldReceiptID, v))
}

// ReceiptIDContains applies the Contains predicate on the "receipt_id" field.
func ReceiptIDContains(v string) predicate.Payment {
	return predicate.Payment(sql.FieldContains(FieldReceiptID, v))
}

// ReceiptIDHasPrefix applies the HasPrefix predicate on the "receipt_id" field.
func ReceiptIDHasPrefix(v string) predicate.Payment {
	return predicate.Payment(sql.FieldHasPrefix(FieldReceiptID, v))
}

// ReceiptIDHasSuffix applies the HasSuffix predicate on the "receipt_id" field.
func ReceiptIDHasSuffix(v string) predicate.Payment {
	return predicate.Payment(sql.FieldHasSuffix(FieldReceiptID, v))
}

// ReceiptIDEqualFold applies the EqualFold predicate on the "receipt_id" field.
func ReceiptIDEqualFold(v string) predicate.Payment {
	return predicate.Payment(sql.FieldEqualFold(FieldReceiptID, v))
}

// ReceiptIDContainsFold applies the ContainsFold predicate on the "receipt_id" field.
func ReceiptIDContainsFold(v string) predicate.Payment {
	return predicate.Payment(sql.FieldContainsFold(FieldReceiptID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Payment {
	return predicate.Payment(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Payment {
	return predicate.Payment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Payment {
	return predicate.Payment(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubscription applies the HasEdge predicate on the "subscription" edge.
func HasSubscription() predicate.Payment {
	return predicate.Payment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SubscriptionTable, SubscriptionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscriptionWith applies the HasEdge predicate on the "subscription" edge with a given conditions (other predicates).
func HasSubscriptionWith(preds ...predicate.UserSubscription) predicate.Payment {
	return predicate.Payment(func(s *sql.Selector) {
		step := newSubscriptionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Payment) predicate.Payment {
	return predicate.Payment(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Payment) predicate.Payment {
	return predicate.Payment(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Payment) predicate.Payment {
	return predicate.Payment(sql.NotPredicates(p))
}
