// Code generated by ent, DO NOT EDIT.

package ent

import (
	"common/ent/exam"
	"common/ent/subscription"
	"common/ent/subscriptionexam"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubscriptionExamCreate is the builder for creating a SubscriptionExam entity.
type SubscriptionExamCreate struct {
	config
	mutation *SubscriptionExamMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sec *SubscriptionExamCreate) SetCreatedAt(t time.Time) *SubscriptionExamCreate {
	sec.mutation.SetCreatedAt(t)
	return sec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sec *SubscriptionExamCreate) SetNillableCreatedAt(t *time.Time) *SubscriptionExamCreate {
	if t != nil {
		sec.SetCreatedAt(*t)
	}
	return sec
}

// SetUpdatedAt sets the "updated_at" field.
func (sec *SubscriptionExamCreate) SetUpdatedAt(t time.Time) *SubscriptionExamCreate {
	sec.mutation.SetUpdatedAt(t)
	return sec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sec *SubscriptionExamCreate) SetNillableUpdatedAt(t *time.Time) *SubscriptionExamCreate {
	if t != nil {
		sec.SetUpdatedAt(*t)
	}
	return sec
}

// SetSubscriptionID sets the "subscription" edge to the Subscription entity by ID.
func (sec *SubscriptionExamCreate) SetSubscriptionID(id int) *SubscriptionExamCreate {
	sec.mutation.SetSubscriptionID(id)
	return sec
}

// SetNillableSubscriptionID sets the "subscription" edge to the Subscription entity by ID if the given value is not nil.
func (sec *SubscriptionExamCreate) SetNillableSubscriptionID(id *int) *SubscriptionExamCreate {
	if id != nil {
		sec = sec.SetSubscriptionID(*id)
	}
	return sec
}

// SetSubscription sets the "subscription" edge to the Subscription entity.
func (sec *SubscriptionExamCreate) SetSubscription(s *Subscription) *SubscriptionExamCreate {
	return sec.SetSubscriptionID(s.ID)
}

// SetExamID sets the "exam" edge to the Exam entity by ID.
func (sec *SubscriptionExamCreate) SetExamID(id int) *SubscriptionExamCreate {
	sec.mutation.SetExamID(id)
	return sec
}

// SetNillableExamID sets the "exam" edge to the Exam entity by ID if the given value is not nil.
func (sec *SubscriptionExamCreate) SetNillableExamID(id *int) *SubscriptionExamCreate {
	if id != nil {
		sec = sec.SetExamID(*id)
	}
	return sec
}

// SetExam sets the "exam" edge to the Exam entity.
func (sec *SubscriptionExamCreate) SetExam(e *Exam) *SubscriptionExamCreate {
	return sec.SetExamID(e.ID)
}

// Mutation returns the SubscriptionExamMutation object of the builder.
func (sec *SubscriptionExamCreate) Mutation() *SubscriptionExamMutation {
	return sec.mutation
}

// Save creates the SubscriptionExam in the database.
func (sec *SubscriptionExamCreate) Save(ctx context.Context) (*SubscriptionExam, error) {
	sec.defaults()
	return withHooks(ctx, sec.sqlSave, sec.mutation, sec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sec *SubscriptionExamCreate) SaveX(ctx context.Context) *SubscriptionExam {
	v, err := sec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sec *SubscriptionExamCreate) Exec(ctx context.Context) error {
	_, err := sec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sec *SubscriptionExamCreate) ExecX(ctx context.Context) {
	if err := sec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sec *SubscriptionExamCreate) defaults() {
	if _, ok := sec.mutation.CreatedAt(); !ok {
		v := subscriptionexam.DefaultCreatedAt()
		sec.mutation.SetCreatedAt(v)
	}
	if _, ok := sec.mutation.UpdatedAt(); !ok {
		v := subscriptionexam.DefaultUpdatedAt()
		sec.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sec *SubscriptionExamCreate) check() error {
	if _, ok := sec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SubscriptionExam.created_at"`)}
	}
	if _, ok := sec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SubscriptionExam.updated_at"`)}
	}
	return nil
}

func (sec *SubscriptionExamCreate) sqlSave(ctx context.Context) (*SubscriptionExam, error) {
	if err := sec.check(); err != nil {
		return nil, err
	}
	_node, _spec := sec.createSpec()
	if err := sqlgraph.CreateNode(ctx, sec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sec.mutation.id = &_node.ID
	sec.mutation.done = true
	return _node, nil
}

func (sec *SubscriptionExamCreate) createSpec() (*SubscriptionExam, *sqlgraph.CreateSpec) {
	var (
		_node = &SubscriptionExam{config: sec.config}
		_spec = sqlgraph.NewCreateSpec(subscriptionexam.Table, sqlgraph.NewFieldSpec(subscriptionexam.FieldID, field.TypeInt))
	)
	if value, ok := sec.mutation.CreatedAt(); ok {
		_spec.SetField(subscriptionexam.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sec.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriptionexam.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := sec.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriptionexam.SubscriptionTable,
			Columns: []string{subscriptionexam.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.subscription_exams = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sec.mutation.ExamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriptionexam.ExamTable,
			Columns: []string{subscriptionexam.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.exam_subscriptions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SubscriptionExamCreateBulk is the builder for creating many SubscriptionExam entities in bulk.
type SubscriptionExamCreateBulk struct {
	config
	err      error
	builders []*SubscriptionExamCreate
}

// Save creates the SubscriptionExam entities in the database.
func (secb *SubscriptionExamCreateBulk) Save(ctx context.Context) ([]*SubscriptionExam, error) {
	if secb.err != nil {
		return nil, secb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(secb.builders))
	nodes := make([]*SubscriptionExam, len(secb.builders))
	mutators := make([]Mutator, len(secb.builders))
	for i := range secb.builders {
		func(i int, root context.Context) {
			builder := secb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubscriptionExamMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, secb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, secb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, secb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (secb *SubscriptionExamCreateBulk) SaveX(ctx context.Context) []*SubscriptionExam {
	v, err := secb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (secb *SubscriptionExamCreateBulk) Exec(ctx context.Context) error {
	_, err := secb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (secb *SubscriptionExamCreateBulk) ExecX(ctx context.Context) {
	if err := secb.Exec(ctx); err != nil {
		panic(err)
	}
}
