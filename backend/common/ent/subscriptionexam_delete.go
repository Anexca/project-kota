// Code generated by ent, DO NOT EDIT.

package ent

import (
	"common/ent/predicate"
	"common/ent/subscriptionexam"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubscriptionExamDelete is the builder for deleting a SubscriptionExam entity.
type SubscriptionExamDelete struct {
	config
	hooks    []Hook
	mutation *SubscriptionExamMutation
}

// Where appends a list predicates to the SubscriptionExamDelete builder.
func (sed *SubscriptionExamDelete) Where(ps ...predicate.SubscriptionExam) *SubscriptionExamDelete {
	sed.mutation.Where(ps...)
	return sed
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sed *SubscriptionExamDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sed.sqlExec, sed.mutation, sed.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sed *SubscriptionExamDelete) ExecX(ctx context.Context) int {
	n, err := sed.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sed *SubscriptionExamDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(subscriptionexam.Table, sqlgraph.NewFieldSpec(subscriptionexam.FieldID, field.TypeInt))
	if ps := sed.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sed.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sed.mutation.done = true
	return affected, err
}

// SubscriptionExamDeleteOne is the builder for deleting a single SubscriptionExam entity.
type SubscriptionExamDeleteOne struct {
	sed *SubscriptionExamDelete
}

// Where appends a list predicates to the SubscriptionExamDelete builder.
func (sedo *SubscriptionExamDeleteOne) Where(ps ...predicate.SubscriptionExam) *SubscriptionExamDeleteOne {
	sedo.sed.mutation.Where(ps...)
	return sedo
}

// Exec executes the deletion query.
func (sedo *SubscriptionExamDeleteOne) Exec(ctx context.Context) error {
	n, err := sedo.sed.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{subscriptionexam.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sedo *SubscriptionExamDeleteOne) ExecX(ctx context.Context) {
	if err := sedo.Exec(ctx); err != nil {
		panic(err)
	}
}
