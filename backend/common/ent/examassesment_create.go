// Code generated by ent, DO NOT EDIT.

package ent

import (
	"common/ent/examassesment"
	"common/ent/examattempt"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamAssesmentCreate is the builder for creating a ExamAssesment entity.
type ExamAssesmentCreate struct {
	config
	mutation *ExamAssesmentMutation
	hooks    []Hook
}

// SetCompletedSeconds sets the "completed_seconds" field.
func (eac *ExamAssesmentCreate) SetCompletedSeconds(i int) *ExamAssesmentCreate {
	eac.mutation.SetCompletedSeconds(i)
	return eac
}

// SetRawAssesmentData sets the "raw_assesment_data" field.
func (eac *ExamAssesmentCreate) SetRawAssesmentData(m map[string]interface{}) *ExamAssesmentCreate {
	eac.mutation.SetRawAssesmentData(m)
	return eac
}

// SetIsReady sets the "is_ready" field.
func (eac *ExamAssesmentCreate) SetIsReady(b bool) *ExamAssesmentCreate {
	eac.mutation.SetIsReady(b)
	return eac
}

// SetNillableIsReady sets the "is_ready" field if the given value is not nil.
func (eac *ExamAssesmentCreate) SetNillableIsReady(b *bool) *ExamAssesmentCreate {
	if b != nil {
		eac.SetIsReady(*b)
	}
	return eac
}

// SetCreatedAt sets the "created_at" field.
func (eac *ExamAssesmentCreate) SetCreatedAt(t time.Time) *ExamAssesmentCreate {
	eac.mutation.SetCreatedAt(t)
	return eac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eac *ExamAssesmentCreate) SetNillableCreatedAt(t *time.Time) *ExamAssesmentCreate {
	if t != nil {
		eac.SetCreatedAt(*t)
	}
	return eac
}

// SetUpdatedAt sets the "updated_at" field.
func (eac *ExamAssesmentCreate) SetUpdatedAt(t time.Time) *ExamAssesmentCreate {
	eac.mutation.SetUpdatedAt(t)
	return eac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (eac *ExamAssesmentCreate) SetNillableUpdatedAt(t *time.Time) *ExamAssesmentCreate {
	if t != nil {
		eac.SetUpdatedAt(*t)
	}
	return eac
}

// SetAttemptID sets the "attempt" edge to the ExamAttempt entity by ID.
func (eac *ExamAssesmentCreate) SetAttemptID(id int) *ExamAssesmentCreate {
	eac.mutation.SetAttemptID(id)
	return eac
}

// SetNillableAttemptID sets the "attempt" edge to the ExamAttempt entity by ID if the given value is not nil.
func (eac *ExamAssesmentCreate) SetNillableAttemptID(id *int) *ExamAssesmentCreate {
	if id != nil {
		eac = eac.SetAttemptID(*id)
	}
	return eac
}

// SetAttempt sets the "attempt" edge to the ExamAttempt entity.
func (eac *ExamAssesmentCreate) SetAttempt(e *ExamAttempt) *ExamAssesmentCreate {
	return eac.SetAttemptID(e.ID)
}

// Mutation returns the ExamAssesmentMutation object of the builder.
func (eac *ExamAssesmentCreate) Mutation() *ExamAssesmentMutation {
	return eac.mutation
}

// Save creates the ExamAssesment in the database.
func (eac *ExamAssesmentCreate) Save(ctx context.Context) (*ExamAssesment, error) {
	eac.defaults()
	return withHooks(ctx, eac.sqlSave, eac.mutation, eac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (eac *ExamAssesmentCreate) SaveX(ctx context.Context) *ExamAssesment {
	v, err := eac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eac *ExamAssesmentCreate) Exec(ctx context.Context) error {
	_, err := eac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eac *ExamAssesmentCreate) ExecX(ctx context.Context) {
	if err := eac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eac *ExamAssesmentCreate) defaults() {
	if _, ok := eac.mutation.IsReady(); !ok {
		v := examassesment.DefaultIsReady
		eac.mutation.SetIsReady(v)
	}
	if _, ok := eac.mutation.CreatedAt(); !ok {
		v := examassesment.DefaultCreatedAt()
		eac.mutation.SetCreatedAt(v)
	}
	if _, ok := eac.mutation.UpdatedAt(); !ok {
		v := examassesment.DefaultUpdatedAt()
		eac.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eac *ExamAssesmentCreate) check() error {
	if _, ok := eac.mutation.CompletedSeconds(); !ok {
		return &ValidationError{Name: "completed_seconds", err: errors.New(`ent: missing required field "ExamAssesment.completed_seconds"`)}
	}
	if _, ok := eac.mutation.IsReady(); !ok {
		return &ValidationError{Name: "is_ready", err: errors.New(`ent: missing required field "ExamAssesment.is_ready"`)}
	}
	if _, ok := eac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ExamAssesment.created_at"`)}
	}
	if _, ok := eac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ExamAssesment.updated_at"`)}
	}
	return nil
}

func (eac *ExamAssesmentCreate) sqlSave(ctx context.Context) (*ExamAssesment, error) {
	if err := eac.check(); err != nil {
		return nil, err
	}
	_node, _spec := eac.createSpec()
	if err := sqlgraph.CreateNode(ctx, eac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	eac.mutation.id = &_node.ID
	eac.mutation.done = true
	return _node, nil
}

func (eac *ExamAssesmentCreate) createSpec() (*ExamAssesment, *sqlgraph.CreateSpec) {
	var (
		_node = &ExamAssesment{config: eac.config}
		_spec = sqlgraph.NewCreateSpec(examassesment.Table, sqlgraph.NewFieldSpec(examassesment.FieldID, field.TypeInt))
	)
	if value, ok := eac.mutation.CompletedSeconds(); ok {
		_spec.SetField(examassesment.FieldCompletedSeconds, field.TypeInt, value)
		_node.CompletedSeconds = value
	}
	if value, ok := eac.mutation.RawAssesmentData(); ok {
		_spec.SetField(examassesment.FieldRawAssesmentData, field.TypeJSON, value)
		_node.RawAssesmentData = value
	}
	if value, ok := eac.mutation.IsReady(); ok {
		_spec.SetField(examassesment.FieldIsReady, field.TypeBool, value)
		_node.IsReady = value
	}
	if value, ok := eac.mutation.CreatedAt(); ok {
		_spec.SetField(examassesment.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := eac.mutation.UpdatedAt(); ok {
		_spec.SetField(examassesment.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := eac.mutation.AttemptIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   examassesment.AttemptTable,
			Columns: []string{examassesment.AttemptColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(examattempt.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.exam_attempt_assesment = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ExamAssesmentCreateBulk is the builder for creating many ExamAssesment entities in bulk.
type ExamAssesmentCreateBulk struct {
	config
	err      error
	builders []*ExamAssesmentCreate
}

// Save creates the ExamAssesment entities in the database.
func (eacb *ExamAssesmentCreateBulk) Save(ctx context.Context) ([]*ExamAssesment, error) {
	if eacb.err != nil {
		return nil, eacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(eacb.builders))
	nodes := make([]*ExamAssesment, len(eacb.builders))
	mutators := make([]Mutator, len(eacb.builders))
	for i := range eacb.builders {
		func(i int, root context.Context) {
			builder := eacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExamAssesmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eacb *ExamAssesmentCreateBulk) SaveX(ctx context.Context) []*ExamAssesment {
	v, err := eacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eacb *ExamAssesmentCreateBulk) Exec(ctx context.Context) error {
	_, err := eacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eacb *ExamAssesmentCreateBulk) ExecX(ctx context.Context) {
	if err := eacb.Exec(ctx); err != nil {
		panic(err)
	}
}
