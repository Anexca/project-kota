// Code generated by ent, DO NOT EDIT.

package ent

import (
	"common/ent/cachedexam"
	"common/ent/exam"
	"common/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CachedExamUpdate is the builder for updating CachedExam entities.
type CachedExamUpdate struct {
	config
	hooks    []Hook
	mutation *CachedExamMutation
}

// Where appends a list predicates to the CachedExamUpdate builder.
func (ceu *CachedExamUpdate) Where(ps ...predicate.CachedExam) *CachedExamUpdate {
	ceu.mutation.Where(ps...)
	return ceu
}

// SetCacheUID sets the "cache_uid" field.
func (ceu *CachedExamUpdate) SetCacheUID(s string) *CachedExamUpdate {
	ceu.mutation.SetCacheUID(s)
	return ceu
}

// SetNillableCacheUID sets the "cache_uid" field if the given value is not nil.
func (ceu *CachedExamUpdate) SetNillableCacheUID(s *string) *CachedExamUpdate {
	if s != nil {
		ceu.SetCacheUID(*s)
	}
	return ceu
}

// SetIsUsed sets the "is_used" field.
func (ceu *CachedExamUpdate) SetIsUsed(b bool) *CachedExamUpdate {
	ceu.mutation.SetIsUsed(b)
	return ceu
}

// SetNillableIsUsed sets the "is_used" field if the given value is not nil.
func (ceu *CachedExamUpdate) SetNillableIsUsed(b *bool) *CachedExamUpdate {
	if b != nil {
		ceu.SetIsUsed(*b)
	}
	return ceu
}

// SetExpiresAt sets the "expires_at" field.
func (ceu *CachedExamUpdate) SetExpiresAt(t time.Time) *CachedExamUpdate {
	ceu.mutation.SetExpiresAt(t)
	return ceu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (ceu *CachedExamUpdate) SetNillableExpiresAt(t *time.Time) *CachedExamUpdate {
	if t != nil {
		ceu.SetExpiresAt(*t)
	}
	return ceu
}

// SetUpdatedAt sets the "updated_at" field.
func (ceu *CachedExamUpdate) SetUpdatedAt(t time.Time) *CachedExamUpdate {
	ceu.mutation.SetUpdatedAt(t)
	return ceu
}

// SetExamID sets the "exam" edge to the Exam entity by ID.
func (ceu *CachedExamUpdate) SetExamID(id int) *CachedExamUpdate {
	ceu.mutation.SetExamID(id)
	return ceu
}

// SetExam sets the "exam" edge to the Exam entity.
func (ceu *CachedExamUpdate) SetExam(e *Exam) *CachedExamUpdate {
	return ceu.SetExamID(e.ID)
}

// Mutation returns the CachedExamMutation object of the builder.
func (ceu *CachedExamUpdate) Mutation() *CachedExamMutation {
	return ceu.mutation
}

// ClearExam clears the "exam" edge to the Exam entity.
func (ceu *CachedExamUpdate) ClearExam() *CachedExamUpdate {
	ceu.mutation.ClearExam()
	return ceu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ceu *CachedExamUpdate) Save(ctx context.Context) (int, error) {
	ceu.defaults()
	return withHooks(ctx, ceu.sqlSave, ceu.mutation, ceu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ceu *CachedExamUpdate) SaveX(ctx context.Context) int {
	affected, err := ceu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ceu *CachedExamUpdate) Exec(ctx context.Context) error {
	_, err := ceu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ceu *CachedExamUpdate) ExecX(ctx context.Context) {
	if err := ceu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ceu *CachedExamUpdate) defaults() {
	if _, ok := ceu.mutation.UpdatedAt(); !ok {
		v := cachedexam.UpdateDefaultUpdatedAt()
		ceu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ceu *CachedExamUpdate) check() error {
	if ceu.mutation.ExamCleared() && len(ceu.mutation.ExamIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CachedExam.exam"`)
	}
	return nil
}

func (ceu *CachedExamUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ceu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(cachedexam.Table, cachedexam.Columns, sqlgraph.NewFieldSpec(cachedexam.FieldID, field.TypeInt))
	if ps := ceu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ceu.mutation.CacheUID(); ok {
		_spec.SetField(cachedexam.FieldCacheUID, field.TypeString, value)
	}
	if value, ok := ceu.mutation.IsUsed(); ok {
		_spec.SetField(cachedexam.FieldIsUsed, field.TypeBool, value)
	}
	if value, ok := ceu.mutation.ExpiresAt(); ok {
		_spec.SetField(cachedexam.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := ceu.mutation.UpdatedAt(); ok {
		_spec.SetField(cachedexam.FieldUpdatedAt, field.TypeTime, value)
	}
	if ceu.mutation.ExamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cachedexam.ExamTable,
			Columns: []string{cachedexam.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceu.mutation.ExamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cachedexam.ExamTable,
			Columns: []string{cachedexam.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ceu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cachedexam.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ceu.mutation.done = true
	return n, nil
}

// CachedExamUpdateOne is the builder for updating a single CachedExam entity.
type CachedExamUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CachedExamMutation
}

// SetCacheUID sets the "cache_uid" field.
func (ceuo *CachedExamUpdateOne) SetCacheUID(s string) *CachedExamUpdateOne {
	ceuo.mutation.SetCacheUID(s)
	return ceuo
}

// SetNillableCacheUID sets the "cache_uid" field if the given value is not nil.
func (ceuo *CachedExamUpdateOne) SetNillableCacheUID(s *string) *CachedExamUpdateOne {
	if s != nil {
		ceuo.SetCacheUID(*s)
	}
	return ceuo
}

// SetIsUsed sets the "is_used" field.
func (ceuo *CachedExamUpdateOne) SetIsUsed(b bool) *CachedExamUpdateOne {
	ceuo.mutation.SetIsUsed(b)
	return ceuo
}

// SetNillableIsUsed sets the "is_used" field if the given value is not nil.
func (ceuo *CachedExamUpdateOne) SetNillableIsUsed(b *bool) *CachedExamUpdateOne {
	if b != nil {
		ceuo.SetIsUsed(*b)
	}
	return ceuo
}

// SetExpiresAt sets the "expires_at" field.
func (ceuo *CachedExamUpdateOne) SetExpiresAt(t time.Time) *CachedExamUpdateOne {
	ceuo.mutation.SetExpiresAt(t)
	return ceuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (ceuo *CachedExamUpdateOne) SetNillableExpiresAt(t *time.Time) *CachedExamUpdateOne {
	if t != nil {
		ceuo.SetExpiresAt(*t)
	}
	return ceuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ceuo *CachedExamUpdateOne) SetUpdatedAt(t time.Time) *CachedExamUpdateOne {
	ceuo.mutation.SetUpdatedAt(t)
	return ceuo
}

// SetExamID sets the "exam" edge to the Exam entity by ID.
func (ceuo *CachedExamUpdateOne) SetExamID(id int) *CachedExamUpdateOne {
	ceuo.mutation.SetExamID(id)
	return ceuo
}

// SetExam sets the "exam" edge to the Exam entity.
func (ceuo *CachedExamUpdateOne) SetExam(e *Exam) *CachedExamUpdateOne {
	return ceuo.SetExamID(e.ID)
}

// Mutation returns the CachedExamMutation object of the builder.
func (ceuo *CachedExamUpdateOne) Mutation() *CachedExamMutation {
	return ceuo.mutation
}

// ClearExam clears the "exam" edge to the Exam entity.
func (ceuo *CachedExamUpdateOne) ClearExam() *CachedExamUpdateOne {
	ceuo.mutation.ClearExam()
	return ceuo
}

// Where appends a list predicates to the CachedExamUpdate builder.
func (ceuo *CachedExamUpdateOne) Where(ps ...predicate.CachedExam) *CachedExamUpdateOne {
	ceuo.mutation.Where(ps...)
	return ceuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ceuo *CachedExamUpdateOne) Select(field string, fields ...string) *CachedExamUpdateOne {
	ceuo.fields = append([]string{field}, fields...)
	return ceuo
}

// Save executes the query and returns the updated CachedExam entity.
func (ceuo *CachedExamUpdateOne) Save(ctx context.Context) (*CachedExam, error) {
	ceuo.defaults()
	return withHooks(ctx, ceuo.sqlSave, ceuo.mutation, ceuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ceuo *CachedExamUpdateOne) SaveX(ctx context.Context) *CachedExam {
	node, err := ceuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ceuo *CachedExamUpdateOne) Exec(ctx context.Context) error {
	_, err := ceuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ceuo *CachedExamUpdateOne) ExecX(ctx context.Context) {
	if err := ceuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ceuo *CachedExamUpdateOne) defaults() {
	if _, ok := ceuo.mutation.UpdatedAt(); !ok {
		v := cachedexam.UpdateDefaultUpdatedAt()
		ceuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ceuo *CachedExamUpdateOne) check() error {
	if ceuo.mutation.ExamCleared() && len(ceuo.mutation.ExamIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CachedExam.exam"`)
	}
	return nil
}

func (ceuo *CachedExamUpdateOne) sqlSave(ctx context.Context) (_node *CachedExam, err error) {
	if err := ceuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(cachedexam.Table, cachedexam.Columns, sqlgraph.NewFieldSpec(cachedexam.FieldID, field.TypeInt))
	id, ok := ceuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CachedExam.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ceuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cachedexam.FieldID)
		for _, f := range fields {
			if !cachedexam.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cachedexam.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ceuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ceuo.mutation.CacheUID(); ok {
		_spec.SetField(cachedexam.FieldCacheUID, field.TypeString, value)
	}
	if value, ok := ceuo.mutation.IsUsed(); ok {
		_spec.SetField(cachedexam.FieldIsUsed, field.TypeBool, value)
	}
	if value, ok := ceuo.mutation.ExpiresAt(); ok {
		_spec.SetField(cachedexam.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := ceuo.mutation.UpdatedAt(); ok {
		_spec.SetField(cachedexam.FieldUpdatedAt, field.TypeTime, value)
	}
	if ceuo.mutation.ExamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cachedexam.ExamTable,
			Columns: []string{cachedexam.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceuo.mutation.ExamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cachedexam.ExamTable,
			Columns: []string{cachedexam.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CachedExam{config: ceuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ceuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cachedexam.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ceuo.mutation.done = true
	return _node, nil
}
