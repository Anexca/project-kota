// Code generated by ent, DO NOT EDIT.

package ent

import (
	"common/ent/cachedquestionmetadata"
	"common/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CachedQuestionMetadataUpdate is the builder for updating CachedQuestionMetadata entities.
type CachedQuestionMetadataUpdate struct {
	config
	hooks    []Hook
	mutation *CachedQuestionMetadataMutation
}

// Where appends a list predicates to the CachedQuestionMetadataUpdate builder.
func (cqmu *CachedQuestionMetadataUpdate) Where(ps ...predicate.CachedQuestionMetadata) *CachedQuestionMetadataUpdate {
	cqmu.mutation.Where(ps...)
	return cqmu
}

// SetKey sets the "key" field.
func (cqmu *CachedQuestionMetadataUpdate) SetKey(s string) *CachedQuestionMetadataUpdate {
	cqmu.mutation.SetKey(s)
	return cqmu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (cqmu *CachedQuestionMetadataUpdate) SetNillableKey(s *string) *CachedQuestionMetadataUpdate {
	if s != nil {
		cqmu.SetKey(*s)
	}
	return cqmu
}

// SetType sets the "type" field.
func (cqmu *CachedQuestionMetadataUpdate) SetType(s string) *CachedQuestionMetadataUpdate {
	cqmu.mutation.SetType(s)
	return cqmu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cqmu *CachedQuestionMetadataUpdate) SetNillableType(s *string) *CachedQuestionMetadataUpdate {
	if s != nil {
		cqmu.SetType(*s)
	}
	return cqmu
}

// SetSubject sets the "subject" field.
func (cqmu *CachedQuestionMetadataUpdate) SetSubject(s string) *CachedQuestionMetadataUpdate {
	cqmu.mutation.SetSubject(s)
	return cqmu
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (cqmu *CachedQuestionMetadataUpdate) SetNillableSubject(s *string) *CachedQuestionMetadataUpdate {
	if s != nil {
		cqmu.SetSubject(*s)
	}
	return cqmu
}

// SetExam sets the "exam" field.
func (cqmu *CachedQuestionMetadataUpdate) SetExam(s string) *CachedQuestionMetadataUpdate {
	cqmu.mutation.SetExam(s)
	return cqmu
}

// SetNillableExam sets the "exam" field if the given value is not nil.
func (cqmu *CachedQuestionMetadataUpdate) SetNillableExam(s *string) *CachedQuestionMetadataUpdate {
	if s != nil {
		cqmu.SetExam(*s)
	}
	return cqmu
}

// SetIsProcessed sets the "is_processed" field.
func (cqmu *CachedQuestionMetadataUpdate) SetIsProcessed(b bool) *CachedQuestionMetadataUpdate {
	cqmu.mutation.SetIsProcessed(b)
	return cqmu
}

// SetNillableIsProcessed sets the "is_processed" field if the given value is not nil.
func (cqmu *CachedQuestionMetadataUpdate) SetNillableIsProcessed(b *bool) *CachedQuestionMetadataUpdate {
	if b != nil {
		cqmu.SetIsProcessed(*b)
	}
	return cqmu
}

// SetCreatedAt sets the "created_at" field.
func (cqmu *CachedQuestionMetadataUpdate) SetCreatedAt(t time.Time) *CachedQuestionMetadataUpdate {
	cqmu.mutation.SetCreatedAt(t)
	return cqmu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cqmu *CachedQuestionMetadataUpdate) SetNillableCreatedAt(t *time.Time) *CachedQuestionMetadataUpdate {
	if t != nil {
		cqmu.SetCreatedAt(*t)
	}
	return cqmu
}

// SetUpdatedAt sets the "updated_at" field.
func (cqmu *CachedQuestionMetadataUpdate) SetUpdatedAt(t time.Time) *CachedQuestionMetadataUpdate {
	cqmu.mutation.SetUpdatedAt(t)
	return cqmu
}

// Mutation returns the CachedQuestionMetadataMutation object of the builder.
func (cqmu *CachedQuestionMetadataUpdate) Mutation() *CachedQuestionMetadataMutation {
	return cqmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cqmu *CachedQuestionMetadataUpdate) Save(ctx context.Context) (int, error) {
	cqmu.defaults()
	return withHooks(ctx, cqmu.sqlSave, cqmu.mutation, cqmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cqmu *CachedQuestionMetadataUpdate) SaveX(ctx context.Context) int {
	affected, err := cqmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cqmu *CachedQuestionMetadataUpdate) Exec(ctx context.Context) error {
	_, err := cqmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cqmu *CachedQuestionMetadataUpdate) ExecX(ctx context.Context) {
	if err := cqmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cqmu *CachedQuestionMetadataUpdate) defaults() {
	if _, ok := cqmu.mutation.UpdatedAt(); !ok {
		v := cachedquestionmetadata.UpdateDefaultUpdatedAt()
		cqmu.mutation.SetUpdatedAt(v)
	}
}

func (cqmu *CachedQuestionMetadataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(cachedquestionmetadata.Table, cachedquestionmetadata.Columns, sqlgraph.NewFieldSpec(cachedquestionmetadata.FieldID, field.TypeInt))
	if ps := cqmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cqmu.mutation.Key(); ok {
		_spec.SetField(cachedquestionmetadata.FieldKey, field.TypeString, value)
	}
	if value, ok := cqmu.mutation.GetType(); ok {
		_spec.SetField(cachedquestionmetadata.FieldType, field.TypeString, value)
	}
	if value, ok := cqmu.mutation.Subject(); ok {
		_spec.SetField(cachedquestionmetadata.FieldSubject, field.TypeString, value)
	}
	if value, ok := cqmu.mutation.Exam(); ok {
		_spec.SetField(cachedquestionmetadata.FieldExam, field.TypeString, value)
	}
	if value, ok := cqmu.mutation.IsProcessed(); ok {
		_spec.SetField(cachedquestionmetadata.FieldIsProcessed, field.TypeBool, value)
	}
	if value, ok := cqmu.mutation.CreatedAt(); ok {
		_spec.SetField(cachedquestionmetadata.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cqmu.mutation.UpdatedAt(); ok {
		_spec.SetField(cachedquestionmetadata.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cqmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cachedquestionmetadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cqmu.mutation.done = true
	return n, nil
}

// CachedQuestionMetadataUpdateOne is the builder for updating a single CachedQuestionMetadata entity.
type CachedQuestionMetadataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CachedQuestionMetadataMutation
}

// SetKey sets the "key" field.
func (cqmuo *CachedQuestionMetadataUpdateOne) SetKey(s string) *CachedQuestionMetadataUpdateOne {
	cqmuo.mutation.SetKey(s)
	return cqmuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (cqmuo *CachedQuestionMetadataUpdateOne) SetNillableKey(s *string) *CachedQuestionMetadataUpdateOne {
	if s != nil {
		cqmuo.SetKey(*s)
	}
	return cqmuo
}

// SetType sets the "type" field.
func (cqmuo *CachedQuestionMetadataUpdateOne) SetType(s string) *CachedQuestionMetadataUpdateOne {
	cqmuo.mutation.SetType(s)
	return cqmuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cqmuo *CachedQuestionMetadataUpdateOne) SetNillableType(s *string) *CachedQuestionMetadataUpdateOne {
	if s != nil {
		cqmuo.SetType(*s)
	}
	return cqmuo
}

// SetSubject sets the "subject" field.
func (cqmuo *CachedQuestionMetadataUpdateOne) SetSubject(s string) *CachedQuestionMetadataUpdateOne {
	cqmuo.mutation.SetSubject(s)
	return cqmuo
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (cqmuo *CachedQuestionMetadataUpdateOne) SetNillableSubject(s *string) *CachedQuestionMetadataUpdateOne {
	if s != nil {
		cqmuo.SetSubject(*s)
	}
	return cqmuo
}

// SetExam sets the "exam" field.
func (cqmuo *CachedQuestionMetadataUpdateOne) SetExam(s string) *CachedQuestionMetadataUpdateOne {
	cqmuo.mutation.SetExam(s)
	return cqmuo
}

// SetNillableExam sets the "exam" field if the given value is not nil.
func (cqmuo *CachedQuestionMetadataUpdateOne) SetNillableExam(s *string) *CachedQuestionMetadataUpdateOne {
	if s != nil {
		cqmuo.SetExam(*s)
	}
	return cqmuo
}

// SetIsProcessed sets the "is_processed" field.
func (cqmuo *CachedQuestionMetadataUpdateOne) SetIsProcessed(b bool) *CachedQuestionMetadataUpdateOne {
	cqmuo.mutation.SetIsProcessed(b)
	return cqmuo
}

// SetNillableIsProcessed sets the "is_processed" field if the given value is not nil.
func (cqmuo *CachedQuestionMetadataUpdateOne) SetNillableIsProcessed(b *bool) *CachedQuestionMetadataUpdateOne {
	if b != nil {
		cqmuo.SetIsProcessed(*b)
	}
	return cqmuo
}

// SetCreatedAt sets the "created_at" field.
func (cqmuo *CachedQuestionMetadataUpdateOne) SetCreatedAt(t time.Time) *CachedQuestionMetadataUpdateOne {
	cqmuo.mutation.SetCreatedAt(t)
	return cqmuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cqmuo *CachedQuestionMetadataUpdateOne) SetNillableCreatedAt(t *time.Time) *CachedQuestionMetadataUpdateOne {
	if t != nil {
		cqmuo.SetCreatedAt(*t)
	}
	return cqmuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cqmuo *CachedQuestionMetadataUpdateOne) SetUpdatedAt(t time.Time) *CachedQuestionMetadataUpdateOne {
	cqmuo.mutation.SetUpdatedAt(t)
	return cqmuo
}

// Mutation returns the CachedQuestionMetadataMutation object of the builder.
func (cqmuo *CachedQuestionMetadataUpdateOne) Mutation() *CachedQuestionMetadataMutation {
	return cqmuo.mutation
}

// Where appends a list predicates to the CachedQuestionMetadataUpdate builder.
func (cqmuo *CachedQuestionMetadataUpdateOne) Where(ps ...predicate.CachedQuestionMetadata) *CachedQuestionMetadataUpdateOne {
	cqmuo.mutation.Where(ps...)
	return cqmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cqmuo *CachedQuestionMetadataUpdateOne) Select(field string, fields ...string) *CachedQuestionMetadataUpdateOne {
	cqmuo.fields = append([]string{field}, fields...)
	return cqmuo
}

// Save executes the query and returns the updated CachedQuestionMetadata entity.
func (cqmuo *CachedQuestionMetadataUpdateOne) Save(ctx context.Context) (*CachedQuestionMetadata, error) {
	cqmuo.defaults()
	return withHooks(ctx, cqmuo.sqlSave, cqmuo.mutation, cqmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cqmuo *CachedQuestionMetadataUpdateOne) SaveX(ctx context.Context) *CachedQuestionMetadata {
	node, err := cqmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cqmuo *CachedQuestionMetadataUpdateOne) Exec(ctx context.Context) error {
	_, err := cqmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cqmuo *CachedQuestionMetadataUpdateOne) ExecX(ctx context.Context) {
	if err := cqmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cqmuo *CachedQuestionMetadataUpdateOne) defaults() {
	if _, ok := cqmuo.mutation.UpdatedAt(); !ok {
		v := cachedquestionmetadata.UpdateDefaultUpdatedAt()
		cqmuo.mutation.SetUpdatedAt(v)
	}
}

func (cqmuo *CachedQuestionMetadataUpdateOne) sqlSave(ctx context.Context) (_node *CachedQuestionMetadata, err error) {
	_spec := sqlgraph.NewUpdateSpec(cachedquestionmetadata.Table, cachedquestionmetadata.Columns, sqlgraph.NewFieldSpec(cachedquestionmetadata.FieldID, field.TypeInt))
	id, ok := cqmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CachedQuestionMetadata.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cqmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cachedquestionmetadata.FieldID)
		for _, f := range fields {
			if !cachedquestionmetadata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cachedquestionmetadata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cqmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cqmuo.mutation.Key(); ok {
		_spec.SetField(cachedquestionmetadata.FieldKey, field.TypeString, value)
	}
	if value, ok := cqmuo.mutation.GetType(); ok {
		_spec.SetField(cachedquestionmetadata.FieldType, field.TypeString, value)
	}
	if value, ok := cqmuo.mutation.Subject(); ok {
		_spec.SetField(cachedquestionmetadata.FieldSubject, field.TypeString, value)
	}
	if value, ok := cqmuo.mutation.Exam(); ok {
		_spec.SetField(cachedquestionmetadata.FieldExam, field.TypeString, value)
	}
	if value, ok := cqmuo.mutation.IsProcessed(); ok {
		_spec.SetField(cachedquestionmetadata.FieldIsProcessed, field.TypeBool, value)
	}
	if value, ok := cqmuo.mutation.CreatedAt(); ok {
		_spec.SetField(cachedquestionmetadata.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cqmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(cachedquestionmetadata.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &CachedQuestionMetadata{config: cqmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cqmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cachedquestionmetadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cqmuo.mutation.done = true
	return _node, nil
}
