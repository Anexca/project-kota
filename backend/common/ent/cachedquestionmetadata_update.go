// Code generated by ent, DO NOT EDIT.

package ent

import (
	"common/ent/cachedquestionmetadata"
	"common/ent/exam"
	"common/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CachedQuestionMetaDataUpdate is the builder for updating CachedQuestionMetaData entities.
type CachedQuestionMetaDataUpdate struct {
	config
	hooks    []Hook
	mutation *CachedQuestionMetaDataMutation
}

// Where appends a list predicates to the CachedQuestionMetaDataUpdate builder.
func (cqmdu *CachedQuestionMetaDataUpdate) Where(ps ...predicate.CachedQuestionMetaData) *CachedQuestionMetaDataUpdate {
	cqmdu.mutation.Where(ps...)
	return cqmdu
}

// SetCacheUID sets the "cache_uid" field.
func (cqmdu *CachedQuestionMetaDataUpdate) SetCacheUID(s string) *CachedQuestionMetaDataUpdate {
	cqmdu.mutation.SetCacheUID(s)
	return cqmdu
}

// SetNillableCacheUID sets the "cache_uid" field if the given value is not nil.
func (cqmdu *CachedQuestionMetaDataUpdate) SetNillableCacheUID(s *string) *CachedQuestionMetaDataUpdate {
	if s != nil {
		cqmdu.SetCacheUID(*s)
	}
	return cqmdu
}

// SetIsUsed sets the "is_used" field.
func (cqmdu *CachedQuestionMetaDataUpdate) SetIsUsed(b bool) *CachedQuestionMetaDataUpdate {
	cqmdu.mutation.SetIsUsed(b)
	return cqmdu
}

// SetNillableIsUsed sets the "is_used" field if the given value is not nil.
func (cqmdu *CachedQuestionMetaDataUpdate) SetNillableIsUsed(b *bool) *CachedQuestionMetaDataUpdate {
	if b != nil {
		cqmdu.SetIsUsed(*b)
	}
	return cqmdu
}

// SetExpiresAt sets the "expires_at" field.
func (cqmdu *CachedQuestionMetaDataUpdate) SetExpiresAt(t time.Time) *CachedQuestionMetaDataUpdate {
	cqmdu.mutation.SetExpiresAt(t)
	return cqmdu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (cqmdu *CachedQuestionMetaDataUpdate) SetNillableExpiresAt(t *time.Time) *CachedQuestionMetaDataUpdate {
	if t != nil {
		cqmdu.SetExpiresAt(*t)
	}
	return cqmdu
}

// SetCreatedAt sets the "created_at" field.
func (cqmdu *CachedQuestionMetaDataUpdate) SetCreatedAt(t time.Time) *CachedQuestionMetaDataUpdate {
	cqmdu.mutation.SetCreatedAt(t)
	return cqmdu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cqmdu *CachedQuestionMetaDataUpdate) SetNillableCreatedAt(t *time.Time) *CachedQuestionMetaDataUpdate {
	if t != nil {
		cqmdu.SetCreatedAt(*t)
	}
	return cqmdu
}

// SetUpdatedAt sets the "updated_at" field.
func (cqmdu *CachedQuestionMetaDataUpdate) SetUpdatedAt(t time.Time) *CachedQuestionMetaDataUpdate {
	cqmdu.mutation.SetUpdatedAt(t)
	return cqmdu
}

// SetExamID sets the "exam" edge to the Exam entity by ID.
func (cqmdu *CachedQuestionMetaDataUpdate) SetExamID(id int) *CachedQuestionMetaDataUpdate {
	cqmdu.mutation.SetExamID(id)
	return cqmdu
}

// SetExam sets the "exam" edge to the Exam entity.
func (cqmdu *CachedQuestionMetaDataUpdate) SetExam(e *Exam) *CachedQuestionMetaDataUpdate {
	return cqmdu.SetExamID(e.ID)
}

// Mutation returns the CachedQuestionMetaDataMutation object of the builder.
func (cqmdu *CachedQuestionMetaDataUpdate) Mutation() *CachedQuestionMetaDataMutation {
	return cqmdu.mutation
}

// ClearExam clears the "exam" edge to the Exam entity.
func (cqmdu *CachedQuestionMetaDataUpdate) ClearExam() *CachedQuestionMetaDataUpdate {
	cqmdu.mutation.ClearExam()
	return cqmdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cqmdu *CachedQuestionMetaDataUpdate) Save(ctx context.Context) (int, error) {
	cqmdu.defaults()
	return withHooks(ctx, cqmdu.sqlSave, cqmdu.mutation, cqmdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cqmdu *CachedQuestionMetaDataUpdate) SaveX(ctx context.Context) int {
	affected, err := cqmdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cqmdu *CachedQuestionMetaDataUpdate) Exec(ctx context.Context) error {
	_, err := cqmdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cqmdu *CachedQuestionMetaDataUpdate) ExecX(ctx context.Context) {
	if err := cqmdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cqmdu *CachedQuestionMetaDataUpdate) defaults() {
	if _, ok := cqmdu.mutation.UpdatedAt(); !ok {
		v := cachedquestionmetadata.UpdateDefaultUpdatedAt()
		cqmdu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cqmdu *CachedQuestionMetaDataUpdate) check() error {
	if cqmdu.mutation.ExamCleared() && len(cqmdu.mutation.ExamIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CachedQuestionMetaData.exam"`)
	}
	return nil
}

func (cqmdu *CachedQuestionMetaDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cqmdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(cachedquestionmetadata.Table, cachedquestionmetadata.Columns, sqlgraph.NewFieldSpec(cachedquestionmetadata.FieldID, field.TypeInt))
	if ps := cqmdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cqmdu.mutation.CacheUID(); ok {
		_spec.SetField(cachedquestionmetadata.FieldCacheUID, field.TypeString, value)
	}
	if value, ok := cqmdu.mutation.IsUsed(); ok {
		_spec.SetField(cachedquestionmetadata.FieldIsUsed, field.TypeBool, value)
	}
	if value, ok := cqmdu.mutation.ExpiresAt(); ok {
		_spec.SetField(cachedquestionmetadata.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := cqmdu.mutation.CreatedAt(); ok {
		_spec.SetField(cachedquestionmetadata.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cqmdu.mutation.UpdatedAt(); ok {
		_spec.SetField(cachedquestionmetadata.FieldUpdatedAt, field.TypeTime, value)
	}
	if cqmdu.mutation.ExamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cachedquestionmetadata.ExamTable,
			Columns: []string{cachedquestionmetadata.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cqmdu.mutation.ExamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cachedquestionmetadata.ExamTable,
			Columns: []string{cachedquestionmetadata.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cqmdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cachedquestionmetadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cqmdu.mutation.done = true
	return n, nil
}

// CachedQuestionMetaDataUpdateOne is the builder for updating a single CachedQuestionMetaData entity.
type CachedQuestionMetaDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CachedQuestionMetaDataMutation
}

// SetCacheUID sets the "cache_uid" field.
func (cqmduo *CachedQuestionMetaDataUpdateOne) SetCacheUID(s string) *CachedQuestionMetaDataUpdateOne {
	cqmduo.mutation.SetCacheUID(s)
	return cqmduo
}

// SetNillableCacheUID sets the "cache_uid" field if the given value is not nil.
func (cqmduo *CachedQuestionMetaDataUpdateOne) SetNillableCacheUID(s *string) *CachedQuestionMetaDataUpdateOne {
	if s != nil {
		cqmduo.SetCacheUID(*s)
	}
	return cqmduo
}

// SetIsUsed sets the "is_used" field.
func (cqmduo *CachedQuestionMetaDataUpdateOne) SetIsUsed(b bool) *CachedQuestionMetaDataUpdateOne {
	cqmduo.mutation.SetIsUsed(b)
	return cqmduo
}

// SetNillableIsUsed sets the "is_used" field if the given value is not nil.
func (cqmduo *CachedQuestionMetaDataUpdateOne) SetNillableIsUsed(b *bool) *CachedQuestionMetaDataUpdateOne {
	if b != nil {
		cqmduo.SetIsUsed(*b)
	}
	return cqmduo
}

// SetExpiresAt sets the "expires_at" field.
func (cqmduo *CachedQuestionMetaDataUpdateOne) SetExpiresAt(t time.Time) *CachedQuestionMetaDataUpdateOne {
	cqmduo.mutation.SetExpiresAt(t)
	return cqmduo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (cqmduo *CachedQuestionMetaDataUpdateOne) SetNillableExpiresAt(t *time.Time) *CachedQuestionMetaDataUpdateOne {
	if t != nil {
		cqmduo.SetExpiresAt(*t)
	}
	return cqmduo
}

// SetCreatedAt sets the "created_at" field.
func (cqmduo *CachedQuestionMetaDataUpdateOne) SetCreatedAt(t time.Time) *CachedQuestionMetaDataUpdateOne {
	cqmduo.mutation.SetCreatedAt(t)
	return cqmduo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cqmduo *CachedQuestionMetaDataUpdateOne) SetNillableCreatedAt(t *time.Time) *CachedQuestionMetaDataUpdateOne {
	if t != nil {
		cqmduo.SetCreatedAt(*t)
	}
	return cqmduo
}

// SetUpdatedAt sets the "updated_at" field.
func (cqmduo *CachedQuestionMetaDataUpdateOne) SetUpdatedAt(t time.Time) *CachedQuestionMetaDataUpdateOne {
	cqmduo.mutation.SetUpdatedAt(t)
	return cqmduo
}

// SetExamID sets the "exam" edge to the Exam entity by ID.
func (cqmduo *CachedQuestionMetaDataUpdateOne) SetExamID(id int) *CachedQuestionMetaDataUpdateOne {
	cqmduo.mutation.SetExamID(id)
	return cqmduo
}

// SetExam sets the "exam" edge to the Exam entity.
func (cqmduo *CachedQuestionMetaDataUpdateOne) SetExam(e *Exam) *CachedQuestionMetaDataUpdateOne {
	return cqmduo.SetExamID(e.ID)
}

// Mutation returns the CachedQuestionMetaDataMutation object of the builder.
func (cqmduo *CachedQuestionMetaDataUpdateOne) Mutation() *CachedQuestionMetaDataMutation {
	return cqmduo.mutation
}

// ClearExam clears the "exam" edge to the Exam entity.
func (cqmduo *CachedQuestionMetaDataUpdateOne) ClearExam() *CachedQuestionMetaDataUpdateOne {
	cqmduo.mutation.ClearExam()
	return cqmduo
}

// Where appends a list predicates to the CachedQuestionMetaDataUpdate builder.
func (cqmduo *CachedQuestionMetaDataUpdateOne) Where(ps ...predicate.CachedQuestionMetaData) *CachedQuestionMetaDataUpdateOne {
	cqmduo.mutation.Where(ps...)
	return cqmduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cqmduo *CachedQuestionMetaDataUpdateOne) Select(field string, fields ...string) *CachedQuestionMetaDataUpdateOne {
	cqmduo.fields = append([]string{field}, fields...)
	return cqmduo
}

// Save executes the query and returns the updated CachedQuestionMetaData entity.
func (cqmduo *CachedQuestionMetaDataUpdateOne) Save(ctx context.Context) (*CachedQuestionMetaData, error) {
	cqmduo.defaults()
	return withHooks(ctx, cqmduo.sqlSave, cqmduo.mutation, cqmduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cqmduo *CachedQuestionMetaDataUpdateOne) SaveX(ctx context.Context) *CachedQuestionMetaData {
	node, err := cqmduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cqmduo *CachedQuestionMetaDataUpdateOne) Exec(ctx context.Context) error {
	_, err := cqmduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cqmduo *CachedQuestionMetaDataUpdateOne) ExecX(ctx context.Context) {
	if err := cqmduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cqmduo *CachedQuestionMetaDataUpdateOne) defaults() {
	if _, ok := cqmduo.mutation.UpdatedAt(); !ok {
		v := cachedquestionmetadata.UpdateDefaultUpdatedAt()
		cqmduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cqmduo *CachedQuestionMetaDataUpdateOne) check() error {
	if cqmduo.mutation.ExamCleared() && len(cqmduo.mutation.ExamIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CachedQuestionMetaData.exam"`)
	}
	return nil
}

func (cqmduo *CachedQuestionMetaDataUpdateOne) sqlSave(ctx context.Context) (_node *CachedQuestionMetaData, err error) {
	if err := cqmduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(cachedquestionmetadata.Table, cachedquestionmetadata.Columns, sqlgraph.NewFieldSpec(cachedquestionmetadata.FieldID, field.TypeInt))
	id, ok := cqmduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CachedQuestionMetaData.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cqmduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cachedquestionmetadata.FieldID)
		for _, f := range fields {
			if !cachedquestionmetadata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cachedquestionmetadata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cqmduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cqmduo.mutation.CacheUID(); ok {
		_spec.SetField(cachedquestionmetadata.FieldCacheUID, field.TypeString, value)
	}
	if value, ok := cqmduo.mutation.IsUsed(); ok {
		_spec.SetField(cachedquestionmetadata.FieldIsUsed, field.TypeBool, value)
	}
	if value, ok := cqmduo.mutation.ExpiresAt(); ok {
		_spec.SetField(cachedquestionmetadata.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := cqmduo.mutation.CreatedAt(); ok {
		_spec.SetField(cachedquestionmetadata.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cqmduo.mutation.UpdatedAt(); ok {
		_spec.SetField(cachedquestionmetadata.FieldUpdatedAt, field.TypeTime, value)
	}
	if cqmduo.mutation.ExamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cachedquestionmetadata.ExamTable,
			Columns: []string{cachedquestionmetadata.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cqmduo.mutation.ExamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cachedquestionmetadata.ExamTable,
			Columns: []string{cachedquestionmetadata.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CachedQuestionMetaData{config: cqmduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cqmduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cachedquestionmetadata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cqmduo.mutation.done = true
	return _node, nil
}
